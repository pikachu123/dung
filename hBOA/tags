!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AM	ran2.cc	3;"	d	file:
AM	ran2.cc	52;"	d	file:
AR	Makefile	/^AR		= ar$/;"	m
AcyclicOrientedGraph	graph.cc	/^AcyclicOrientedGraph::AcyclicOrientedGraph(int n):OrientedGraph(n)$/;"	f	class:AcyclicOrientedGraph	signature:(int n)
AcyclicOrientedGraph	graph.h	/^  AcyclicOrientedGraph(int n);$/;"	p	class:AcyclicOrientedGraph	access:public	signature:(int n)
AcyclicOrientedGraph	graph.h	/^class AcyclicOrientedGraph: public OrientedGraph {$/;"	c	inherits:OrientedGraph
AcyclicOrientedGraph::AcyclicOrientedGraph	graph.cc	/^AcyclicOrientedGraph::AcyclicOrientedGraph(int n):OrientedGraph(n)$/;"	f	class:AcyclicOrientedGraph	signature:(int n)
AcyclicOrientedGraph::AcyclicOrientedGraph	graph.h	/^  AcyclicOrientedGraph(int n);$/;"	p	class:AcyclicOrientedGraph	access:public	signature:(int n)
AcyclicOrientedGraph::addEdge	graph.cc	/^int AcyclicOrientedGraph::addEdge(int i, int j)$/;"	f	class:AcyclicOrientedGraph	signature:(int i, int j)
AcyclicOrientedGraph::addEdge	graph.h	/^  int addEdge(int i, int j);$/;"	p	class:AcyclicOrientedGraph	access:public	signature:(int i, int j)
AcyclicOrientedGraph::canAddEdge	graph.cc	/^int AcyclicOrientedGraph::canAddEdge(int i, int j)$/;"	f	class:AcyclicOrientedGraph	signature:(int i, int j)
AcyclicOrientedGraph::canAddEdge	graph.h	/^  int canAddEdge(int i, int j);$/;"	p	class:AcyclicOrientedGraph	access:public	signature:(int i, int j)
AcyclicOrientedGraph::canReverseEdge	graph.cc	/^int AcyclicOrientedGraph::canReverseEdge(int i, int j)$/;"	f	class:AcyclicOrientedGraph	signature:(int i, int j)
AcyclicOrientedGraph::canReverseEdge	graph.h	/^  int canReverseEdge(int i, int j);$/;"	p	class:AcyclicOrientedGraph	access:public	signature:(int i, int j)
AcyclicOrientedGraph::reverseEdge	graph.cc	/^int AcyclicOrientedGraph::reverseEdge(int i, int j)$/;"	f	class:AcyclicOrientedGraph	signature:(int i, int j)
AcyclicOrientedGraph::reverseEdge	graph.h	/^  int reverseEdge(int i, int j);$/;"	p	class:AcyclicOrientedGraph	access:public	signature:(int i, int j)
AcyclicOrientedGraph::~AcyclicOrientedGraph	graph.cc	/^AcyclicOrientedGraph::~AcyclicOrientedGraph()$/;"	f	class:AcyclicOrientedGraph	signature:()
AcyclicOrientedGraph::~AcyclicOrientedGraph	graph.h	/^  ~AcyclicOrientedGraph();$/;"	p	class:AcyclicOrientedGraph	access:public	signature:()
BAYESIAN	decisionGraphBoa.cc	45;"	d	file:
BISECTION_PENALTY	fitness.cc	27;"	d	file:
BOA_RECOMBINATION	recombination.h	6;"	d
BRCGOLD	includeFiles.h	12;"	d
BRITMAX	includeFiles.h	11;"	d
BRTOL	includeFiles.h	14;"	d
BRZEPS	includeFiles.h	13;"	d
BoaComputeAdditionGains	boa.h	/^typedef int BoaComputeAdditionGains( int i, $/;"	t
BoaComputeIsolatedNodeContribution	boa.h	/^typedef double BoaComputeIsolatedNodeContribution( int i,$/;"	t
BoaComputeRemovalGains	boa.h	/^typedef int BoaComputeRemovalGains( int i, $/;"	t
BoaComputeReversalGains	boa.h	/^typedef int BoaComputeReversalGains();$/;"	t
BoundedIncommingEdgesAcyclicOrientedGraph	graph.cc	/^BoundedIncommingEdgesAcyclicOrientedGraph::BoundedIncommingEdgesAcyclicOrientedGraph (int n, int k): AcyclicOrientedGraph(n)$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:(int n, int k)
BoundedIncommingEdgesAcyclicOrientedGraph	graph.h	/^  BoundedIncommingEdgesAcyclicOrientedGraph(int n, int k);$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:public	signature:(int n, int k)
BoundedIncommingEdgesAcyclicOrientedGraph	graph.h	/^class BoundedIncommingEdgesAcyclicOrientedGraph:public AcyclicOrientedGraph$/;"	c	inherits:AcyclicOrientedGraph
BoundedIncommingEdgesAcyclicOrientedGraph::BoundedIncommingEdgesAcyclicOrientedGraph	graph.cc	/^BoundedIncommingEdgesAcyclicOrientedGraph::BoundedIncommingEdgesAcyclicOrientedGraph (int n, int k): AcyclicOrientedGraph(n)$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:(int n, int k)
BoundedIncommingEdgesAcyclicOrientedGraph::BoundedIncommingEdgesAcyclicOrientedGraph	graph.h	/^  BoundedIncommingEdgesAcyclicOrientedGraph(int n, int k);$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:public	signature:(int n, int k)
BoundedIncommingEdgesAcyclicOrientedGraph::K	graph.h	/^  int K;$/;"	m	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:private
BoundedIncommingEdgesAcyclicOrientedGraph::addUnorientedEdge	graph.cc	/^int BoundedIncommingEdgesAcyclicOrientedGraph::addUnorientedEdge(int i, int j)$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:(int i, int j)
BoundedIncommingEdgesAcyclicOrientedGraph::addUnorientedEdge	graph.h	/^  int addUnorientedEdge(int i, int j);$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:public	signature:(int i, int j)
BoundedIncommingEdgesAcyclicOrientedGraph::applyBestReduction	graph.cc	/^int BoundedIncommingEdgesAcyclicOrientedGraph::applyBestReduction(int i)$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:(int i)
BoundedIncommingEdgesAcyclicOrientedGraph::applyBestReduction	graph.h	/^  int applyBestReduction(int i);$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:private	signature:(int i)
BoundedIncommingEdgesAcyclicOrientedGraph::findBestReduction	graph.cc	/^int BoundedIncommingEdgesAcyclicOrientedGraph::findBestReduction(int i, int *reducedTo)$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:(int i, int *reducedTo)
BoundedIncommingEdgesAcyclicOrientedGraph::findBestReduction	graph.h	/^  int findBestReduction(int i, int *reducedTo);$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:private	signature:(int i, int *reducedTo)
BoundedIncommingEdgesAcyclicOrientedGraph::reduce	graph.cc	/^int BoundedIncommingEdgesAcyclicOrientedGraph::reduce(int i)$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:(int i)
BoundedIncommingEdgesAcyclicOrientedGraph::reduce	graph.h	/^  int reduce(int i);$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:private	signature:(int i)
BoundedIncommingEdgesAcyclicOrientedGraph::~BoundedIncommingEdgesAcyclicOrientedGraph	graph.cc	/^BoundedIncommingEdgesAcyclicOrientedGraph::~BoundedIncommingEdgesAcyclicOrientedGraph()$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:()
BoundedIncommingEdgesAcyclicOrientedGraph::~BoundedIncommingEdgesAcyclicOrientedGraph	graph.h	/^  ~BoundedIncommingEdgesAcyclicOrientedGraph();$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:public	signature:()
CC	user/Makefile	/^CC		= g++$/;"	m
CENTER_TOURNAMENT_SIZE	population.cc	12;"	d	file:
CGEPS	includeFiles.h	6;"	d
CGITMAX	includeFiles.h	5;"	d
CONNECTED	graph.h	6;"	d
COPY_ALL	recombination.h	8;"	d
CPPFLAGS	Makefile	/^CPPFLAGS	= -c -Wall  -g#-O3$/;"	m
CPPFLAGS	user/Makefile	/^CPPFLAGS	= -I$(hBOALIBDIR) -c -Wall  -g#-O3$/;"	m
Calloc	memalloc.h	/^inline void *Calloc(int x, int s)$/;"	f	signature:(int x, int s)
CoupleArray	arrays.cc	/^CoupleArray::CoupleArray()$/;"	f	class:CoupleArray	signature:()
CoupleArray	arrays.h	/^    CoupleArray();$/;"	p	class:CoupleArray	access:public	signature:()
CoupleArray	arrays.h	/^class CoupleArray {$/;"	c
CoupleArray::CoupleArray	arrays.cc	/^CoupleArray::CoupleArray()$/;"	f	class:CoupleArray	signature:()
CoupleArray::CoupleArray	arrays.h	/^    CoupleArray();$/;"	p	class:CoupleArray	access:public	signature:()
CoupleArray::add	arrays.cc	/^int CoupleArray::add(int a, int b)$/;"	f	class:CoupleArray	signature:(int a, int b)
CoupleArray::add	arrays.h	/^    int add(int a, int b);$/;"	p	class:CoupleArray	access:public	signature:(int a, int b)
CoupleArray::clear	arrays.cc	/^void CoupleArray::clear()$/;"	f	class:CoupleArray	signature:()
CoupleArray::clear	arrays.h	/^    void clear();$/;"	p	class:CoupleArray	access:public	signature:()
CoupleArray::get	arrays.cc	/^int CoupleArray::get(int *a, int *b, int i)$/;"	f	class:CoupleArray	signature:(int *a, int *b, int i)
CoupleArray::get	arrays.h	/^    int get(int *a, int *b, int i);$/;"	p	class:CoupleArray	access:public	signature:(int *a, int *b, int i)
CoupleArray::getSize	arrays.cc	/^int CoupleArray::getSize()$/;"	f	class:CoupleArray	signature:()
CoupleArray::getSize	arrays.h	/^    int getSize();$/;"	p	class:CoupleArray	access:public	signature:()
CoupleArray::n	arrays.h	/^    int n;$/;"	m	class:CoupleArray	access:private
CoupleArray::x	arrays.h	/^    int *x;$/;"	m	class:CoupleArray	access:private
CoupleArray::y	arrays.h	/^    int *y;$/;"	m	class:CoupleArray	access:private
CoupleArray::~CoupleArray	arrays.cc	/^CoupleArray::~CoupleArray()$/;"	f	class:CoupleArray	signature:()
CoupleArray::~CoupleArray	arrays.h	/^    ~CoupleArray();$/;"	p	class:CoupleArray	access:public	signature:()
DECISION_TREE_BOA_RECOMBINATION	recombination.h	7;"	d
DGongPotnl	includeFiles.h	/^void DGongPotnl(int, double*, double*);$/;"	p	signature:(int, double*, double*)
DecisionGraph	decisionGraph.cc	/^DecisionGraph::DecisionGraph()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph	decisionGraph.h	/^  DecisionGraph();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph	decisionGraph.h	/^class DecisionGraph {$/;"	c
DecisionGraph::DecisionGraph	decisionGraph.cc	/^DecisionGraph::DecisionGraph()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::DecisionGraph	decisionGraph.h	/^  DecisionGraph();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::deleteNode	decisionGraph.h	/^  int deleteNode(LabeledTreeNode *x);$/;"	p	class:DecisionGraph	access:protected	signature:(LabeledTreeNode *x)
DecisionGraph::deleteNodeList	decisionGraph.cc	/^int DecisionGraph::deleteNodeList(NodeListItem *x)$/;"	f	class:DecisionGraph	signature:(NodeListItem *x)
DecisionGraph::deleteNodeList	decisionGraph.h	/^  int deleteNodeList(NodeListItem *x);$/;"	p	class:DecisionGraph	access:private	signature:(NodeListItem *x)
DecisionGraph::deleteSubtree	decisionGraph.cc	/^int DecisionGraph::deleteSubtree(LabeledTreeNode *x)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x)
DecisionGraph::deleteSubtree	decisionGraph.h	/^  int deleteSubtree(LabeledTreeNode *x);$/;"	p	class:DecisionGraph	access:private	signature:(LabeledTreeNode *x)
DecisionGraph::getIterator	decisionGraph.cc	/^LabeledTreeNode *DecisionGraph::getIterator()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::getIterator	decisionGraph.h	/^  LabeledTreeNode *getIterator();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::getIteratorLabel	decisionGraph.cc	/^int DecisionGraph::getIteratorLabel()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::getIteratorLabel	decisionGraph.h	/^  int              getIteratorLabel();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::getIteratorValue	decisionGraph.cc	/^Value DecisionGraph::getIteratorValue(char which)$/;"	f	class:DecisionGraph	signature:(char which)
DecisionGraph::getIteratorValue	decisionGraph.h	/^  Value            getIteratorValue(char which);$/;"	p	class:DecisionGraph	access:public	signature:(char which)
DecisionGraph::getLeafIterator	decisionGraph.cc	/^NodeListItem *DecisionGraph::getLeafIterator()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::getLeafIterator	decisionGraph.h	/^  NodeListItem    *getLeafIterator();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::getLeafIteratorNode	decisionGraph.cc	/^LabeledTreeNode *DecisionGraph::getLeafIteratorNode()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::getLeafIteratorNode	decisionGraph.h	/^  LabeledTreeNode *getLeafIteratorNode();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::getLeafIteratorValue	decisionGraph.cc	/^double DecisionGraph::getLeafIteratorValue(char which)$/;"	f	class:DecisionGraph	signature:(char which)
DecisionGraph::getLeafIteratorValue	decisionGraph.h	/^  double           getLeafIteratorValue(char which);$/;"	p	class:DecisionGraph	access:public	signature:(char which)
DecisionGraph::getLeaves	decisionGraph.cc	/^NodeListItem *DecisionGraph::getLeaves()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::getLeaves	decisionGraph.h	/^  NodeListItem *getLeaves();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::getNumLeaves	decisionGraph.cc	/^int DecisionGraph::getNumLeaves()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::getNumLeaves	decisionGraph.h	/^  int           getNumLeaves();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::getRoot	decisionGraph.cc	/^LabeledTreeNode *DecisionGraph::getRoot()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::getRoot	decisionGraph.h	/^  LabeledTreeNode *getRoot();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::getValue	decisionGraph.cc	/^Value DecisionGraph::getValue(LabeledTreeNode *x, char which)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x, char which)
DecisionGraph::getValue	decisionGraph.h	/^  Value           getValue(LabeledTreeNode *x, char which);$/;"	p	class:DecisionGraph	access:public	signature:(LabeledTreeNode *x, char which)
DecisionGraph::iterator	decisionGraph.h	/^  LabeledTreeNode *iterator;$/;"	m	class:DecisionGraph	access:private
DecisionGraph::iteratorFollowInstance	decisionGraph.cc	/^int DecisionGraph::iteratorFollowInstance(char *x)$/;"	f	class:DecisionGraph	signature:(char *x)
DecisionGraph::iteratorFollowInstance	decisionGraph.h	/^  int              iteratorFollowInstance(char *x);$/;"	p	class:DecisionGraph	access:public	signature:(char *x)
DecisionGraph::iteratorFollowInstanceFromRoot	decisionGraph.cc	/^int DecisionGraph::iteratorFollowInstanceFromRoot(char *x)$/;"	f	class:DecisionGraph	signature:(char *x)
DecisionGraph::iteratorFollowInstanceFromRoot	decisionGraph.h	/^  int              iteratorFollowInstanceFromRoot(char *x);$/;"	p	class:DecisionGraph	access:public	signature:(char *x)
DecisionGraph::iteratorGoLeft	decisionGraph.cc	/^int DecisionGraph::iteratorGoLeft()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::iteratorGoLeft	decisionGraph.h	/^  int              iteratorGoLeft();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::iteratorGoRight	decisionGraph.cc	/^int DecisionGraph::iteratorGoRight()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::iteratorGoRight	decisionGraph.h	/^  int              iteratorGoRight();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::iteratorGoTo	decisionGraph.cc	/^int DecisionGraph::iteratorGoTo(LabeledTreeNode *x)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x)
DecisionGraph::iteratorGoTo	decisionGraph.h	/^  int              iteratorGoTo(LabeledTreeNode *x);$/;"	p	class:DecisionGraph	access:public	signature:(LabeledTreeNode *x)
DecisionGraph::iteratorGoToRoot	decisionGraph.cc	/^int DecisionGraph::iteratorGoToRoot()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::iteratorGoToRoot	decisionGraph.h	/^  int              iteratorGoToRoot();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::leafIterator	decisionGraph.h	/^  NodeListItem    *leafIterator;$/;"	m	class:DecisionGraph	access:private
DecisionGraph::leafIteratorNext	decisionGraph.cc	/^int DecisionGraph::leafIteratorNext()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::leafIteratorNext	decisionGraph.h	/^  int              leafIteratorNext();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::leafIteratorPrevious	decisionGraph.cc	/^int DecisionGraph::leafIteratorPrevious()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::leafIteratorPrevious	decisionGraph.h	/^  int              leafIteratorPrevious();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::leaves	decisionGraph.h	/^  NodeListItem    *leaves;$/;"	m	class:DecisionGraph	access:private
DecisionGraph::merge	decisionGraph.cc	/^int DecisionGraph::merge(LabeledTreeNode *x, LabeledTreeNode *y)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
DecisionGraph::merge	decisionGraph.h	/^  int merge(LabeledTreeNode *x, LabeledTreeNode *y);$/;"	p	class:DecisionGraph	access:public	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
DecisionGraph::newNode	decisionGraph.h	/^  LabeledTreeNode *newNode();$/;"	p	class:DecisionGraph	access:protected	signature:()
DecisionGraph::numLeaves	decisionGraph.h	/^  int              numLeaves;$/;"	m	class:DecisionGraph	access:private
DecisionGraph::print	decisionGraph.cc	/^int DecisionGraph::print(FILE *out)$/;"	f	class:DecisionGraph	signature:(FILE *out)
DecisionGraph::print	decisionGraph.h	/^  int print(FILE *out);$/;"	p	class:DecisionGraph	access:public	signature:(FILE *out)
DecisionGraph::recursivePrint	decisionGraph.cc	/^int DecisionGraph::recursivePrint(FILE *out, LabeledTreeNode *x, int shift)$/;"	f	class:DecisionGraph	signature:(FILE *out, LabeledTreeNode *x, int shift)
DecisionGraph::recursivePrint	decisionGraph.h	/^  int recursivePrint(FILE *out, LabeledTreeNode *x, int shift);$/;"	p	class:DecisionGraph	access:private	signature:(FILE *out, LabeledTreeNode *x, int shift)
DecisionGraph::resetLeafIterator	decisionGraph.cc	/^int DecisionGraph::resetLeafIterator()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::resetLeafIterator	decisionGraph.h	/^  int              resetLeafIterator();$/;"	p	class:DecisionGraph	access:public	signature:()
DecisionGraph::root	decisionGraph.h	/^  LabeledTreeNode *root;$/;"	m	class:DecisionGraph	access:private
DecisionGraph::setValue	decisionGraph.cc	/^Value DecisionGraph::setValue(LabeledTreeNode *x, Value value, char which)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x, Value value, char which)
DecisionGraph::setValue	decisionGraph.h	/^  Value           setValue(LabeledTreeNode *x, Value value, char which);$/;"	p	class:DecisionGraph	access:public	signature:(LabeledTreeNode *x, Value value, char which)
DecisionGraph::split	decisionGraph.cc	/^int DecisionGraph::split(LabeledTreeNode *x, int label)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x, int label)
DecisionGraph::split	decisionGraph.h	/^  int split(LabeledTreeNode *x, int label);$/;"	p	class:DecisionGraph	access:public	signature:(LabeledTreeNode *x, int label)
DecisionGraph::updateLeavesAfterSplit	decisionGraph.cc	/^int DecisionGraph::updateLeavesAfterSplit(LabeledTreeNode *x)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x)
DecisionGraph::updateLeavesAfterSplit	decisionGraph.h	/^  int updateLeavesAfterSplit(LabeledTreeNode *x);$/;"	p	class:DecisionGraph	access:private	signature:(LabeledTreeNode *x)
DecisionGraph::updateLeavesBeforeMerge	decisionGraph.cc	/^int DecisionGraph::updateLeavesBeforeMerge(LabeledTreeNode *x, LabeledTreeNode *y)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
DecisionGraph::updateLeavesBeforeMerge	decisionGraph.h	/^  int updateLeavesBeforeMerge(LabeledTreeNode *x, LabeledTreeNode *y);$/;"	p	class:DecisionGraph	access:private	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
DecisionGraph::~DecisionGraph	decisionGraph.cc	/^DecisionGraph::~DecisionGraph()$/;"	f	class:DecisionGraph	signature:()
DecisionGraph::~DecisionGraph	decisionGraph.h	/^  ~DecisionGraph();$/;"	p	class:DecisionGraph	access:public	signature:()
Discretization	dicretize.h	/^  Discretization(Population *p, discretization Grain);$/;"	p	class:Discretization	access:private	signature:(Population *p, discretization Grain)
Discretization	dicretize.h	/^class Discretization {$/;"	c
Discretization	discretization.cc	/^Discretization::Discretization()$/;"	f	class:Discretization	signature:()
Discretization	discretization.h	/^  Discretization();$/;"	p	class:Discretization	access:public	signature:()
Discretization	discretization.h	/^class Discretization {$/;"	c
Discretization::Discretization	dicretize.h	/^  Discretization(Population *p, discretization Grain);$/;"	p	class:Discretization	access:private	signature:(Population *p, discretization Grain)
Discretization::Discretization	discretization.cc	/^Discretization::Discretization()$/;"	f	class:Discretization	signature:()
Discretization::Discretization	discretization.h	/^  Discretization();$/;"	p	class:Discretization	access:public	signature:()
Discretization::allocateBounds	discretization.cc	/^void Discretization::allocateBounds()$/;"	f	class:Discretization	signature:()
Discretization::allocateBounds	discretization.h	/^  void allocateBounds();$/;"	p	class:Discretization	access:public	signature:()
Discretization::binSize	discretization.h	/^  int    binSize;$/;"	m	class:Discretization	access:private
Discretization::bitsPerVariable	discretization.h	/^  int    bitsPerVariable;$/;"	m	class:Discretization	access:private
Discretization::cluster	discretization.cc	/^void Discretization::cluster(double *centers, long *centerSize, int k, int numClusters)$/;"	f	class:Discretization	signature:(double *centers, long *centerSize, int k, int numClusters)
Discretization::cluster	discretization.h	/^  void cluster(double *centers, long *centerSize, int k, int numClusters);$/;"	p	class:Discretization	access:public	signature:(double *centers, long *centerSize, int k, int numClusters)
Discretization::clusterSize	discretization.h	/^  long **clusterSize;$/;"	m	class:Discretization	access:private
Discretization::computeBoundsFHH	discretization.cc	/^void Discretization::computeBoundsFHH(Population *p)$/;"	f	class:Discretization	signature:(Population *p)
Discretization::computeBoundsFHH	discretization.h	/^  void computeBoundsFHH(Population *p);$/;"	p	class:Discretization	access:public	signature:(Population *p)
Discretization::continuousPopulation	discretization.h	/^  Population *continuousPopulation;$/;"	m	class:Discretization	access:public
Discretization::copyDiscreteVariables	discretization.cc	/^void Discretization::copyDiscreteVariables(char *dest, char *src, int n)$/;"	f	class:Discretization	signature:(char *dest, char *src, int n)
Discretization::copyDiscreteVariables	discretization.h	/^  void copyDiscreteVariables(char *dest, char *src, int n);$/;"	p	class:Discretization	access:public	signature:(char *dest, char *src, int n)
Discretization::discretePopulation	discretization.h	/^  Population *discretePopulation;$/;"	m	class:Discretization	access:public
Discretization::discretize	dicretize.h	/^  virtual void discretize(Population *p)=0;$/;"	p	class:Discretization	access:private	signature:(Population *p)
Discretization::discretize	discretization.cc	/^void Discretization::discretize(Population *p, Population *q, DiscretizationParams *discretizationParams)$/;"	f	class:Discretization	signature:(Population *p, Population *q, DiscretizationParams *discretizationParams)
Discretization::discretize	discretization.h	/^  void discretize(Population *p, Population *q, DiscretizationParams *discretizationParams);$/;"	p	class:Discretization	access:public	signature:(Population *p, Population *q, DiscretizationParams *discretizationParams)
Discretization::discretizeContinuousVariablesFHH	discretization.cc	/^void Discretization::discretizeContinuousVariablesFHH(char *dest, double *x, int n)$/;"	f	class:Discretization	signature:(char *dest, double *x, int n)
Discretization::discretizeContinuousVariablesFHH	discretization.h	/^  void discretizeContinuousVariablesFHH(char *dest, double *x, int n);$/;"	p	class:Discretization	access:public	signature:(char *dest, double *x, int n)
Discretization::discretizeFHH	discretization.cc	/^void Discretization::discretizeFHH()$/;"	f	class:Discretization	signature:()
Discretization::discretizeFHH	discretization.h	/^  void discretizeFHH();$/;"	p	class:Discretization	access:public	signature:()
Discretization::discretizeFWH	discretization.cc	/^void Discretization::discretizeFWH()$/;"	f	class:Discretization	signature:()
Discretization::discretizeFWH	discretization.h	/^  void discretizeFWH();$/;"	p	class:Discretization	access:public	signature:()
Discretization::discretizeKMeans	discretization.cc	/^void Discretization::discretizeKMeans()$/;"	f	class:Discretization	signature:()
Discretization::discretizeKMeans	discretization.h	/^  void discretizeKMeans();$/;"	p	class:Discretization	access:public	signature:()
Discretization::fhhBound	discretization.h	/^  long **fhhBound;$/;"	m	class:Discretization	access:private
Discretization::fhhEnd	discretization.h	/^  long **fhhEnd;$/;"	m	class:Discretization	access:private
Discretization::fhhStart	discretization.h	/^  long **fhhStart;$/;"	m	class:Discretization	access:private
Discretization::freeBounds	discretization.cc	/^void Discretization::freeBounds()$/;"	f	class:Discretization	signature:()
Discretization::freeBounds	discretization.h	/^  void freeBounds();$/;"	p	class:Discretization	access:public	signature:()
Discretization::hi	dicretize.h	/^  double *hi;$/;"	m	class:Discretization	access:private
Discretization::hi	discretization.h	/^  double **lo, **hi;$/;"	m	class:Discretization	access:public
Discretization::index	discretization.h	/^  long **index;$/;"	m	class:Discretization	access:private
Discretization::index2	discretization.h	/^  long ***index2;$/;"	m	class:Discretization	access:private
Discretization::lo	dicretize.h	/^  double *lo;$/;"	m	class:Discretization	access:private
Discretization::lo	discretization.h	/^  double **lo, **hi;$/;"	m	class:Discretization	access:public
Discretization::n	dicretize.h	/^  int      n;$/;"	m	class:Discretization	access:private
Discretization::numBins	discretization.h	/^  int numBins;$/;"	m	class:Discretization	access:public
Discretization::numContinuous	discretization.h	/^  int numContinuous;$/;"	m	class:Discretization	access:public
Discretization::numDiscrete	discretization.h	/^  int numDiscrete;$/;"	m	class:Discretization	access:public
Discretization::setCompare	discretization.cc	/^void Discretization::setCompare(Population *p, int whichVariable)$/;"	f	class:Discretization	signature:(Population *p, int whichVariable)
Discretization::setCompare	discretization.h	/^  void setCompare(Population *p, int whichVariable);$/;"	p	class:Discretization	access:public	signature:(Population *p, int whichVariable)
Discretization::undiscretize	dicretize.h	/^  virtual void undiscretize(Population *p)=0;$/;"	p	class:Discretization	access:private	signature:(Population *p)
Discretization::undiscretize	discretization.cc	/^void Discretization::undiscretize(Population *p,Population *q, DiscretizationParams *params)$/;"	f	class:Discretization	signature:(Population *p,Population *q, DiscretizationParams *params)
Discretization::undiscretize	discretization.h	/^  void undiscretize(Population *p, Population *q, DiscretizationParams *params);$/;"	p	class:Discretization	access:public	signature:(Population *p, Population *q, DiscretizationParams *params)
Discretization::undiscretizeFHH	discretization.cc	/^void Discretization::undiscretizeFHH(Individual *from, Individual *to)$/;"	f	class:Discretization	signature:(Individual *from, Individual *to)
Discretization::undiscretizeFHH	discretization.h	/^  void undiscretizeFHH(Individual *from, Individual *to);$/;"	p	class:Discretization	access:public	signature:(Individual *from, Individual *to)
Discretization::undiscretizeFWH	discretization.h	/^  void undiscretizeFWH(Individual *from, Individual *to);$/;"	p	class:Discretization	access:public	signature:(Individual *from, Individual *to)
Discretization::undiscretizeKMeans	discretization.cc	/^void Discretization::undiscretizeKMeans(Individual *from, Individual *to)$/;"	f	class:Discretization	signature:(Individual *from, Individual *to)
Discretization::undiscretizeKMeans	discretization.h	/^  void undiscretizeKMeans(Individual *from, Individual *to);$/;"	p	class:Discretization	access:public	signature:(Individual *from, Individual *to)
Discretization::~Discretization	dicretize.h	/^  ~Discretization();$/;"	p	class:Discretization	access:private	signature:()
Discretization::~Discretization	discretization.cc	/^Discretization::~Discretization()$/;"	f	class:Discretization	signature:()
Discretization::~Discretization	discretization.h	/^  ~Discretization();$/;"	p	class:Discretization	access:public	signature:()
DiscretizationParams	discretization.h	/^typedef struct DiscretizationParams {$/;"	s
DiscretizationParams::bitsPerVariable	discretization.h	/^  int bitsPerVariable;$/;"	m	struct:DiscretizationParams	access:public
DiscretizationParams::discretizationType	discretization.h	/^  int discretizationType;$/;"	m	struct:DiscretizationParams	access:public
DoneFitness	fitness.h	/^typedef int    DoneFitness(void);$/;"	t
EMPTYPRIORNETWORK	priors.cc	6;"	d	file:
EPS	ran2.cc	13;"	d	file:
EPS	ran2.cc	62;"	d	file:
EPSILON	decisionGraphBoa.cc	31;"	d	file:
EPSILON	priors.cc	9;"	d	file:
F1	fitness.cc	/^double F1(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
F1	fitness.cc	/^static double F1(char *x, int numDiscrete, double *c, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous)
FAIL	graph.h	10;"	d
FIXED_THRESHOLD	decisionGraphBoa.cc	29;"	d	file:
Fitness	fitness.h	/^} Fitness;$/;"	t	typeref:struct:__anon13
FitnessDefinition	userBOA.h	/^} FitnessDefinition;$/;"	t	typeref:struct:tagFitnessDefinition
FitnessFunction	fitness.h	/^typedef double FitnessFunction(char *x, int numDiscrete, double *c, int numContinuous);$/;"	t
Free	memalloc.h	/^inline void Free(void *x)$/;"	f	signature:(void *x)
FrequencyDecisionGraph	frequencyDecisionGraph.cc	/^FrequencyDecisionGraph::FrequencyDecisionGraph(Population *p):DecisionGraph()$/;"	f	class:FrequencyDecisionGraph	signature:(Population *p)
FrequencyDecisionGraph	frequencyDecisionGraph.cc	/^FrequencyDecisionGraph::FrequencyDecisionGraph(Population *p, int myPosition):DecisionGraph()$/;"	f	class:FrequencyDecisionGraph	signature:(Population *p, int myPosition)
FrequencyDecisionGraph	frequencyDecisionGraph.h	/^  FrequencyDecisionGraph(Population *p);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(Population *p)
FrequencyDecisionGraph	frequencyDecisionGraph.h	/^  FrequencyDecisionGraph(Population *p, int myPosition);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(Population *p, int myPosition)
FrequencyDecisionGraph	frequencyDecisionGraph.h	/^class FrequencyDecisionGraph: public DecisionGraph$/;"	c	inherits:DecisionGraph
FrequencyDecisionGraph::FrequencyDecisionGraph	frequencyDecisionGraph.cc	/^FrequencyDecisionGraph::FrequencyDecisionGraph(Population *p):DecisionGraph()$/;"	f	class:FrequencyDecisionGraph	signature:(Population *p)
FrequencyDecisionGraph::FrequencyDecisionGraph	frequencyDecisionGraph.cc	/^FrequencyDecisionGraph::FrequencyDecisionGraph(Population *p, int myPosition):DecisionGraph()$/;"	f	class:FrequencyDecisionGraph	signature:(Population *p, int myPosition)
FrequencyDecisionGraph::FrequencyDecisionGraph	frequencyDecisionGraph.h	/^  FrequencyDecisionGraph(Population *p);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(Population *p)
FrequencyDecisionGraph::FrequencyDecisionGraph	frequencyDecisionGraph.h	/^  FrequencyDecisionGraph(Population *p, int myPosition);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(Population *p, int myPosition)
FrequencyDecisionGraph::computeBoltzmannFrequencies	frequencyDecisionGraph.cc	/^int FrequencyDecisionGraph::computeBoltzmannFrequencies(double beta, double coef)$/;"	f	class:FrequencyDecisionGraph	signature:(double beta, double coef)
FrequencyDecisionGraph::computeBoltzmannFrequencies	frequencyDecisionGraph.h	/^  int computeBoltzmannFrequencies(double beta, double coef);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(double beta, double coef)
FrequencyDecisionGraph::computeFrequencies	frequencyDecisionGraph.cc	/^int FrequencyDecisionGraph::computeFrequencies()$/;"	f	class:FrequencyDecisionGraph	signature:()
FrequencyDecisionGraph::computeFrequencies	frequencyDecisionGraph.h	/^  int computeFrequencies();$/;"	p	class:FrequencyDecisionGraph	access:public	signature:()
FrequencyDecisionGraph::computeSplitFrequencies	frequencyDecisionGraph.cc	/^int FrequencyDecisionGraph::computeSplitFrequencies(LabeledTreeNode *x, Value *left0, Value *left1, Value *right0, Value *right1)$/;"	f	class:FrequencyDecisionGraph	signature:(LabeledTreeNode *x, Value *left0, Value *left1, Value *right0, Value *right1)
FrequencyDecisionGraph::computeSplitFrequencies	frequencyDecisionGraph.h	/^  int computeSplitFrequencies(LabeledTreeNode *x, Value *left0, Value *left1, Value *right0, Value *right1);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(LabeledTreeNode *x, Value *left0, Value *left1, Value *right0, Value *right1)
FrequencyDecisionGraph::instanceFrequency	frequencyDecisionGraph.h	/^  double instanceFrequency(int *index, char *x, int n);$/;"	p	class:FrequencyDecisionGraph	access:private	signature:(int *index, char *x, int n)
FrequencyDecisionGraph::merge	frequencyDecisionGraph.cc	/^int FrequencyDecisionGraph::merge(LabeledTreeNode *x, LabeledTreeNode *y)$/;"	f	class:FrequencyDecisionGraph	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
FrequencyDecisionGraph::merge	frequencyDecisionGraph.h	/^  int merge(LabeledTreeNode *x, LabeledTreeNode *y);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
FrequencyDecisionGraph::myNode	frequencyDecisionGraph.h	/^  LabeledTreeNode** myNode;$/;"	m	class:FrequencyDecisionGraph	access:private
FrequencyDecisionGraph::myPosition	frequencyDecisionGraph.h	/^  int         myPosition;$/;"	m	class:FrequencyDecisionGraph	access:private
FrequencyDecisionGraph::p	frequencyDecisionGraph.h	/^  Population *p;$/;"	m	class:FrequencyDecisionGraph	access:private
FrequencyDecisionGraph::split	frequencyDecisionGraph.cc	/^int FrequencyDecisionGraph::split(LabeledTreeNode *x, int label)$/;"	f	class:FrequencyDecisionGraph	signature:(LabeledTreeNode *x, int label)
FrequencyDecisionGraph::split	frequencyDecisionGraph.h	/^  int split(LabeledTreeNode *x, int label);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(LabeledTreeNode *x, int label)
FrequencyDecisionGraph::univariateFrequency	frequencyDecisionGraph.cc	/^double FrequencyDecisionGraph::univariateFrequency(int k)$/;"	f	class:FrequencyDecisionGraph	signature:(int k)
FrequencyDecisionGraph::univariateFrequency	frequencyDecisionGraph.h	/^  double univariateFrequency(int k);$/;"	p	class:FrequencyDecisionGraph	access:private	signature:(int k)
FrequencyDecisionGraph::~FrequencyDecisionGraph	frequencyDecisionGraph.cc	/^FrequencyDecisionGraph::~FrequencyDecisionGraph()$/;"	f	class:FrequencyDecisionGraph	signature:()
FrequencyDecisionGraph::~FrequencyDecisionGraph	frequencyDecisionGraph.h	/^  ~FrequencyDecisionGraph();$/;"	p	class:FrequencyDecisionGraph	access:public	signature:()
FrequencyTree	frequencyTree.cc	/^FrequencyTree::FrequencyTree()$/;"	f	class:FrequencyTree	signature:()
FrequencyTree	frequencyTree.cc	/^FrequencyTree::FrequencyTree(const FrequencyTree& frequencyTree)$/;"	f	class:FrequencyTree	signature:(const FrequencyTree& frequencyTree)
FrequencyTree	frequencyTree.cc	/^FrequencyTree::FrequencyTree(const FrequencyTree& frequencyTree, int *index, int indexLength)$/;"	f	class:FrequencyTree	signature:(const FrequencyTree& frequencyTree, int *index, int indexLength)
FrequencyTree	frequencyTree.h	/^  FrequencyTree();$/;"	p	class:FrequencyTree	access:public	signature:()
FrequencyTree	frequencyTree.h	/^  FrequencyTree(const FrequencyTree& frequencyTree);$/;"	p	class:FrequencyTree	access:public	signature:(const FrequencyTree& frequencyTree)
FrequencyTree	frequencyTree.h	/^  FrequencyTree(const FrequencyTree& frequencyTree, int *index, int indexLength);$/;"	p	class:FrequencyTree	access:public	signature:(const FrequencyTree& frequencyTree, int *index, int indexLength)
FrequencyTree	frequencyTree.h	/^class FrequencyTree {$/;"	c
FrequencyTree::FrequencyTree	frequencyTree.cc	/^FrequencyTree::FrequencyTree()$/;"	f	class:FrequencyTree	signature:()
FrequencyTree::FrequencyTree	frequencyTree.cc	/^FrequencyTree::FrequencyTree(const FrequencyTree& frequencyTree)$/;"	f	class:FrequencyTree	signature:(const FrequencyTree& frequencyTree)
FrequencyTree::FrequencyTree	frequencyTree.cc	/^FrequencyTree::FrequencyTree(const FrequencyTree& frequencyTree, int *index, int indexLength)$/;"	f	class:FrequencyTree	signature:(const FrequencyTree& frequencyTree, int *index, int indexLength)
FrequencyTree::FrequencyTree	frequencyTree.h	/^  FrequencyTree();$/;"	p	class:FrequencyTree	access:public	signature:()
FrequencyTree::FrequencyTree	frequencyTree.h	/^  FrequencyTree(const FrequencyTree& frequencyTree);$/;"	p	class:FrequencyTree	access:public	signature:(const FrequencyTree& frequencyTree)
FrequencyTree::FrequencyTree	frequencyTree.h	/^  FrequencyTree(const FrequencyTree& frequencyTree, int *index, int indexLength);$/;"	p	class:FrequencyTree	access:public	signature:(const FrequencyTree& frequencyTree, int *index, int indexLength)
FrequencyTree::addIndexedInstance	frequencyTree.cc	/^TreeNode *FrequencyTree::addIndexedInstance(char *x, int *index)$/;"	f	class:FrequencyTree	signature:(char *x, int *index)
FrequencyTree::addIndexedInstance	frequencyTree.h	/^  TreeNode *addIndexedInstance(char *x, int *index);$/;"	p	class:FrequencyTree	access:private	signature:(char *x, int *index)
FrequencyTree::addIndexedInstanceWithSplit	frequencyTree.cc	/^TreeNode *FrequencyTree::addIndexedInstanceWithSplit(char *x, int *index, int **list, int *listLength)$/;"	f	class:FrequencyTree	signature:(char *x, int *index, int **list, int *listLength)
FrequencyTree::addIndexedInstanceWithSplit	frequencyTree.h	/^  TreeNode *addIndexedInstanceWithSplit(char *x, int *index, int **list, int *listLength);$/;"	p	class:FrequencyTree	access:private	signature:(char *x, int *index, int **list, int *listLength)
FrequencyTree::addInstance	frequencyTree.cc	/^TreeNode *FrequencyTree::addInstance(char *x)$/;"	f	class:FrequencyTree	signature:(char *x)
FrequencyTree::addInstance	frequencyTree.h	/^  TreeNode *addInstance(char *x);$/;"	p	class:FrequencyTree	access:private	signature:(char *x)
FrequencyTree::addTree	frequencyTree.cc	/^int FrequencyTree::addTree(TreeNode **destination, TreeNode *source)$/;"	f	class:FrequencyTree	signature:(TreeNode **destination, TreeNode *source)
FrequencyTree::addTree	frequencyTree.h	/^  int       addTree(TreeNode **destination, TreeNode *source);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode **destination, TreeNode *source)
FrequencyTree::computeFrequencies	frequencyTree.cc	/^int FrequencyTree::computeFrequencies(Population *p)$/;"	f	class:FrequencyTree	signature:(Population *p)
FrequencyTree::computeFrequencies	frequencyTree.h	/^  int  computeFrequencies(Population *p);$/;"	p	class:FrequencyTree	access:public	signature:(Population *p)
FrequencyTree::computeIndexedFrequencies	frequencyTree.cc	/^int FrequencyTree::computeIndexedFrequencies(Population *p, int *index, int indexLength)$/;"	f	class:FrequencyTree	signature:(Population *p, int *index, int indexLength)
FrequencyTree::computeIndexedFrequencies	frequencyTree.h	/^  int  computeIndexedFrequencies(Population *p, int *index, int indexLength);$/;"	p	class:FrequencyTree	access:public	signature:(Population *p, int *index, int indexLength)
FrequencyTree::computeIndexedFrequenciesWithSplit	frequencyTree.cc	/^int FrequencyTree::computeIndexedFrequenciesWithSplit(Population *p, int *index, int indexLength, int **list, int *listLength, int listSize)$/;"	f	class:FrequencyTree	signature:(Population *p, int *index, int indexLength, int **list, int *listLength, int listSize)
FrequencyTree::computeIndexedFrequenciesWithSplit	frequencyTree.h	/^  int  computeIndexedFrequenciesWithSplit(Population *p, int *index, int indexLength, int **list, int *listLength, int listSize);$/;"	p	class:FrequencyTree	access:public	signature:(Population *p, int *index, int indexLength, int **list, int *listLength, int listSize)
FrequencyTree::copySubtree	frequencyTree.cc	/^TreeNode *FrequencyTree::copySubtree(TreeNode *node)$/;"	f	class:FrequencyTree	signature:(TreeNode *node)
FrequencyTree::copySubtree	frequencyTree.h	/^  TreeNode *copySubtree(TreeNode *node);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node)
FrequencyTree::deleteSubtree	frequencyTree.cc	/^int FrequencyTree::deleteSubtree(TreeNode *node)$/;"	f	class:FrequencyTree	signature:(TreeNode *node)
FrequencyTree::deleteSubtree	frequencyTree.h	/^  int       deleteSubtree(TreeNode *node);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node)
FrequencyTree::divideNodes	frequencyTree.cc	/^int FrequencyTree::divideNodes(double x)$/;"	f	class:FrequencyTree	signature:(double x)
FrequencyTree::divideNodes	frequencyTree.h	/^  int       divideNodes(double x);$/;"	p	class:FrequencyTree	access:private	signature:(double x)
FrequencyTree::divideSubtreeNodes	frequencyTree.cc	/^int FrequencyTree::divideSubtreeNodes(TreeNode *node)$/;"	f	class:FrequencyTree	signature:(TreeNode *node)
FrequencyTree::divideSubtreeNodes	frequencyTree.h	/^  int       divideSubtreeNodes(TreeNode *node);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node)
FrequencyTree::getFrequency	frequencyTree.cc	/^double FrequencyTree::getFrequency(char *x, int l)$/;"	f	class:FrequencyTree	signature:(char *x, int l)
FrequencyTree::getFrequency	frequencyTree.h	/^  double getFrequency(char *x, int l);$/;"	p	class:FrequencyTree	access:public	signature:(char *x, int l)
FrequencyTree::getFrequencyList	frequencyTree.cc	/^long FrequencyTree::getFrequencyList(double *x)$/;"	f	class:FrequencyTree	signature:(double *x)
FrequencyTree::getFrequencyList	frequencyTree.h	/^  long getFrequencyList(double *x);$/;"	p	class:FrequencyTree	access:public	signature:(double *x)
FrequencyTree::getInstances	frequencyTree.cc	/^long FrequencyTree::getInstances(char **x)$/;"	f	class:FrequencyTree	signature:(char **x)
FrequencyTree::getInstances	frequencyTree.h	/^  long getInstances(char **x);$/;"	p	class:FrequencyTree	access:public	signature:(char **x)
FrequencyTree::getInstancesAndFrequencies	frequencyTree.cc	/^long FrequencyTree::getInstancesAndFrequencies(char **x, double *f)$/;"	f	class:FrequencyTree	signature:(char **x, double *f)
FrequencyTree::getInstancesAndFrequencies	frequencyTree.h	/^  long getInstancesAndFrequencies(char **x, double *f);$/;"	p	class:FrequencyTree	access:public	signature:(char **x, double *f)
FrequencyTree::getInstancesAndFrequenciesWithSplit	frequencyTree.cc	/^long FrequencyTree::getInstancesAndFrequenciesWithSplit(char **x, double *f, int l)$/;"	f	class:FrequencyTree	signature:(char **x, double *f, int l)
FrequencyTree::getInstancesAndFrequenciesWithSplit	frequencyTree.h	/^  long getInstancesAndFrequenciesWithSplit(char **x, double *f, int l);$/;"	p	class:FrequencyTree	access:public	signature:(char **x, double *f, int l)
FrequencyTree::getNumInstances	frequencyTree.cc	/^long FrequencyTree::getNumInstances()$/;"	f	class:FrequencyTree	signature:()
FrequencyTree::getNumInstances	frequencyTree.h	/^  long getNumInstances();$/;"	p	class:FrequencyTree	access:public	signature:()
FrequencyTree::getNumInstancesWithSplit	frequencyTree.cc	/^long FrequencyTree::getNumInstancesWithSplit(int l)$/;"	f	class:FrequencyTree	signature:(int l)
FrequencyTree::getNumInstancesWithSplit	frequencyTree.h	/^  long getNumInstancesWithSplit(int l);$/;"	p	class:FrequencyTree	access:public	signature:(int l)
FrequencyTree::getShiftedInstancesAndFrequencies	frequencyTree.cc	/^long FrequencyTree::getShiftedInstancesAndFrequencies(char **x, double *f, int shift)$/;"	f	class:FrequencyTree	signature:(char **x, double *f, int shift)
FrequencyTree::getShiftedInstancesAndFrequencies	frequencyTree.h	/^  long getShiftedInstancesAndFrequencies(char **x, double *f, int shift);$/;"	p	class:FrequencyTree	access:public	signature:(char **x, double *f, int shift)
FrequencyTree::getSubtreeFrequencyList	frequencyTree.cc	/^long FrequencyTree::getSubtreeFrequencyList(TreeNode *node, double *x, int depth, long i)$/;"	f	class:FrequencyTree	signature:(TreeNode *node, double *x, int depth, long i)
FrequencyTree::getSubtreeFrequencyList	frequencyTree.h	/^  long      getSubtreeFrequencyList(TreeNode *node, double *x, int depth, long i);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node, double *x, int depth, long i)
FrequencyTree::getSubtreeInstances	frequencyTree.cc	/^long FrequencyTree::getSubtreeInstances(TreeNode *node, char **x, int depth, long i)$/;"	f	class:FrequencyTree	signature:(TreeNode *node, char **x, int depth, long i)
FrequencyTree::getSubtreeInstances	frequencyTree.h	/^  long      getSubtreeInstances(TreeNode *node, char **x, int depth, long i);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node, char **x, int depth, long i)
FrequencyTree::getSubtreeInstancesAndFrequencies	frequencyTree.cc	/^long FrequencyTree::getSubtreeInstancesAndFrequencies(TreeNode *node, char **x, double *f, int depth, long i)$/;"	f	class:FrequencyTree	signature:(TreeNode *node, char **x, double *f, int depth, long i)
FrequencyTree::getSubtreeInstancesAndFrequencies	frequencyTree.h	/^  long      getSubtreeInstancesAndFrequencies(TreeNode *node, char **x, double *f, int depth, long i);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node, char **x, double *f, int depth, long i)
FrequencyTree::getSubtreeInstancesAndFrequenciesWithSplit	frequencyTree.cc	/^long FrequencyTree::getSubtreeInstancesAndFrequenciesWithSplit(TreeNode *node, char **x, double *f, int l, int depth, long i)$/;"	f	class:FrequencyTree	signature:(TreeNode *node, char **x, double *f, int l, int depth, long i)
FrequencyTree::getSubtreeInstancesAndFrequenciesWithSplit	frequencyTree.h	/^  long      getSubtreeInstancesAndFrequenciesWithSplit(TreeNode *node, char **x, double *f, int l, int depth, long i);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node, char **x, double *f, int l, int depth, long i)
FrequencyTree::getSubtreeNumInstances	frequencyTree.h	/^  long      getSubtreeNumInstances(TreeNode *node);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node)
FrequencyTree::getSubtreeNumInstancesWithSplit	frequencyTree.cc	/^long FrequencyTree::getSubtreeNumInstancesWithSplit(TreeNode *node, int l)$/;"	f	class:FrequencyTree	signature:(TreeNode *node, int l)
FrequencyTree::getSubtreeNumInstancesWithSplit	frequencyTree.h	/^  long      getSubtreeNumInstancesWithSplit(TreeNode *node, int l);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node, int l)
FrequencyTree::globalDivisor	frequencyTree.h	/^  double     globalDivisor;$/;"	m	class:FrequencyTree	access:private
FrequencyTree::globalK	frequencyTree.h	/^  long       globalK;$/;"	m	class:FrequencyTree	access:private
FrequencyTree::listSize	frequencyTree.h	/^  int        listSize;$/;"	m	class:FrequencyTree	access:private
FrequencyTree::n	frequencyTree.h	/^  int        n;$/;"	m	class:FrequencyTree	access:private
FrequencyTree::numLeaves	frequencyTree.h	/^  long       numLeaves;$/;"	m	class:FrequencyTree	access:private
FrequencyTree::recomputeNumLeaves	frequencyTree.cc	/^long FrequencyTree::recomputeNumLeaves(TreeNode *node)$/;"	f	class:FrequencyTree	signature:(TreeNode *node)
FrequencyTree::recomputeNumLeaves	frequencyTree.h	/^  long      recomputeNumLeaves(TreeNode *node);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node)
FrequencyTree::reduceByIndex	frequencyTree.cc	/^int FrequencyTree::reduceByIndex(TreeNode *source, int *index, int indexLength)$/;"	f	class:FrequencyTree	signature:(TreeNode *source, int *index, int indexLength)
FrequencyTree::reduceByIndex	frequencyTree.h	/^  int       reduceByIndex(TreeNode *source, int *index, int indexLength);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *source, int *index, int indexLength)
FrequencyTree::reduceSubtreeByIndex	frequencyTree.cc	/^int FrequencyTree::reduceSubtreeByIndex(TreeNode **currentNode, TreeNode *sourceTree, int *index, int indexLength, int depth)$/;"	f	class:FrequencyTree	signature:(TreeNode **currentNode, TreeNode *sourceTree, int *index, int indexLength, int depth)
FrequencyTree::reduceSubtreeByIndex	frequencyTree.h	/^  int       reduceSubtreeByIndex(TreeNode **currentNode, TreeNode *sourceTree, int *index, int indexLength, int depth);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode **currentNode, TreeNode *sourceTree, int *index, int indexLength, int depth)
FrequencyTree::reset	frequencyTree.cc	/^int FrequencyTree::reset()$/;"	f	class:FrequencyTree	signature:()
FrequencyTree::reset	frequencyTree.h	/^  int  reset();$/;"	p	class:FrequencyTree	access:public	signature:()
FrequencyTree::root	frequencyTree.h	/^  TreeNode  *root;$/;"	m	class:FrequencyTree	access:private
FrequencyTree::~FrequencyTree	frequencyTree.cc	/^FrequencyTree::~FrequencyTree()$/;"	f	class:FrequencyTree	signature:()
FrequencyTree::~FrequencyTree	frequencyTree.h	/^  ~FrequencyTree();$/;"	p	class:FrequencyTree	access:public	signature:()
G	recombination.h	/^  AcyclicOrientedGraph *G;$/;"	m	struct:__anon2	access:public
GRAPH_OPERATION_ADDITION	boa.cc	30;"	d	file:
GRAPH_OPERATION_ADDITION	hBoa.cc	33;"	d	file:
GRAPH_OPERATION_JOINT	hBoa.cc	36;"	d	file:
GRAPH_OPERATION_NONE	boa.cc	29;"	d	file:
GRAPH_OPERATION_NONE	hBoa.cc	32;"	d	file:
GRAPH_OPERATION_REMOVAL	boa.cc	31;"	d	file:
GRAPH_OPERATION_REMOVAL	hBoa.cc	34;"	d	file:
GRAPH_OPERATION_REVERSAL	boa.cc	32;"	d	file:
GRAPH_OPERATION_REVERSAL	hBoa.cc	35;"	d	file:
G_SI_lambda	includeFiles.h	20;"	d
GetNumberOfOptima	fitness.h	/^typedef long   GetNumberOfOptima(int numDiscrete, int numContinuous);$/;"	t
GetValueDescription	getFileArgs.h	/^typedef char *GetValueDescription(int n);$/;"	t
GongPotnl	includeFiles.h	/^double GongPotnl(int, double*);$/;"	p	signature:(int, double*)
GoodBBs	fitness.h	/^typedef double GoodBBs(char *x, int numDiscrete, double *c, int numContinuous);$/;"	t
GroupInformation	hBoa.h	/^} GroupInformation;$/;"	t	typeref:struct:__anon5
HEAVY	fitness.h	4;"	d
HIFF	fitness.cc	/^double HIFF(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
HIFF	fitness.cc	/^static double HIFF(char *x, int numDiscrete, double *c, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous)
HIGH_PEAK	fitness.cc	24;"	d	file:
HILLCLIMBING_INJECTION	fitness.cc	17;"	d	file:
HboaComputeAdditionGains	hBoa.h	/^typedef int HboaComputeAdditionGains();$/;"	t
HboaComputeIsolatedNodeContribution	hBoa.h	/^typedef int HboaComputeIsolatedNodeContribution();$/;"	t
HboaComputeJointGains	hBoa.h	/^typedef int HboaComputeJointGains();$/;"	t
HboaComputeRemovalGains	hBoa.h	/^typedef int HboaComputeRemovalGains();$/;"	t
HboaComputeReversalGains	hBoa.h	/^typedef int HboaComputeReversalGains();$/;"	t
IA1	ran2.cc	54;"	d	file:
IA1	ran2.cc	5;"	d	file:
IA2	ran2.cc	55;"	d	file:
IA2	ran2.cc	6;"	d	file:
IM1	ran2.cc	1;"	d	file:
IM1	ran2.cc	50;"	d	file:
IM2	ran2.cc	2;"	d	file:
IM2	ran2.cc	51;"	d	file:
IMM1	ran2.cc	4;"	d	file:
IMM1	ran2.cc	53;"	d	file:
IQ1	ran2.cc	56;"	d	file:
IQ1	ran2.cc	7;"	d	file:
IQ2	ran2.cc	57;"	d	file:
IQ2	ran2.cc	8;"	d	file:
IR1	ran2.cc	58;"	d	file:
IR1	ran2.cc	9;"	d	file:
IR2	ran2.cc	10;"	d	file:
IR2	ran2.cc	59;"	d	file:
Individual	individual.h	/^class Individual {$/;"	c
Individual::chromosome	individual.h	/^  char   *chromosome;$/;"	m	class:Individual	access:public
Individual::cluster	individual.h	/^  int    cluster;$/;"	m	class:Individual	access:public
Individual::continuous	individual.h	/^  double *continuous;$/;"	m	class:Individual	access:public
Individual::f	individual.h	/^  double f;$/;"	m	class:Individual	access:public
Individual::fCalculated	individual.h	/^  char   fCalculated;$/;"	m	class:Individual	access:public
Individual::goodBBs	individual.h	/^  double goodBBs;$/;"	m	class:Individual	access:public
Individual::mutation	individual.h	/^  double *mutation;$/;"	m	class:Individual	access:public
Individual::operator <	individual.h	/^  char operator< (Individual x)$/;"	f	class:Individual	access:public	signature:(Individual x)
Individual::operator <=	individual.h	/^  char operator<= (Individual x)$/;"	f	class:Individual	access:public	signature:(Individual x)
Individual::operator ==	individual.h	/^  char operator== (Individual x)$/;"	f	class:Individual	access:public	signature:(Individual x)
Individual::operator >	individual.h	/^  char operator> (Individual x)$/;"	f	class:Individual	access:public	signature:(Individual x)
Individual::operator >=	individual.h	/^  char operator>= (Individual x)$/;"	f	class:Individual	access:public	signature:(Individual x)
InitFitness	fitness.h	/^typedef int    InitFitness(double *params);$/;"	t
InitReorder	reordering.h	/^typedef int InitReorder(int n, double *params);$/;"	t
InjectGoodGuys	fitness.h	/^typedef int    InjectGoodGuys(void *p);$/;"	t
IntStack	stack.cc	/^IntStack::IntStack(int max)$/;"	f	class:IntStack	signature:(int max)
IntStack	stack.h	/^  IntStack(int max);$/;"	p	class:IntStack	access:public	signature:(int max)
IntStack	stack.h	/^class IntStack {$/;"	c
IntStack::IntStack	stack.cc	/^IntStack::IntStack(int max)$/;"	f	class:IntStack	signature:(int max)
IntStack::IntStack	stack.h	/^  IntStack(int max);$/;"	p	class:IntStack	access:public	signature:(int max)
IntStack::empty	stack.cc	/^int IntStack::empty()$/;"	f	class:IntStack	signature:()
IntStack::empty	stack.h	/^  int empty();$/;"	p	class:IntStack	access:public	signature:()
IntStack::full	stack.cc	/^int IntStack::full()$/;"	f	class:IntStack	signature:()
IntStack::full	stack.h	/^  int full();$/;"	p	class:IntStack	access:public	signature:()
IntStack::getSize	stack.cc	/^int IntStack::getSize()$/;"	f	class:IntStack	signature:()
IntStack::getSize	stack.h	/^  int getSize();$/;"	p	class:IntStack	access:public	signature:()
IntStack::goToMarker	stack.cc	/^int IntStack::goToMarker()$/;"	f	class:IntStack	signature:()
IntStack::goToMarker	stack.h	/^  int goToMarker();$/;"	p	class:IntStack	access:public	signature:()
IntStack::marker	stack.h	/^  int marker;$/;"	m	class:IntStack	access:private
IntStack::maxSize	stack.h	/^  int maxSize;$/;"	m	class:IntStack	access:private
IntStack::notEmpty	stack.cc	/^int IntStack::notEmpty()$/;"	f	class:IntStack	signature:()
IntStack::notEmpty	stack.h	/^  int notEmpty();$/;"	p	class:IntStack	access:public	signature:()
IntStack::pop	stack.cc	/^int IntStack::pop()$/;"	f	class:IntStack	signature:()
IntStack::pop	stack.h	/^  int pop();$/;"	p	class:IntStack	access:public	signature:()
IntStack::push	stack.cc	/^int IntStack::push(int x)$/;"	f	class:IntStack	signature:(int x)
IntStack::push	stack.h	/^  int push(int x);$/;"	p	class:IntStack	access:public	signature:(int x)
IntStack::s	stack.h	/^  int *s;$/;"	m	class:IntStack	access:private
IntStack::setMarker	stack.cc	/^int IntStack::setMarker()$/;"	f	class:IntStack	signature:()
IntStack::setMarker	stack.h	/^  int setMarker();$/;"	p	class:IntStack	access:public	signature:()
IntStack::size	stack.h	/^  int size;$/;"	m	class:IntStack	access:private
IntStack::~IntStack	stack.cc	/^IntStack::~IntStack()$/;"	f	class:IntStack	signature:()
IntStack::~IntStack	stack.h	/^  ~IntStack();$/;"	p	class:IntStack	access:public	signature:()
IsBest	fitness.h	/^typedef char   IsBest(char *x, int numDiscrete, double *c, int numContinuous, char type, double f);$/;"	t
K	graph.h	/^  int K;$/;"	m	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:private
K2ComputeIsolatedNodeContribution	BDe.cc	/^double K2ComputeIsolatedNodeContribution(int i, Population *P)$/;"	f	signature:(int i, Population *P)
K2ComputeIsolatedNodeContribution	BDe.h	/^double K2ComputeIsolatedNodeContribution(int i, Population *P);$/;"	p	signature:(int i, Population *P)
K2ComputeLogGains	BDe.cc	/^int K2ComputeLogGains( int i, $/;"	f	signature:( int i, double oldContribution, double **gain, int *updateIdx, int numUpdated, int *parentList, int numParents, Population *P, RecombinationParams *params)
K2ComputeLogGains	BDe.h	/^int K2ComputeLogGains( int i, $/;"	p	signature:( int i, double oldContribution, double **gain, int *updateIdx, int numUpdated, int *parentList, int numParents, Population *P, RecombinationParams *params)
K2_METRIC	boa.h	8;"	d
LEAF	decisionGraph.h	8;"	d
LFLAG	Makefile	/^LFLAG		=$/;"	m
LFLAGS	user/Makefile	/^LFLAGS		=$/;"	m
LIGHT	fitness.h	5;"	d
LINCPRIORNETWORK	priors.cc	7;"	d	file:
LINCPriorNetwork	priors.cc	/^int LINCPriorNetwork(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N)$/;"	f	signature:(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N)
LINCPriorNetwork	priors.h	/^int LINCPriorNetwork(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N);$/;"	p	signature:(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N)
LOW_PEAK	fitness.cc	25;"	d	file:
LabeledTreeNode	labeledTreeNode.cc	/^LabeledTreeNode::LabeledTreeNode(int type)$/;"	f	class:LabeledTreeNode	signature:(int type)
LabeledTreeNode	labeledTreeNode.h	/^  LabeledTreeNode(int type);$/;"	p	class:LabeledTreeNode	access:public	signature:(int type)
LabeledTreeNode	labeledTreeNode.h	/^class LabeledTreeNode {$/;"	c
LabeledTreeNode::LabeledTreeNode	labeledTreeNode.cc	/^LabeledTreeNode::LabeledTreeNode(int type)$/;"	f	class:LabeledTreeNode	signature:(int type)
LabeledTreeNode::LabeledTreeNode	labeledTreeNode.h	/^  LabeledTreeNode(int type);$/;"	p	class:LabeledTreeNode	access:public	signature:(int type)
LabeledTreeNode::allocateInstanceIndexEntries	labeledTreeNode.cc	/^int LabeledTreeNode::allocateInstanceIndexEntries(int n)$/;"	f	class:LabeledTreeNode	signature:(int n)
LabeledTreeNode::allocateInstanceIndexEntries	labeledTreeNode.h	/^  int allocateInstanceIndexEntries(int n);$/;"	p	class:LabeledTreeNode	access:public	signature:(int n)
LabeledTreeNode::dArrayTmp	labeledTreeNode.h	/^  Value *dArrayTmp;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::depth	labeledTreeNode.h	/^  int       depth;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::freeTemporaryArrays	labeledTreeNode.cc	/^int LabeledTreeNode::freeTemporaryArrays()$/;"	f	class:LabeledTreeNode	signature:()
LabeledTreeNode::freeTemporaryArrays	labeledTreeNode.h	/^  int freeTemporaryArrays();$/;"	p	class:LabeledTreeNode	access:public	signature:()
LabeledTreeNode::label	labeledTreeNode.h	/^  int       label;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::leafParentsItem	labeledTreeNode.h	/^  void *leafParentsItem;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::leavesItem	labeledTreeNode.h	/^  void *leavesItem;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::left	labeledTreeNode.h	/^  LabeledTreeNode *left;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::leftValue0Array	labeledTreeNode.h	/^  Value *leftValue0Array;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::leftValue1Array	labeledTreeNode.h	/^  Value *leftValue1Array;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::numParents	labeledTreeNode.h	/^  int             numParents;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::parent	labeledTreeNode.h	/^  LabeledTreeNode **parent;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::parentLabelCoincidenceVector	labeledTreeNode.h	/^  char *parentLabelCoincidenceVector;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::reallocateInstanceIndexEntries	labeledTreeNode.h	/^  int reallocateInstanceIndexEntries(int n);$/;"	p	class:LabeledTreeNode	access:public	signature:(int n)
LabeledTreeNode::right	labeledTreeNode.h	/^  LabeledTreeNode *right;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::rightValue0Array	labeledTreeNode.h	/^  Value *rightValue0Array;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::rightValue1Array	labeledTreeNode.h	/^  Value *rightValue1Array;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::value	labeledTreeNode.h	/^  Value     value[2];$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::which	labeledTreeNode.h	/^  int       which;$/;"	m	class:LabeledTreeNode	access:public
LabeledTreeNode::~LabeledTreeNode	labeledTreeNode.cc	/^LabeledTreeNode::~LabeledTreeNode()$/;"	f	class:LabeledTreeNode	signature:()
LabeledTreeNode::~LabeledTreeNode	labeledTreeNode.h	/^  ~LabeledTreeNode();$/;"	p	class:LabeledTreeNode	access:public	signature:()
LeastIncommingEdgesAcyclicOrientedGraph	graph.cc	/^LeastIncommingEdgesAcyclicOrientedGraph::LeastIncommingEdgesAcyclicOrientedGraph(int n):AcyclicOrientedGraph(n)$/;"	f	class:LeastIncommingEdgesAcyclicOrientedGraph	signature:(int n)
LeastIncommingEdgesAcyclicOrientedGraph	graph.h	/^  LeastIncommingEdgesAcyclicOrientedGraph(int n);$/;"	p	class:LeastIncommingEdgesAcyclicOrientedGraph	access:public	signature:(int n)
LeastIncommingEdgesAcyclicOrientedGraph	graph.h	/^class LeastIncommingEdgesAcyclicOrientedGraph:public AcyclicOrientedGraph$/;"	c	inherits:AcyclicOrientedGraph
LeastIncommingEdgesAcyclicOrientedGraph::LeastIncommingEdgesAcyclicOrientedGraph	graph.cc	/^LeastIncommingEdgesAcyclicOrientedGraph::LeastIncommingEdgesAcyclicOrientedGraph(int n):AcyclicOrientedGraph(n)$/;"	f	class:LeastIncommingEdgesAcyclicOrientedGraph	signature:(int n)
LeastIncommingEdgesAcyclicOrientedGraph::LeastIncommingEdgesAcyclicOrientedGraph	graph.h	/^  LeastIncommingEdgesAcyclicOrientedGraph(int n);$/;"	p	class:LeastIncommingEdgesAcyclicOrientedGraph	access:public	signature:(int n)
LeastIncommingEdgesAcyclicOrientedGraph::addUnorientedEdge	graph.cc	/^int LeastIncommingEdgesAcyclicOrientedGraph::addUnorientedEdge(int i, int j)$/;"	f	class:LeastIncommingEdgesAcyclicOrientedGraph	signature:(int i, int j)
LeastIncommingEdgesAcyclicOrientedGraph::addUnorientedEdge	graph.h	/^  int addUnorientedEdge(int i, int j);$/;"	p	class:LeastIncommingEdgesAcyclicOrientedGraph	access:public	signature:(int i, int j)
LeastIncommingEdgesAcyclicOrientedGraph::~LeastIncommingEdgesAcyclicOrientedGraph	graph.cc	/^LeastIncommingEdgesAcyclicOrientedGraph::~LeastIncommingEdgesAcyclicOrientedGraph()$/;"	f	class:LeastIncommingEdgesAcyclicOrientedGraph	signature:()
LeastIncommingEdgesAcyclicOrientedGraph::~LeastIncommingEdgesAcyclicOrientedGraph	graph.h	/^  ~LeastIncommingEdgesAcyclicOrientedGraph();$/;"	p	class:LeastIncommingEdgesAcyclicOrientedGraph	access:public	signature:()
LoadParameters	fitness.h	/^typedef int    LoadParameters(char *filename, double *params);$/;"	t
LoudAcyclicOrientedGraph	graph.cc	/^LoudAcyclicOrientedGraph::LoudAcyclicOrientedGraph(int n):AcyclicOrientedGraph(n)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int n)
LoudAcyclicOrientedGraph	graph.h	/^  LoudAcyclicOrientedGraph(int n);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int n)
LoudAcyclicOrientedGraph	graph.h	/^class LoudAcyclicOrientedGraph:public AcyclicOrientedGraph {$/;"	c	inherits:AcyclicOrientedGraph
LoudAcyclicOrientedGraph::LoudAcyclicOrientedGraph	graph.cc	/^LoudAcyclicOrientedGraph::LoudAcyclicOrientedGraph(int n):AcyclicOrientedGraph(n)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int n)
LoudAcyclicOrientedGraph::LoudAcyclicOrientedGraph	graph.h	/^  LoudAcyclicOrientedGraph(int n);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int n)
LoudAcyclicOrientedGraph::addEdge	graph.cc	/^int LoudAcyclicOrientedGraph::addEdge(int i, int j)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int i, int j)
LoudAcyclicOrientedGraph::addEdge	graph.h	/^  int addEdge(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
LoudAcyclicOrientedGraph::connected	graph.cc	/^int LoudAcyclicOrientedGraph::connected(int i, int j)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int i, int j)
LoudAcyclicOrientedGraph::connected	graph.h	/^  int connected(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
LoudAcyclicOrientedGraph::existsPath	graph.cc	/^int LoudAcyclicOrientedGraph::existsPath(int i, int j)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int i, int j)
LoudAcyclicOrientedGraph::existsPath	graph.h	/^  int existsPath(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
LoudAcyclicOrientedGraph::notConnected	graph.h	/^  int notConnected(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
LoudAcyclicOrientedGraph::removeAllEdges	graph.cc	/^int LoudAcyclicOrientedGraph::removeAllEdges()$/;"	f	class:LoudAcyclicOrientedGraph	signature:()
LoudAcyclicOrientedGraph::removeAllEdges	graph.h	/^  int removeAllEdges();$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:()
LoudAcyclicOrientedGraph::removeEdge	graph.cc	/^int LoudAcyclicOrientedGraph::removeEdge(int i, int j)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int i, int j)
LoudAcyclicOrientedGraph::removeEdge	graph.h	/^  int removeEdge(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
LoudAcyclicOrientedGraph::reverseEdge	graph.cc	/^int LoudAcyclicOrientedGraph::reverseEdge(int i, int j)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int i, int j)
LoudAcyclicOrientedGraph::reverseEdge	graph.h	/^  int reverseEdge(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
LoudAcyclicOrientedGraph::~LoudAcyclicOrientedGraph	graph.cc	/^LoudAcyclicOrientedGraph::~LoudAcyclicOrientedGraph()$/;"	f	class:LoudAcyclicOrientedGraph	signature:()
LoudAcyclicOrientedGraph::~LoudAcyclicOrientedGraph	graph.h	/^  ~LoudAcyclicOrientedGraph();$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:()
M	hBOAmain.cc	/^long M;                    \/\/ size of the parent population$/;"	v
MDL	decisionGraphBoa.cc	46;"	d	file:
MDL_METRIC	boa.h	9;"	d
MIN_XLOG	mymath.cc	6;"	d	file:
MNBGLIMIT	includeFiles.h	8;"	d
MNBGOLD	includeFiles.h	7;"	d
MNBSHIFT	includeFiles.h	10;"	d
MNBTINY	includeFiles.h	9;"	d
M_PI	fitness.cc	12;"	d	file:
Malloc	memalloc.h	/^inline void *Malloc(int x)$/;"	f	signature:(int x)
MergeOperator	decisionGraphBoa.h	/^struct MergeOperator {$/;"	s
MergeOperator::a	decisionGraphBoa.h	/^  LabeledTreeNode *a;$/;"	m	struct:MergeOperator	access:public
MergeOperator::b	decisionGraphBoa.h	/^  LabeledTreeNode *b;$/;"	m	struct:MergeOperator	access:public
MergeOperator::gain	decisionGraphBoa.h	/^  float gain;$/;"	m	struct:MergeOperator	access:public
MetricDescription	boa.h	/^} MetricDescription;$/;"	t	typeref:struct:__anon9
N	graph.h	/^  int  N;              \/\/ the number of vertices$/;"	m	class:OrientedGraph	access:private
N	hBOAmain.cc	/^long N;                    \/\/ size of the population$/;"	v
N	population.h	/^  long N;$/;"	m	struct:__anon8	access:public
N2	graph.h	/^  long N2;             \/\/ N square$/;"	m	class:OrientedGraph	access:private
NDIV	ran2.cc	12;"	d	file:
NDIV	ran2.cc	61;"	d	file:
NK_coeff	fitness.cc	/^double *NK_coeff;$/;"	v
NK_k	fitness.cc	/^int NK_k;$/;"	v
NK_k1	fitness.cc	/^int NK_k1;$/;"	v
NK_n	fitness.cc	/^int NK_n=-1;$/;"	v
NK_neighbors	fitness.cc	/^int **NK_neighbors;$/;"	v
NO	decisionGraphBoa.cc	23;"	d	file:
NODE	frequencyTree.cc	7;"	d	file:
NOPRIORNETWORK	priors.cc	5;"	d	file:
NOT_CONNECTED	graph.h	7;"	d
NTAB	ran2.cc	11;"	d	file:
NTAB	ran2.cc	60;"	d	file:
NUM_SAMPLES	population.cc	8;"	d	file:
NodeListItem	decisionGraph.h	/^struct NodeListItem {$/;"	s
NodeListItem::next	decisionGraph.h	/^  NodeListItem *next;$/;"	m	struct:NodeListItem	access:public
NodeListItem::previous	decisionGraph.h	/^  NodeListItem *previous;$/;"	m	struct:NodeListItem	access:public
NodeListItem::x	decisionGraph.h	/^  LabeledTreeNode *x;$/;"	m	struct:NodeListItem	access:public
OBJS	Makefile	/^OBJS  = args.o		\\$/;"	m
OPERATOR_MERGE_NODE	decisionGraphBoa.cc	27;"	d	file:
OPERATOR_NONE	decisionGraphBoa.cc	25;"	d	file:
OPERATOR_SPLIT_NODE	decisionGraphBoa.cc	26;"	d	file:
Operator	decisionGraphBoa.h	/^struct Operator {$/;"	s
Operator::gain	decisionGraphBoa.h	/^  float gain;$/;"	m	struct:Operator	access:public
Operator::label	decisionGraphBoa.h	/^  int   label;$/;"	m	struct:Operator	access:public
Operator::node	decisionGraphBoa.h	/^  LabeledTreeNode *node;$/;"	m	struct:Operator	access:public
Operator::node2	decisionGraphBoa.h	/^  LabeledTreeNode *node2;$/;"	m	struct:Operator	access:public
Operator::t	decisionGraphBoa.h	/^  FrequencyDecisionGraph *t;$/;"	m	struct:Operator	access:public
Operator::type	decisionGraphBoa.h	/^  int   type;$/;"	m	struct:Operator	access:public
Operator::where	decisionGraphBoa.h	/^  int   where;$/;"	m	struct:Operator	access:public
OperatorApplicability	hBoa.h	/^} OperatorApplicability;$/;"	t	typeref:struct:__anon6
OperatorGain	hBoa.h	/^} OperatorGain;$/;"	t	typeref:struct:__anon7
OrientedGraph	graph.cc	/^OrientedGraph::OrientedGraph(int n)$/;"	f	class:OrientedGraph	signature:(int n)
OrientedGraph	graph.h	/^  OrientedGraph(int n);$/;"	p	class:OrientedGraph	access:public	signature:(int n)
OrientedGraph	graph.h	/^class OrientedGraph {$/;"	c
OrientedGraph::N	graph.h	/^  int  N;              \/\/ the number of vertices$/;"	m	class:OrientedGraph	access:private
OrientedGraph::N2	graph.h	/^  long N2;             \/\/ N square$/;"	m	class:OrientedGraph	access:private
OrientedGraph::OrientedGraph	graph.cc	/^OrientedGraph::OrientedGraph(int n)$/;"	f	class:OrientedGraph	signature:(int n)
OrientedGraph::OrientedGraph	graph.h	/^  OrientedGraph(int n);$/;"	p	class:OrientedGraph	access:public	signature:(int n)
OrientedGraph::addEdge	graph.cc	/^int OrientedGraph::addEdge(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
OrientedGraph::addEdge	graph.h	/^  int addEdge(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
OrientedGraph::canAddEdge	graph.h	/^  int canAddEdge(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
OrientedGraph::canReverseEdge	graph.cc	/^int OrientedGraph::canReverseEdge(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
OrientedGraph::canReverseEdge	graph.h	/^  int canReverseEdge(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
OrientedGraph::coincidence	graph.h	/^  char **coincidence;  \/\/ the coincidence matrix$/;"	m	class:OrientedGraph	access:private
OrientedGraph::connected	graph.cc	/^int OrientedGraph::connected(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
OrientedGraph::connected	graph.h	/^  int connected(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
OrientedGraph::existsPath	graph.cc	/^int OrientedGraph::existsPath(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
OrientedGraph::existsPath	graph.h	/^  int existsPath(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
OrientedGraph::getMark	graph.cc	/^int OrientedGraph::getMark(int i)$/;"	f	class:OrientedGraph	signature:(int i)
OrientedGraph::getMark	graph.h	/^  int getMark(int i);$/;"	p	class:OrientedGraph	access:public	signature:(int i)
OrientedGraph::getNumIn	graph.cc	/^int OrientedGraph::getNumIn(int i)$/;"	f	class:OrientedGraph	signature:(int i)
OrientedGraph::getNumIn	graph.h	/^  int getNumIn(int i);$/;"	p	class:OrientedGraph	access:public	signature:(int i)
OrientedGraph::getNumOut	graph.cc	/^int OrientedGraph::getNumOut(int i)$/;"	f	class:OrientedGraph	signature:(int i)
OrientedGraph::getNumOut	graph.h	/^  int getNumOut(int i);$/;"	p	class:OrientedGraph	access:public	signature:(int i)
OrientedGraph::getNumberOfVertices	graph.cc	/^int OrientedGraph::getNumberOfVertices()$/;"	f	class:OrientedGraph	signature:()
OrientedGraph::getNumberOfVertices	graph.h	/^  int getNumberOfVertices();$/;"	p	class:OrientedGraph	access:public	signature:()
OrientedGraph::getParentList	graph.cc	/^int *OrientedGraph::getParentList(int i)$/;"	f	class:OrientedGraph	signature:(int i)
OrientedGraph::getParentList	graph.h	/^  int *getParentList(int i);$/;"	p	class:OrientedGraph	access:public	signature:(int i)
OrientedGraph::mark	graph.h	/^  int  *mark;          \/\/ the array for vertex-marks$/;"	m	class:OrientedGraph	access:private
OrientedGraph::notConnected	graph.cc	/^int OrientedGraph::notConnected(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
OrientedGraph::notConnected	graph.h	/^  int notConnected(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
OrientedGraph::numIn	graph.h	/^  int  *numIn;         \/\/ the number of incoming vertices$/;"	m	class:OrientedGraph	access:private
OrientedGraph::numOut	graph.h	/^  int  *numOut;        \/\/ the number of outcoming vertices$/;"	m	class:OrientedGraph	access:private
OrientedGraph::parentList	graph.h	/^  int  **parentList;    \/\/ the list of parents for each node$/;"	m	class:OrientedGraph	access:private
OrientedGraph::path	graph.h	/^  char **path;         \/\/ the matrix for maintanance of paths$/;"	m	class:OrientedGraph	access:private
OrientedGraph::printCoincidenceMatrix	graph.cc	/^int  OrientedGraph::printCoincidenceMatrix(FILE *out)$/;"	f	class:OrientedGraph	signature:(FILE *out)
OrientedGraph::printCoincidenceMatrix	graph.h	/^  int printCoincidenceMatrix(FILE *out);$/;"	p	class:OrientedGraph	access:public	signature:(FILE *out)
OrientedGraph::printNumInArray	graph.cc	/^int  OrientedGraph::printNumInArray(FILE *out)$/;"	f	class:OrientedGraph	signature:(FILE *out)
OrientedGraph::printNumInArray	graph.h	/^  int printNumInArray(FILE *out);$/;"	p	class:OrientedGraph	access:public	signature:(FILE *out)
OrientedGraph::printNumOutArray	graph.cc	/^int  OrientedGraph::printNumOutArray(FILE *out)$/;"	f	class:OrientedGraph	signature:(FILE *out)
OrientedGraph::printNumOutArray	graph.h	/^  int printNumOutArray(FILE *out);$/;"	p	class:OrientedGraph	access:public	signature:(FILE *out)
OrientedGraph::printPathMatrix	graph.cc	/^int  OrientedGraph::printPathMatrix(FILE *out)$/;"	f	class:OrientedGraph	signature:(FILE *out)
OrientedGraph::printPathMatrix	graph.h	/^  int printPathMatrix(FILE *out);$/;"	p	class:OrientedGraph	access:public	signature:(FILE *out)
OrientedGraph::removeAllEdges	graph.cc	/^int OrientedGraph::removeAllEdges()$/;"	f	class:OrientedGraph	signature:()
OrientedGraph::removeAllEdges	graph.h	/^  int removeAllEdges();$/;"	p	class:OrientedGraph	access:public	signature:()
OrientedGraph::removeAllMarks	graph.cc	/^int OrientedGraph::removeAllMarks()$/;"	f	class:OrientedGraph	signature:()
OrientedGraph::removeAllMarks	graph.h	/^  int removeAllMarks();$/;"	p	class:OrientedGraph	access:public	signature:()
OrientedGraph::removeEdge	graph.cc	/^int OrientedGraph::removeEdge(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
OrientedGraph::removeEdge	graph.h	/^  int removeEdge(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
OrientedGraph::removeMark	graph.cc	/^int OrientedGraph::removeMark(int i)$/;"	f	class:OrientedGraph	signature:(int i)
OrientedGraph::removeMark	graph.h	/^  int removeMark(int i);$/;"	p	class:OrientedGraph	access:public	signature:(int i)
OrientedGraph::reverseEdge	graph.cc	/^int OrientedGraph::reverseEdge(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
OrientedGraph::reverseEdge	graph.h	/^  int reverseEdge(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
OrientedGraph::setAllMarks	graph.cc	/^int OrientedGraph::setAllMarks(int val)$/;"	f	class:OrientedGraph	signature:(int val)
OrientedGraph::setAllMarks	graph.h	/^  int setAllMarks(int val);$/;"	p	class:OrientedGraph	access:public	signature:(int val)
OrientedGraph::setMark	graph.cc	/^int OrientedGraph::setMark(int i, int val)$/;"	f	class:OrientedGraph	signature:(int i, int val)
OrientedGraph::setMark	graph.h	/^  int setMark(int i, int val);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int val)
OrientedGraph::size	graph.cc	/^int OrientedGraph::size()$/;"	f	class:OrientedGraph	signature:()
OrientedGraph::size	graph.h	/^  int size();$/;"	p	class:OrientedGraph	access:public	signature:()
OrientedGraph::~OrientedGraph	graph.cc	/^OrientedGraph::~OrientedGraph()$/;"	f	class:OrientedGraph	signature:()
OrientedGraph::~OrientedGraph	graph.h	/^  ~OrientedGraph();$/;"	p	class:OrientedGraph	access:public	signature:()
OutputFitness	statistics.h	/^    char OutputFitness;$/;"	m	struct:__anon10	access:public
OutputUMF	statistics.h	/^    char OutputUMF;$/;"	m	struct:__anon10	access:public
PARAM_CHAR	getFileArgs.h	4;"	d
PARAM_COUPLEARRAY	getFileArgs.h	9;"	d
PARAM_DIVIDER	getFileArgs.h	10;"	d
PARAM_DOUBLE	getFileArgs.h	7;"	d
PARAM_END	getFileArgs.h	11;"	d
PARAM_INT	getFileArgs.h	5;"	d
PARAM_LONG	getFileArgs.h	6;"	d
PARAM_STRING	getFileArgs.h	8;"	d
ParamStruct	getFileArgs.h	/^} ParamStruct;$/;"	t	typeref:struct:__anon4
Population	population.h	/^} Population;$/;"	t	typeref:struct:__anon8
PriorNetworkConstructor	priors.h	/^typedef int PriorNetworkConstructor(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N); $/;"	t
PriorNetworkSourceDescription	priors.h	/^} PriorNetworkSourceDescription;$/;"	t	typeref:struct:__anon1
RANLIB	Makefile	/^RANLIB		= ranlib$/;"	m
RATIO	fitness.cc	23;"	d	file:
REDUCTION_STRATEGY_2	graph.h	13;"	d
RNMX	ran2.cc	14;"	d	file:
RNMX	ran2.cc	63;"	d	file:
Recombination	recombination.h	/^} Recombination;$/;"	t	typeref:struct:__anon3
RecombinationFunction	recombination.h	/^typedef int RecombinationFunction (Population *parents, Population *children, long M, RecombinationParams *recombinationParams);$/;"	t
RecombinationParams	recombination.h	/^} RecombinationParams;$/;"	t	typeref:struct:__anon2
Reordering	reordering.h	/^} Reordering;$/;"	t	typeref:struct:__anon12
Replacement	replace.h	/^typedef int Replacement(Population *population, Population *offspring);$/;"	t
RunLog	statistics.h	/^typedef RunLogItem *RunLog;$/;"	t
RunLogItem	statistics.h	/^} RunLogItem;$/;"	t	typeref:struct:__anon11
SHIFT_STEP	decisionGraph.cc	7;"	d	file:
SI_A	includeFiles.h	22;"	d
SI_B	includeFiles.h	23;"	d
SI_Rcutoff	includeFiles.h	16;"	d
SI_c0	includeFiles.h	24;"	d
SI_c1	includeFiles.h	25;"	d
SI_gamma	includeFiles.h	21;"	d
SI_p	includeFiles.h	17;"	d
SI_q	includeFiles.h	18;"	d
SPLIT	decisionGraph.h	9;"	d
SPLIT	frequencyTree.cc	6;"	d	file:
STEPS	statistics.cc	20;"	d	file:
STORE_HISTOGRAM	discretization.cc	11;"	d	file:
SUCCESS	graph.h	9;"	d
SW_SI_lambda	includeFiles.h	19;"	d
Selection	select.h	/^typedef int Selection(Population *population, Population *parents, long M);$/;"	t
StatisticsParams	statistics.h	/^} StatisticsParams;$/;"	t	typeref:struct:__anon10
StillWeberPotnl	includeFiles.h	/^double StillWeberPotnl(int, double*, double*, double*, double*);$/;"	p	signature:(int, double*, double*, double*, double*)
TreeNode	frequencyTree.h	/^struct TreeNode {$/;"	s
TreeNode::left	frequencyTree.h	/^  TreeNode *left;$/;"	m	struct:TreeNode	access:public
TreeNode::right	frequencyTree.h	/^  TreeNode *right;$/;"	m	struct:TreeNode	access:public
TreeNode::value	frequencyTree.h	/^  double    value;$/;"	m	struct:TreeNode	access:public
TreeNode::which	frequencyTree.h	/^  int       which;$/;"	m	struct:TreeNode	access:public
TreeSplit	frequencyTree.h	/^struct TreeSplit:TreeNode {$/;"	s	inherits:TreeNode
TreeSplit::numSubtrees	frequencyTree.h	/^  int             numSubtrees;$/;"	m	struct:TreeSplit	access:public
TreeSplit::subtree	frequencyTree.h	/^  FrequencyTree **subtree;$/;"	m	struct:TreeSplit	access:public
TreeSplit::which	frequencyTree.h	/^  int             which;$/;"	m	struct:TreeSplit	access:public
UMFCloserThanEpsilon	population.cc	/^int UMFCloserThanEpsilon(double *p0, double *p1, int n, double epsilon)$/;"	f	signature:(double *p0, double *p1, int n, double epsilon)
UMFCloserThanEpsilon	population.h	/^int UMFCloserThanEpsilon(double *p0, double *p1, int n, double epsilon);$/;"	p	signature:(double *p0, double *p1, int n, double epsilon)
Value	labeledTreeNode.h	/^typedef double Value;$/;"	t
WhichOptimum	fitness.h	/^typedef long   WhichOptimum(char *x, int numDiscrete, double *c, int numContinuous);$/;"	t
YES	decisionGraphBoa.cc	22;"	d	file:
_A	random.h	5;"	d
_M	random.h	4;"	d
_Q	random.cc	/^long _Q = _M\/_A;     \/\/ M \/ A $/;"	v
_R	random.cc	/^long _R = _M%_A;     \/\/ M mod A$/;"	v
__anon10::OutputFitness	statistics.h	/^    char OutputFitness;$/;"	m	struct:__anon10	access:public
__anon10::OutputUMF	statistics.h	/^    char OutputUMF;$/;"	m	struct:__anon10	access:public
__anon10::displayFitness	statistics.h	/^    char displayFitness;$/;"	m	struct:__anon10	access:public
__anon10::displayGuidance	statistics.h	/^    char displayGuidance;$/;"	m	struct:__anon10	access:public
__anon10::displayNumOptimal	statistics.h	/^    char displayNumOptimal;$/;"	m	struct:__anon10	access:public
__anon10::displayOrdering	statistics.h	/^    char displayOrdering;$/;"	m	struct:__anon10	access:public
__anon10::displayUMF	statistics.h	/^    char displayUMF;$/;"	m	struct:__anon10	access:public
__anon10::guidanceTreshold	statistics.h	/^    double guidanceTreshold;$/;"	m	struct:__anon10	access:public
__anon10::outputFitness	statistics.h	/^    FILE *outputFitness;$/;"	m	struct:__anon10	access:public
__anon10::outputUMF	statistics.h	/^    FILE *outputUMF;$/;"	m	struct:__anon10	access:public
__anon10::pause	statistics.h	/^    char pause;$/;"	m	struct:__anon10	access:public
__anon11::avgFitness	statistics.h	/^    double     avgFitness;$/;"	m	struct:__anon11	access:public
__anon11::best	statistics.h	/^    Individual best;$/;"	m	struct:__anon11	access:public
__anon11::bestDefined	statistics.h	/^    char       bestDefined;$/;"	m	struct:__anon11	access:public
__anon11::bestFound	statistics.h	/^    char       bestFound;$/;"	m	struct:__anon11	access:public
__anon11::bestFoundIn	statistics.h	/^    long       bestFoundIn; $/;"	m	struct:__anon11	access:public
__anon11::converged	statistics.h	/^    char       converged;$/;"	m	struct:__anon11	access:public
__anon11::convergedToTheBest	statistics.h	/^    char       convergedToTheBest;$/;"	m	struct:__anon11	access:public
__anon11::failed	statistics.h	/^    char       failed;$/;"	m	struct:__anon11	access:public
__anon11::generationsToConvergence	statistics.h	/^    long       generationsToConvergence;$/;"	m	struct:__anon11	access:public
__anon11::goodBBs	statistics.h	/^    float      goodBBs;$/;"	m	struct:__anon11	access:public
__anon11::maxOptimalReached	statistics.h	/^    char       maxOptimalReached;$/;"	m	struct:__anon11	access:public
__anon11::maxOptimalReachedIn	statistics.h	/^    long       maxOptimalReachedIn;$/;"	m	struct:__anon11	access:public
__anon11::numContinuous	statistics.h	/^    int        numContinuous;$/;"	m	struct:__anon11	access:public
__anon11::numDiscrete	statistics.h	/^    int        numDiscrete;$/;"	m	struct:__anon11	access:public
__anon11::ordering	statistics.h	/^    double     ordering;$/;"	m	struct:__anon11	access:public
__anon11::timeToConvergence	statistics.h	/^    long       timeToConvergence;$/;"	m	struct:__anon11	access:public
__anon11::worst	statistics.h	/^    Individual worst;$/;"	m	struct:__anon11	access:public
__anon12::description	reordering.h	/^  char            *description;$/;"	m	struct:__anon12	access:public
__anon12::init	reordering.h	/^  InitReorder     *init;$/;"	m	struct:__anon12	access:public
__anon13::description	fitness.h	/^  char              *description;$/;"	m	struct:__anon13	access:public
__anon13::doneFitness	fitness.h	/^  DoneFitness       *doneFitness;$/;"	m	struct:__anon13	access:public
__anon13::fitness	fitness.h	/^  FitnessFunction   *fitness;$/;"	m	struct:__anon13	access:public
__anon13::getNumberOfOptima	fitness.h	/^  GetNumberOfOptima *getNumberOfOptima;$/;"	m	struct:__anon13	access:public
__anon13::goodBBs	fitness.h	/^  GoodBBs           *goodBBs;$/;"	m	struct:__anon13	access:public
__anon13::init	fitness.h	/^  InitFitness       *init;$/;"	m	struct:__anon13	access:public
__anon13::injectTheGood	fitness.h	/^  InjectGoodGuys    *injectTheGood;$/;"	m	struct:__anon13	access:public
__anon13::isBest	fitness.h	/^  IsBest            *isBest;$/;"	m	struct:__anon13	access:public
__anon13::load	fitness.h	/^  LoadParameters    *load;$/;"	m	struct:__anon13	access:public
__anon13::whichOptimum	fitness.h	/^  WhichOptimum      *whichOptimum;$/;"	m	struct:__anon13	access:public
__anon1::constructor	priors.h	/^  PriorNetworkConstructor *constructor;$/;"	m	struct:__anon1	access:public
__anon1::description	priors.h	/^  char                    *description;$/;"	m	struct:__anon1	access:public
__anon2::G	recombination.h	/^  AcyclicOrientedGraph *G;$/;"	m	struct:__anon2	access:public
__anon2::allowAdditions	recombination.h	/^  int           allowAdditions;$/;"	m	struct:__anon2	access:public
__anon2::allowJoints	recombination.h	/^  int           allowJoints;$/;"	m	struct:__anon2	access:public
__anon2::allowRemovals	recombination.h	/^  int           allowRemovals;$/;"	m	struct:__anon2	access:public
__anon2::allowReversals	recombination.h	/^  int           allowReversals;$/;"	m	struct:__anon2	access:public
__anon2::blockSize	recombination.h	/^  int           blockSize;$/;"	m	struct:__anon2	access:public
__anon2::crossoverMethod	recombination.h	/^  int    crossoverMethod;$/;"	m	struct:__anon2	access:public
__anon2::crossoverRate	recombination.h	/^  double crossoverRate;$/;"	m	struct:__anon2	access:public
__anon2::dBOAMetricN	recombination.h	/^  int           dBOAMetricN;$/;"	m	struct:__anon2	access:public
__anon2::dependencyTreshold	recombination.h	/^  double dependencyTreshold;$/;"	m	struct:__anon2	access:public
__anon2::displayDependencies	recombination.h	/^  char   displayDependencies;$/;"	m	struct:__anon2	access:public
__anon2::fitnessProportionalClusterReproduction	recombination.h	/^  char   fitnessProportionalClusterReproduction;$/;"	m	struct:__anon2	access:public
__anon2::injectGoodGuys	recombination.h	/^  char          injectGoodGuys;$/;"	m	struct:__anon2	access:public
__anon2::logBeta	recombination.h	/^  double        logBeta;$/;"	m	struct:__anon2	access:public
__anon2::logKappa	recombination.h	/^  double        logKappa;$/;"	m	struct:__anon2	access:public
__anon2::maxGroupSize	recombination.h	/^  int           maxGroupSize;$/;"	m	struct:__anon2	access:public
__anon2::maxIncoming	recombination.h	/^  int    maxIncoming;$/;"	m	struct:__anon2	access:public
__anon2::mutationRate	recombination.h	/^  double mutationRate;$/;"	m	struct:__anon2	access:public
__anon2::numClusters	recombination.h	/^  int    numClusters;$/;"	m	struct:__anon2	access:public
__anon2::numRestarts	recombination.h	/^  int    numRestarts;$/;"	m	struct:__anon2	access:public
__anon2::phenotypicClustering	recombination.h	/^  char   phenotypicClustering;$/;"	m	struct:__anon2	access:public
__anon2::priorNetwork	recombination.h	/^  char          priorNetwork;$/;"	m	struct:__anon2	access:public
__anon2::recombinationBoltzmannBeta	recombination.h	/^  double        recombinationBoltzmannBeta;$/;"	m	struct:__anon2	access:public
__anon2::useBoltzmannFrequencies	recombination.h	/^  char          useBoltzmannFrequencies;$/;"	m	struct:__anon2	access:public
__anon2::useDefaultTables	recombination.h	/^  int           useDefaultTables;$/;"	m	struct:__anon2	access:public
__anon3::description	recombination.h	/^  char                  *description;$/;"	m	struct:__anon3	access:public
__anon3::recombination	recombination.h	/^  RecombinationFunction *recombination;$/;"	m	struct:__anon3	access:public
__anon4::defValue	getFileArgs.h	/^  char *defValue;$/;"	m	struct:__anon4	access:public
__anon4::description	getFileArgs.h	/^  char *description;$/;"	m	struct:__anon4	access:public
__anon4::getValueDescription	getFileArgs.h	/^  GetValueDescription *getValueDescription;$/;"	m	struct:__anon4	access:public
__anon4::identifier	getFileArgs.h	/^  char *identifier;$/;"	m	struct:__anon4	access:public
__anon4::type	getFileArgs.h	/^  char type;$/;"	m	struct:__anon4	access:public
__anon4::where	getFileArgs.h	/^  void *where;$/;"	m	struct:__anon4	access:public
__anon5::contribution	hBoa.h	/^  double *contribution;$/;"	m	struct:__anon5	access:public
__anon5::frequencies	hBoa.h	/^  double         **frequencies;$/;"	m	struct:__anon5	access:public
__anon5::frequencyTree	hBoa.h	/^  FrequencyTree  **frequencyTree;$/;"	m	struct:__anon5	access:public
__anon5::full	hBoa.h	/^  char            *full;$/;"	m	struct:__anon5	access:public
__anon5::groupIndex	hBoa.h	/^  int            **groupIndex;$/;"	m	struct:__anon5	access:public
__anon5::groupSize	hBoa.h	/^  int             *groupSize;$/;"	m	struct:__anon5	access:public
__anon5::index	hBoa.h	/^  int            **index;$/;"	m	struct:__anon5	access:public
__anon5::indexSize	hBoa.h	/^  int             *indexSize;$/;"	m	struct:__anon5	access:public
__anon5::instances	hBoa.h	/^  char          ***instances;$/;"	m	struct:__anon5	access:public
__anon5::maxGroupSize	hBoa.h	/^  int              maxGroupSize;$/;"	m	struct:__anon5	access:public
__anon5::numGroups	hBoa.h	/^  int              numGroups;$/;"	m	struct:__anon5	access:public
__anon5::numInstances	hBoa.h	/^  int             *numInstances;$/;"	m	struct:__anon5	access:public
__anon5::parentIndexSize	hBoa.h	/^  int             *parentIndexSize;$/;"	m	struct:__anon5	access:public
__anon6::addition	hBoa.h	/^  char **addition;$/;"	m	struct:__anon6	access:public
__anon6::joint	hBoa.h	/^  char **joint;$/;"	m	struct:__anon6	access:public
__anon6::removal	hBoa.h	/^  char **removal;$/;"	m	struct:__anon6	access:public
__anon6::reversal	hBoa.h	/^  char **reversal;$/;"	m	struct:__anon6	access:public
__anon7::addition	hBoa.h	/^  double **addition;$/;"	m	struct:__anon7	access:public
__anon7::joint	hBoa.h	/^  double **joint;$/;"	m	struct:__anon7	access:public
__anon7::removal	hBoa.h	/^  double **removal;$/;"	m	struct:__anon7	access:public
__anon7::reversal	hBoa.h	/^  double **reversal;$/;"	m	struct:__anon7	access:public
__anon8::N	population.h	/^  long N;$/;"	m	struct:__anon8	access:public
__anon8::avgFitness	population.h	/^  double avgFitness;$/;"	m	struct:__anon8	access:public
__anon8::best	population.h	/^  long   best;$/;"	m	struct:__anon8	access:public
__anon8::buffer	population.h	/^  char *buffer;$/;"	m	struct:__anon8	access:public
__anon8::clusterSize	population.h	/^  long *clusterSize;$/;"	m	struct:__anon8	access:public
__anon8::evaluated	population.h	/^  char evaluated;$/;"	m	struct:__anon8	access:public
__anon8::individual	population.h	/^  Individual *individual;$/;"	m	struct:__anon8	access:public
__anon8::n	population.h	/^  int  n;$/;"	m	struct:__anon8	access:public
__anon8::numContinuous	population.h	/^  int  numContinuous;$/;"	m	struct:__anon8	access:public
__anon8::numDiscrete	population.h	/^  int  numDiscrete;$/;"	m	struct:__anon8	access:public
__anon8::numOptimal	population.h	/^  long numOptimal;$/;"	m	struct:__anon8	access:public
__anon8::worst	population.h	/^  long   worst;$/;"	m	struct:__anon8	access:public
__anon9::boaComputeAdditionGains	boa.h	/^  BoaComputeAdditionGains            *boaComputeAdditionGains;$/;"	m	struct:__anon9	access:public
__anon9::boaComputeIsolatedNodeContribution	boa.h	/^  BoaComputeIsolatedNodeContribution *boaComputeIsolatedNodeContribution;$/;"	m	struct:__anon9	access:public
__anon9::boaComputeRemovalGains	boa.h	/^  BoaComputeRemovalGains             *boaComputeRemovalGains;$/;"	m	struct:__anon9	access:public
__anon9::boaComputeReversalGains	boa.h	/^  BoaComputeReversalGains            *boaComputeReversalGains;$/;"	m	struct:__anon9	access:public
__anon9::description	boa.h	/^  char                            *description;$/;"	m	struct:__anon9	access:public
_args_h_	args.h	2;"	d
_arrays_h_	arrays.h	2;"	d
_bic_h_	bic.h	2;"	d
_binary_h_	binary.h	2;"	d
_boa_h_	boa.h	2;"	d
_copy_h_	copy.h	2;"	d
_decisionGraphBoa_h_	decisionGraphBoa.h	2;"	d
_decisionGraph_h_	decisionGraph.h	2;"	d
_distance_h_	distance.h	2;"	d
_fitness_h_	fitness.h	2;"	d
_frequencyDecisionGraph_h_	frequencyDecisionGraph.h	2;"	d
_frequencyTree_h_	frequencyTree.h	2;"	d
_getFileArgs_h_	getFileArgs.h	2;"	d
_graph_h_	graph.h	2;"	d
_hBoa_h_	hBoa.h	2;"	d
_individual_h_	individual.h	2;"	d
_labeledTreeNode_h_	labeledTreeNode.h	2;"	d
_mdl_h_	mdl.h	2;"	d
_memalloc_h_	memalloc.h	2;"	d
_mymath_h_	mymath.h	2;"	d
_population_h_	population.h	2;"	d
_priors_h_	priors.h	2;"	d
_random_h_	random.h	2;"	d
_recombination_h_	recombination.h	2;"	d
_reordering_h_	reordering.h	2;"	d
_replace_h_	replace.h	2;"	d
_seed	random.cc	/^long _seed;          \/\/ a number between 1 and m-1$/;"	v
_select_h_	select.h	2;"	d
_stack_h_	stack.h	2;"	d
_statistics_h_	statistics.h	2;"	d
_userBOA_h_	userBOA.h	2;"	d
_utils_h_	utils.h	2;"	d
a	decisionGraphBoa.h	/^  LabeledTreeNode *a;$/;"	m	struct:MergeOperator	access:public
a	fitness.cc	/^double a,b;$/;"	v
add	arrays.cc	/^int CoupleArray::add(int a, int b)$/;"	f	class:CoupleArray	signature:(int a, int b)
add	arrays.h	/^    int add(int a, int b);$/;"	p	class:CoupleArray	access:public	signature:(int a, int b)
addEdge	graph.cc	/^int AcyclicOrientedGraph::addEdge(int i, int j)$/;"	f	class:AcyclicOrientedGraph	signature:(int i, int j)
addEdge	graph.cc	/^int LoudAcyclicOrientedGraph::addEdge(int i, int j)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int i, int j)
addEdge	graph.cc	/^int OrientedGraph::addEdge(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
addEdge	graph.h	/^  int addEdge(int i, int j);$/;"	p	class:AcyclicOrientedGraph	access:public	signature:(int i, int j)
addEdge	graph.h	/^  int addEdge(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
addEdge	graph.h	/^  int addEdge(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
addIndexedInstance	frequencyTree.cc	/^TreeNode *FrequencyTree::addIndexedInstance(char *x, int *index)$/;"	f	class:FrequencyTree	signature:(char *x, int *index)
addIndexedInstance	frequencyTree.h	/^  TreeNode *addIndexedInstance(char *x, int *index);$/;"	p	class:FrequencyTree	access:private	signature:(char *x, int *index)
addIndexedInstanceWithSplit	frequencyTree.cc	/^TreeNode *FrequencyTree::addIndexedInstanceWithSplit(char *x, int *index, int **list, int *listLength)$/;"	f	class:FrequencyTree	signature:(char *x, int *index, int **list, int *listLength)
addIndexedInstanceWithSplit	frequencyTree.h	/^  TreeNode *addIndexedInstanceWithSplit(char *x, int *index, int **list, int *listLength);$/;"	p	class:FrequencyTree	access:private	signature:(char *x, int *index, int **list, int *listLength)
addInstance	frequencyTree.cc	/^TreeNode *FrequencyTree::addInstance(char *x)$/;"	f	class:FrequencyTree	signature:(char *x)
addInstance	frequencyTree.h	/^  TreeNode *addInstance(char *x);$/;"	p	class:FrequencyTree	access:private	signature:(char *x)
addTree	frequencyTree.cc	/^int FrequencyTree::addTree(TreeNode **destination, TreeNode *source)$/;"	f	class:FrequencyTree	signature:(TreeNode **destination, TreeNode *source)
addTree	frequencyTree.h	/^  int       addTree(TreeNode **destination, TreeNode *source);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode **destination, TreeNode *source)
addUnorientedEdge	graph.cc	/^int BoundedIncommingEdgesAcyclicOrientedGraph::addUnorientedEdge(int i, int j)$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:(int i, int j)
addUnorientedEdge	graph.cc	/^int LeastIncommingEdgesAcyclicOrientedGraph::addUnorientedEdge(int i, int j)$/;"	f	class:LeastIncommingEdgesAcyclicOrientedGraph	signature:(int i, int j)
addUnorientedEdge	graph.h	/^  int addUnorientedEdge(int i, int j);$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:public	signature:(int i, int j)
addUnorientedEdge	graph.h	/^  int addUnorientedEdge(int i, int j);$/;"	p	class:LeastIncommingEdgesAcyclicOrientedGraph	access:public	signature:(int i, int j)
addition	hBoa.h	/^  char **addition;$/;"	m	struct:__anon6	access:public
addition	hBoa.h	/^  double **addition;$/;"	m	struct:__anon7	access:public
additionalFitnessNoise	fitness.cc	/^double additionalFitnessNoise()$/;"	f	signature:()
additionalFitnessNoise	fitness.h	/^double additionalFitnessNoise();$/;"	p	signature:()
additionalFitnessNoiseDeviation	fitness.cc	/^double  additionalFitnessNoiseDeviation;$/;"	v
additionalFitnessNoiseVariance	fitness.cc	/^double  additionalFitnessNoiseVariance;$/;"	v
allocateBMF	population.cc	/^int allocateBMF(double ***p00, double ***p01, double ***p10, double ***p11, int n)$/;"	f	signature:(double ***p00, double ***p01, double ***p10, double ***p11, int n)
allocateBMF	population.h	/^int allocateBMF(double ***p00, double ***p01, double ***p10, double ***p11, int n);$/;"	p	signature:(double ***p00, double ***p01, double ***p10, double ***p11, int n)
allocateBounds	discretization.cc	/^void Discretization::allocateBounds()$/;"	f	class:Discretization	signature:()
allocateBounds	discretization.h	/^  void allocateBounds();$/;"	p	class:Discretization	access:public	signature:()
allocateIndividual	individual.cc	/^int allocateIndividual(Individual *individual, int numDiscrete, int numContinuous)$/;"	f	signature:(Individual *individual, int numDiscrete, int numContinuous)
allocateIndividual	individual.h	/^int allocateIndividual(Individual *individual, int numDiscrete, int numContinuous);$/;"	p	signature:(Individual *individual, int numDiscrete, int numContinuous)
allocateInstanceIndexEntries	labeledTreeNode.cc	/^int LabeledTreeNode::allocateInstanceIndexEntries(int n)$/;"	f	class:LabeledTreeNode	signature:(int n)
allocateInstanceIndexEntries	labeledTreeNode.h	/^  int allocateInstanceIndexEntries(int n);$/;"	p	class:LabeledTreeNode	access:public	signature:(int n)
allocateNewNode	frequencyTree.cc	9;"	d	file:
allocateNewSplit	frequencyTree.cc	10;"	d	file:
allocatePopulation	population.cc	/^int allocatePopulation(Population *population, long N, int numDiscrete, int numContinuous)$/;"	f	signature:(Population *population, long N, int numDiscrete, int numContinuous)
allocatePopulation	population.h	/^int allocatePopulation(Population *population, long N, int numDiscrete, int numContinuous);$/;"	p	signature:(Population *population, long N, int numDiscrete, int numContinuous)
allocatePriorNetwork	priors.cc	/^int allocatePriorNetwork(OrientedGraph ***priorNetwork, int n, int d)$/;"	f	signature:(OrientedGraph ***priorNetwork, int n, int d)
allocatePriorNetwork	priors.h	/^int allocatePriorNetwork(OrientedGraph ***priorNetwork, int n, int d);$/;"	p	signature:(OrientedGraph ***priorNetwork, int n, int d)
allocateUMF	population.cc	/^int allocateUMF(double **p0, double **p1, int n)$/;"	f	signature:(double **p0, double **p1, int n)
allocateUMF	population.h	/^int allocateUMF(double **p0, double **p1, int n);$/;"	p	signature:(double **p0, double **p1, int n)
allowAdditions	recombination.h	/^  int           allowAdditions;$/;"	m	struct:__anon2	access:public
allowJoints	recombination.h	/^  int           allowJoints;$/;"	m	struct:__anon2	access:public
allowRemovals	recombination.h	/^  int           allowRemovals;$/;"	m	struct:__anon2	access:public
allowReversals	recombination.h	/^  int           allowReversals;$/;"	m	struct:__anon2	access:public
applyBestReduction	graph.cc	/^int BoundedIncommingEdgesAcyclicOrientedGraph::applyBestReduction(int i)$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:(int i)
applyBestReduction	graph.h	/^  int applyBestReduction(int i);$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:private	signature:(int i)
applyOperator	decisionGraphBoa.cc	/^int applyOperator(Operator *x, AcyclicOrientedGraph *G)$/;"	f	signature:(Operator *x, AcyclicOrientedGraph *G)
applyOperator	decisionGraphBoa.h	/^int applyOperator(Operator *x, AcyclicOrientedGraph *G);$/;"	p	signature:(Operator *x, AcyclicOrientedGraph *G)
areAllGenesOne	fitness.cc	/^char areAllGenesOne(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double f)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double f)
areAllGenesOne	fitness.cc	/^static char areAllGenesOne(char *x, int numDiscrete, double *c, int numContinuous, char type, double f);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous, char type, double f)
areAllGenesZeroOrOne	fitness.cc	/^char areAllGenesZeroOrOne(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double f)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double f)
areAllGenesZeroOrOne	fitness.cc	/^static char areAllGenesZeroOrOne(char *x, int numDiscrete, double *c, int numContinuous, char type, double f);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous, char type, double f)
assignMaxAddition	hBoa.cc	38;"	d	file:
assignMaxJoint	hBoa.cc	41;"	d	file:
assignMaxRemoval	hBoa.cc	39;"	d	file:
assignMaxReversal	hBoa.cc	40;"	d	file:
avgFitness	population.h	/^  double avgFitness;$/;"	m	struct:__anon8	access:public
avgFitness	statistics.h	/^    double     avgFitness;$/;"	m	struct:__anon11	access:public
b	decisionGraphBoa.h	/^  LabeledTreeNode *b;$/;"	m	struct:MergeOperator	access:public
b	fitness.cc	/^double a,b;$/;"	v
best	population.h	/^  long   best;$/;"	m	struct:__anon8	access:public
best	statistics.h	/^    Individual best;$/;"	m	struct:__anon11	access:public
bestDefined	statistics.h	/^    char       bestDefined;$/;"	m	struct:__anon11	access:public
bestFound	statistics.h	/^    char       bestFound;$/;"	m	struct:__anon11	access:public
bestFoundIn	statistics.h	/^    long       bestFoundIn; $/;"	m	struct:__anon11	access:public
beta	select.cc	/^double beta;$/;"	v
bicComputeAdditionGains	bic.cc	/^int bicComputeAdditionGains( int i, $/;"	f	signature:( int i, double oldContribution, double **additionGain, int *updateIdx, int numUpdated, int *parentList, int numParents, Population *P, RecombinationParams *params)
bicComputeAdditionGains	bic.h	/^int bicComputeAdditionGains( int i, $/;"	p	signature:( int i, double oldContribution, double **gain, int *updateIdx, int numUpdated, int *parentList, int numParents, Population *P, RecombinationParams *params)
bicComputeIsolatedNodeContribution	bic.cc	/^double bicComputeIsolatedNodeContribution(int i, Population *P)$/;"	f	signature:(int i, Population *P)
bicComputeIsolatedNodeContribution	bic.h	/^double bicComputeIsolatedNodeContribution(int i, Population *P);$/;"	p	signature:(int i, Population *P)
bicComputeRemovalGains	bic.cc	/^int bicComputeRemovalGains( int i, $/;"	f	signature:( int i, double oldContribution, double **removalGain, int *parentList, int numParents, Population *P, RecombinationParams *params)
bicComputeRemovalGains	bic.h	/^int bicComputeRemovalGains( int i, $/;"	p	signature:( int i, double oldContribution, double **removalGain, int *parentList, int numParents, Population *P, RecombinationParams *params)
binSize	discretization.h	/^  int    binSize;$/;"	m	class:Discretization	access:private
binaryToDouble	binary.cc	/^double binaryToDouble(char *x, int n)$/;"	f	signature:(char *x, int n)
binaryToDouble	binary.h	/^double binaryToDouble(char *x, int n);$/;"	p	signature:(char *x, int n)
binaryToInt	binary.cc	/^int binaryToInt(char *x, char n)$/;"	f	signature:(char *x, char n)
binaryToInt	binary.h	/^int binaryToInt(char *x, char n);$/;"	p	signature:(char *x, char n)
bisectionInjectClusters	fitness.cc	/^int bisectionInjectClusters(void *P)$/;"	f	signature:(void *P)
bitsPerVariable	discretization.h	/^  int    bitsPerVariable;$/;"	m	class:Discretization	access:private
bitsPerVariable	discretization.h	/^  int bitsPerVariable;$/;"	m	struct:DiscretizationParams	access:public
blockSize	recombination.h	/^  int           blockSize;$/;"	m	struct:__anon2	access:public
boaComputeAdditionGains	boa.h	/^  BoaComputeAdditionGains            *boaComputeAdditionGains;$/;"	m	struct:__anon9	access:public
boaComputeIsolatedNodeContribution	boa.h	/^  BoaComputeIsolatedNodeContribution *boaComputeIsolatedNodeContribution;$/;"	m	struct:__anon9	access:public
boaComputeRemovalGains	boa.h	/^  BoaComputeRemovalGains             *boaComputeRemovalGains;$/;"	m	struct:__anon9	access:public
boaComputeReversalGains	boa.h	/^  BoaComputeReversalGains            *boaComputeReversalGains;$/;"	m	struct:__anon9	access:public
boaGetMetricDescription	boa.cc	/^char *boaGetMetricDescription(int n)$/;"	f	signature:(int n)
boaGetMetricDescription	boa.h	/^char *boaGetMetricDescription(int n);$/;"	p	signature:(int n)
boaGetPenalty	boa.cc	/^double boaGetPenalty(int from, int to)$/;"	f	signature:(int from, int to)
boaGetPenalty	boa.h	/^double boaGetPenalty(int from, int to);$/;"	p	signature:(int from, int to)
boaRecombination	boa.cc	/^int boaRecombination(Population *parents, Population *children, long M, RecombinationParams *params)$/;"	f	signature:(Population *parents, Population *children, long M, RecombinationParams *params)
boaRecombination	boa.h	/^int boaRecombination(Population *parents, $/;"	p	signature:(Population *parents, Population *children, long M, RecombinationParams *params)
boaRecomputeAdditionGains	boa.cc	/^int boaRecomputeAdditionGains(int from,$/;"	f	signature:(int from, int to, double gain, double *nodeContribution, double **gainAddition, double **gainRemoval, double **gainReversal, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
boaRecomputeAdditionGains	boa.h	/^int boaRecomputeAdditionGains(int from,$/;"	p	signature:(int from, int to, double gain, double *nodeContribution, double **gainAddition, double **gainRemoval, double **gainReversal, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
boaRecomputeNodeContribution	boa.h	/^int boaRecomputeNodeContribution(int i, double *nodeContribution, AcyclicOrientedGraph *G, Population *parents);$/;"	p	signature:(int i, double *nodeContribution, AcyclicOrientedGraph *G, Population *parents)
boaRecomputeRemovalGains	boa.cc	/^int boaRecomputeRemovalGains(int from,$/;"	f	signature:(int from, int to, double gain, double *nodeContribution, double **gainAddition, double **gainRemoval, double **gainReversal, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
boaRecomputeRemovalGains	boa.h	/^int boaRecomputeRemovalGains(int from,$/;"	p	signature:(int from, int to, double gain, double *nodeContribution, double **gainAddition, double **gainRemoval, double **gainReversal, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
boaRecomputeReversalGains	boa.cc	/^int boaRecomputeReversalGains(int from,$/;"	f	signature:(int from, int to, double gain, double *nodeContribution, double **gainAddition, double **gainRemoval, double **gainReversal, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
boaRecomputeReversalGains	boa.h	/^int boaRecomputeReversalGains(int from,$/;"	p	signature:(int from, int to, double gain, double *nodeContribution, double **gainAddition, double **gainRemoval, double **gainReversal, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
boaSetMetric	boa.cc	/^int boaSetMetric(int n)$/;"	f	signature:(int n)
boaSetMetric	boa.h	/^int boaSetMetric(int n);$/;"	p	signature:(int n)
boaUpdateAfterAddition	boa.cc	/^int boaUpdateAfterAddition(int newFrom, $/;"	f	signature:(int newFrom, int newTo, char **additionPossible, char **removalPossible, char **reversalPossible, AcyclicOrientedGraph *G, char *full, int maxIncoming)
boaUpdateAfterAddition	boa.h	/^int boaUpdateAfterAddition(int newFrom, $/;"	p	signature:(int newFrom, int newTo, char **additionPossible, char **removalPossible, char **reversalPossible, AcyclicOrientedGraph *G, char *full, int maxIncoming)
boaUpdateAfterRemoval	boa.cc	/^int boaUpdateAfterRemoval(int newFrom, $/;"	f	signature:(int newFrom, int newTo, char **additionPossible, char **removalPossible, char **reversalPossible, AcyclicOrientedGraph *G, char *full, int maxIncoming)
boaUpdateAfterRemoval	boa.h	/^int boaUpdateAfterRemoval(int newFrom, $/;"	p	signature:(int newFrom, int newTo, char **additionPossible, char **removalPossible, char **reversalPossible, AcyclicOrientedGraph *G, char *full, int maxIncoming)
boaUpdateAfterReversal	boa.cc	/^int boaUpdateAfterReversal(int newFrom, $/;"	f	signature:(int newFrom, int newTo, char **additionPossible, char **removalPossible, char **reversalPossible, AcyclicOrientedGraph *G, char *full, int maxIncoming)
boaUpdateAfterReversal	boa.h	/^int boaUpdateAfterReversal(int newFrom, $/;"	p	signature:(int newFrom, int newTo, char **additionPossible, char **removalPossible, char **reversalPossible, AcyclicOrientedGraph *G, char *full, int maxIncoming)
boaWithDecisionGraphsRecombination	decisionGraphBoa.cc	/^int boaWithDecisionGraphsRecombination(Population *parents, Population *children, long M, RecombinationParams *params)$/;"	f	signature:(Population *parents, Population *children, long M, RecombinationParams *params)
boaWithDecisionGraphsRecombination	decisionGraphBoa.h	/^int boaWithDecisionGraphsRecombination(Population *parents, Population *children, long M, RecombinationParams *params);$/;"	p	signature:(Population *parents, Population *children, long M, RecombinationParams *params)
boltzmannBeta	hBOAmain.cc	/^double boltzmannBeta;      \/\/ beta parameter for the Boltzmann selection$/;"	v
brent	includeFiles.h	/^void brent(double, double, double, double*, double*, int, int, $/;"	p	signature:(double, double, double, double*, double*, int, int, double*, double*, double*, int*)
buffer	population.h	/^  char *buffer;$/;"	m	struct:__anon8	access:public
buildDefaultTable	mdl.cc	/^double buildDefaultTable(int n, long N, double **p, double *tp, long numParentConfigurations, int numParents)$/;"	f	signature:(int n, long N, double **p, double *tp, long numParentConfigurations, int numParents)
buildDefaultTable	mdl.h	/^double buildDefaultTable(int n, long N, double **p, double *tp, long numParentConfigurations, int numParents);$/;"	p	signature:(int n, long N, double **p, double *tp, long numParentConfigurations, int numParents)
calculateBMF	population.cc	/^int calculateBMF(Population *population, double **p00, double **p01, double **p10, double **p11)$/;"	f	signature:(Population *population, double **p00, double **p01, double **p10, double **p11)
calculateBMF	population.h	/^int calculateBMF(Population *population, double **p00, double **p01, double **p10, double **p11);$/;"	p	signature:(Population *population, double **p00, double **p01, double **p10, double **p11)
calculateClusterUMF	population.cc	/^int calculateClusterUMF(Population *p, int numClusters, double **p0, double **p1)$/;"	f	signature:(Population *p, int numClusters, double **p0, double **p1)
calculateClusterUMF	population.h	/^int calculateClusterUMF(Population *p, int numClusters, double **p0, double **p1);$/;"	p	signature:(Population *p, int numClusters, double **p0, double **p1)
calculateOrdering	population.cc	/^double calculateOrdering(double *p0, double *p1, int n)$/;"	f	signature:(double *p0, double *p1, int n)
calculateOrdering	population.h	/^double calculateOrdering(double *p0, double *p1, int n);$/;"	p	signature:(double *p0, double *p1, int n)
calculateProportionateUMF	population.cc	/^int calculateProportionateUMF(Population *population, double *p0, double *p1)$/;"	f	signature:(Population *population, double *p0, double *p1)
calculateProportionateUMF	population.h	/^int calculateProportionateUMF(Population *population, double *p0, double *p1);$/;"	p	signature:(Population *population, double *p0, double *p1)
calculateUMF	population.cc	/^int calculateUMF(Population *population, double *p0, double *p1)$/;"	f	signature:(Population *population, double *p0, double *p1)
calculateUMF	population.h	/^int calculateUMF(Population *population, double *p0, double *p1);$/;"	p	signature:(Population *population, double *p0, double *p1)
canAddEdge	graph.cc	/^int AcyclicOrientedGraph::canAddEdge(int i, int j)$/;"	f	class:AcyclicOrientedGraph	signature:(int i, int j)
canAddEdge	graph.h	/^  int canAddEdge(int i, int j);$/;"	p	class:AcyclicOrientedGraph	access:public	signature:(int i, int j)
canAddEdge	graph.h	/^  int canAddEdge(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
canReverseEdge	graph.cc	/^int AcyclicOrientedGraph::canReverseEdge(int i, int j)$/;"	f	class:AcyclicOrientedGraph	signature:(int i, int j)
canReverseEdge	graph.cc	/^int OrientedGraph::canReverseEdge(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
canReverseEdge	graph.h	/^  int canReverseEdge(int i, int j);$/;"	p	class:AcyclicOrientedGraph	access:public	signature:(int i, int j)
canReverseEdge	graph.h	/^  int canReverseEdge(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
changedPopulationSize	hBOAmain.cc	/^void changedPopulationSize() {$/;"	f	signature:()
chromosome	individual.h	/^  char   *chromosome;$/;"	m	class:Individual	access:public
clear	arrays.cc	/^void CoupleArray::clear()$/;"	f	class:CoupleArray	signature:()
clear	arrays.h	/^    void clear();$/;"	p	class:CoupleArray	access:public	signature:()
closeFiles	statistics.cc	/^int closeFiles(StatisticsParams *statisticsParams)$/;"	f	signature:(StatisticsParams *statisticsParams)
closeFiles	statistics.h	/^int closeFiles(StatisticsParams *statisticsParams);$/;"	p	signature:(StatisticsParams *statisticsParams)
cluster	discretization.cc	/^void Discretization::cluster(double *centers, long *centerSize, int k, int numClusters)$/;"	f	class:Discretization	signature:(double *centers, long *centerSize, int k, int numClusters)
cluster	discretization.h	/^  void cluster(double *centers, long *centerSize, int k, int numClusters);$/;"	p	class:Discretization	access:public	signature:(double *centers, long *centerSize, int k, int numClusters)
cluster	individual.h	/^  int    cluster;$/;"	m	class:Individual	access:public
clusterSize	discretization.h	/^  long **clusterSize;$/;"	m	class:Discretization	access:private
clusterSize	population.h	/^  long *clusterSize;$/;"	m	struct:__anon8	access:public
coef	fitness.cc	/^double coef;$/;"	v
coincidence	fitness.cc	/^char **coincidence=NULL;$/;"	v
coincidence	graph.h	/^  char **coincidence;  \/\/ the coincidence matrix$/;"	m	class:OrientedGraph	access:private
commonOnes	select.cc	/^int commonOnes(char *a, char *b, int n)$/;"	f	signature:(char *a, char *b, int n)
commonOnes	select.h	/^int commonOnes(char *a, char *b, int n);$/;"	p	signature:(char *a, char *b, int n)
compareIndex	discretization.cc	/^long       *compareIndex;$/;"	v
comparePopulation	discretization.cc	/^Population *comparePopulation;$/;"	v
compareWhichVariable	discretization.cc	/^int         compareWhichVariable;$/;"	v
computeBoltzmannFrequencies	frequencyDecisionGraph.cc	/^int FrequencyDecisionGraph::computeBoltzmannFrequencies(double beta, double coef)$/;"	f	class:FrequencyDecisionGraph	signature:(double beta, double coef)
computeBoltzmannFrequencies	frequencyDecisionGraph.h	/^  int computeBoltzmannFrequencies(double beta, double coef);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(double beta, double coef)
computeBoundsFHH	discretization.cc	/^void Discretization::computeBoundsFHH(Population *p)$/;"	f	class:Discretization	signature:(Population *p)
computeBoundsFHH	discretization.h	/^  void computeBoundsFHH(Population *p);$/;"	p	class:Discretization	access:public	signature:(Population *p)
computeCounts	counts.cc	/^int computeCounts(int *pos, int n, Population *P, long *count)$/;"	f	signature:(int *pos, int n, Population *P, long *count)
computeCounts	counts.h	/^int computeCounts(int *pos, int n, Population *P, long *count);$/;"	p	signature:(int *pos, int n, Population *P, long *count)
computeCountsForList	counts.cc	/^int computeCountsForList(int node, int *list, int numList, int *pos, int n, Population *P, long **count)$/;"	f	signature:(int node, int *list, int numList, int *pos, int n, Population *P, long **count)
computeCountsForList	counts.h	/^int computeCountsForList(int node, int *list, int numList, int *pos, int n, Population *P, long **count);$/;"	p	signature:(int node, int *list, int numList, int *pos, int n, Population *P, long **count)
computeFrequencies	frequencyDecisionGraph.cc	/^int FrequencyDecisionGraph::computeFrequencies()$/;"	f	class:FrequencyDecisionGraph	signature:()
computeFrequencies	frequencyDecisionGraph.h	/^  int computeFrequencies();$/;"	p	class:FrequencyDecisionGraph	access:public	signature:()
computeFrequencies	frequencyTree.cc	/^int FrequencyTree::computeFrequencies(Population *p)$/;"	f	class:FrequencyTree	signature:(Population *p)
computeFrequencies	frequencyTree.h	/^  int  computeFrequencies(Population *p);$/;"	p	class:FrequencyTree	access:public	signature:(Population *p)
computeIndexedFrequencies	frequencyTree.cc	/^int FrequencyTree::computeIndexedFrequencies(Population *p, int *index, int indexLength)$/;"	f	class:FrequencyTree	signature:(Population *p, int *index, int indexLength)
computeIndexedFrequencies	frequencyTree.h	/^  int  computeIndexedFrequencies(Population *p, int *index, int indexLength);$/;"	p	class:FrequencyTree	access:public	signature:(Population *p, int *index, int indexLength)
computeIndexedFrequenciesWithSplit	frequencyTree.cc	/^int FrequencyTree::computeIndexedFrequenciesWithSplit(Population *p, int *index, int indexLength, int **list, int *listLength, int listSize)$/;"	f	class:FrequencyTree	signature:(Population *p, int *index, int indexLength, int **list, int *listLength, int listSize)
computeIndexedFrequenciesWithSplit	frequencyTree.h	/^  int  computeIndexedFrequenciesWithSplit(Population *p, int *index, int indexLength, int **list, int *listLength, int listSize);$/;"	p	class:FrequencyTree	access:public	signature:(Population *p, int *index, int indexLength, int **list, int *listLength, int listSize)
computeSplitFrequencies	frequencyDecisionGraph.cc	/^int FrequencyDecisionGraph::computeSplitFrequencies(LabeledTreeNode *x, Value *left0, Value *left1, Value *right0, Value *right1)$/;"	f	class:FrequencyDecisionGraph	signature:(LabeledTreeNode *x, Value *left0, Value *left1, Value *right0, Value *right1)
computeSplitFrequencies	frequencyDecisionGraph.h	/^  int computeSplitFrequencies(LabeledTreeNode *x, Value *left0, Value *left1, Value *right0, Value *right1);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(LabeledTreeNode *x, Value *left0, Value *left1, Value *right0, Value *right1)
conjugateGradient	includeFiles.h	/^void conjugateGradient(double*, double*, int, int, double, int*);$/;"	p	signature:(double*, double*, int, int, double, int*)
connected	graph.cc	/^int LoudAcyclicOrientedGraph::connected(int i, int j)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int i, int j)
connected	graph.cc	/^int OrientedGraph::connected(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
connected	graph.h	/^  int connected(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
connected	graph.h	/^  int connected(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
constructPriorNetwork	priors.cc	/^int constructPriorNetwork(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N)$/;"	f	signature:(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N)
constructPriorNetwork	priors.h	/^int constructPriorNetwork(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N);$/;"	p	signature:(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N)
constructor	priors.h	/^  PriorNetworkConstructor *constructor;$/;"	m	struct:__anon1	access:public
continuous	individual.h	/^  double *continuous;$/;"	m	class:Individual	access:public
continuousDeceptiveTwoPeaks	fitness.cc	/^double continuousDeceptiveTwoPeaks(char *x, int numDiscrete, double *continuous, int n)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int n)
continuousDeceptiveTwoPeaks	fitness.cc	/^static double continuousDeceptiveTwoPeaks(char *x, int numDiscrete, double *continuous, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
continuousDeceptiveTwoPeaksIsBest	fitness.cc	/^char continuousDeceptiveTwoPeaksIsBest(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double fit)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double fit)
continuousDeceptiveTwoPeaksIsBest	fitness.cc	/^static char continuousDeceptiveTwoPeaksIsBest(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double f);$/;"	p	file:	signature:(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double f)
continuousPopulation	discretization.h	/^  Population *continuousPopulation;$/;"	m	class:Discretization	access:public
contribution	hBoa.h	/^  double *contribution;$/;"	m	struct:__anon5	access:public
converged	statistics.h	/^    char       converged;$/;"	m	struct:__anon11	access:public
convergedToTheBest	statistics.h	/^    char       convergedToTheBest;$/;"	m	struct:__anon11	access:public
copyDiscreteVariables	discretization.cc	/^void Discretization::copyDiscreteVariables(char *dest, char *src, int n)$/;"	f	class:Discretization	signature:(char *dest, char *src, int n)
copyDiscreteVariables	discretization.h	/^  void copyDiscreteVariables(char *dest, char *src, int n);$/;"	p	class:Discretization	access:public	signature:(char *dest, char *src, int n)
copyIndexed	hBoa.cc	/^int copyIndexed(char *dest, char *src, int *index, int n)$/;"	f	signature:(char *dest, char *src, int *index, int n)
copyIndexed	hBoa.h	/^int copyIndexed(char *dest, char *src, int *index, int n);$/;"	p	signature:(char *dest, char *src, int *index, int n)
copyIndividual	individual.cc	/^int copyIndividual(Individual *dest, Individual *source, int numDiscrete, int numContinuous)$/;"	f	signature:(Individual *dest, Individual *source, int numDiscrete, int numContinuous)
copyIndividual	individual.h	/^int copyIndividual(Individual *dest, Individual *source, int numDiscrete, int numContinuous);$/;"	p	signature:(Individual *dest, Individual *source, int numDiscrete, int numContinuous)
copyRecombination	copy.cc	/^int copyRecombination(Population *parents, Population *children, long M, RecombinationParams *params)$/;"	f	signature:(Population *parents, Population *children, long M, RecombinationParams *params)
copyRecombination	copy.h	/^int copyRecombination(Population *parents, Population *children, long M, RecombinationParams *recombinationParams);$/;"	p	signature:(Population *parents, Population *children, long M, RecombinationParams *recombinationParams)
copySubtree	frequencyTree.cc	/^TreeNode *FrequencyTree::copySubtree(TreeNode *node)$/;"	f	class:FrequencyTree	signature:(TreeNode *node)
copySubtree	frequencyTree.h	/^  TreeNode *copySubtree(TreeNode *node);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node)
createEmptyTree	frequencyTree.cc	13;"	d	file:
crossoverMethod	recombination.h	/^  int    crossoverMethod;$/;"	m	struct:__anon2	access:public
crossoverRate	recombination.h	/^  double crossoverRate;$/;"	m	struct:__anon2	access:public
crowding	replace.cc	/^int crowding(Population *population, Population *offspring)$/;"	f	signature:(Population *population, Population *offspring)
crowding	replace.h	/^int crowding(Population *population, Population *offspring);$/;"	p	signature:(Population *population, Population *offspring)
d	hBOAmain.cc	/^int d;                     \/\/ dimension of the problem$/;"	v
dArrayTmp	labeledTreeNode.h	/^  Value *dArrayTmp;$/;"	m	class:LabeledTreeNode	access:public
dBOAGetMetricDescription	decisionGraphBoa.cc	/^char *dBOAGetMetricDescription(int n)$/;"	f	signature:(int n)
dBOAGetMetricDescription	decisionGraphBoa.h	/^char *dBOAGetMetricDescription(int n);$/;"	p	signature:(int n)
dBOAMetricDesc	decisionGraphBoa.cc	/^char *dBOAMetricDesc[3] = { "K2 metric with penalty",$/;"	v
dBOAMetricN	recombination.h	/^  int           dBOAMetricN;$/;"	m	struct:__anon2	access:public
dFactorial	mymath.cc	/^double dFactorial(int n)$/;"	f	signature:(int n)
dFactorial	mymath.h	/^double dFactorial(int n);$/;"	p	signature:(int n)
debug	discretization.cc	14;"	d	file:
debug	discretization.cc	16;"	d	file:
debug	ea.cc	24;"	d	file:
debug	ea.cc	26;"	d	file:
decodeRealValue	user/run_hBOA.cpp	/^double decodeRealValue(int iLength, char *pChromosome, double dLower, double dUpper) {$/;"	f	signature:(int iLength, char *pChromosome, double dLower, double dUpper)
decodeRealValue	user/run_hBOA.cpp	/^double decodeRealValue(int iLength, char *pChromosome, double dLower, double dUpper);$/;"	p	file:	signature:(int iLength, char *pChromosome, double dLower, double dUpper)
defValue	getFileArgs.h	/^  char *defValue;$/;"	m	struct:__anon4	access:public
deleteNode	decisionGraph.h	/^  int deleteNode(LabeledTreeNode *x);$/;"	p	class:DecisionGraph	access:protected	signature:(LabeledTreeNode *x)
deleteNodeList	decisionGraph.cc	/^int DecisionGraph::deleteNodeList(NodeListItem *x)$/;"	f	class:DecisionGraph	signature:(NodeListItem *x)
deleteNodeList	decisionGraph.h	/^  int deleteNodeList(NodeListItem *x);$/;"	p	class:DecisionGraph	access:private	signature:(NodeListItem *x)
deleteOperator	decisionGraphBoa.cc	/^int deleteOperator(FrequencyDecisionGraph **T, Operator *x)$/;"	f	signature:(FrequencyDecisionGraph **T, Operator *x)
deleteOperator	decisionGraphBoa.h	/^int deleteOperator(FrequencyDecisionGraph **T, Operator *x);$/;"	p	signature:(FrequencyDecisionGraph **T, Operator *x)
deleteSubtree	decisionGraph.cc	/^int DecisionGraph::deleteSubtree(LabeledTreeNode *x)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x)
deleteSubtree	decisionGraph.h	/^  int deleteSubtree(LabeledTreeNode *x);$/;"	p	class:DecisionGraph	access:private	signature:(LabeledTreeNode *x)
deleteSubtree	frequencyTree.cc	/^int FrequencyTree::deleteSubtree(TreeNode *node)$/;"	f	class:FrequencyTree	signature:(TreeNode *node)
deleteSubtree	frequencyTree.h	/^  int       deleteSubtree(TreeNode *node);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node)
deleteSubtrees	frequencyTree.cc	14;"	d	file:
dependencyTreshold	hBOAmain.cc	/^double dependencyTreshold;               \/\/ dep. treshold for BMDA$/;"	v
dependencyTreshold	recombination.h	/^  double dependencyTreshold;$/;"	m	struct:__anon2	access:public
depth	labeledTreeNode.h	/^  int       depth;$/;"	m	class:LabeledTreeNode	access:public
description	boa.h	/^  char                            *description;$/;"	m	struct:__anon9	access:public
description	fitness.h	/^  char              *description;$/;"	m	struct:__anon13	access:public
description	getFileArgs.h	/^  char *description;$/;"	m	struct:__anon4	access:public
description	priors.h	/^  char                    *description;$/;"	m	struct:__anon1	access:public
description	recombination.h	/^  char                  *description;$/;"	m	struct:__anon3	access:public
description	reordering.h	/^  char            *description;$/;"	m	struct:__anon12	access:public
discretePopulation	discretization.h	/^  Population *discretePopulation;$/;"	m	class:Discretization	access:public
discretizationCompare	discretization.cc	/^int discretizationCompare(const void *x, const void *y)$/;"	f	signature:(const void *x, const void *y)
discretizationCompare	discretization.h	/^int discretizationCompare(const void *x, const void *y);$/;"	p	signature:(const void *x, const void *y)
discretizationParams	hBOAmain.cc	/^DiscretizationParams discretizationParams; \/\/ parameters for the discretization$/;"	v
discretizationType	discretization.h	/^  int discretizationType;$/;"	m	struct:DiscretizationParams	access:public
discretize	dicretize.h	/^  virtual void discretize(Population *p)=0;$/;"	p	class:Discretization	access:private	signature:(Population *p)
discretize	discretization.cc	/^void Discretization::discretize(Population *p, Population *q, DiscretizationParams *discretizationParams)$/;"	f	class:Discretization	signature:(Population *p, Population *q, DiscretizationParams *discretizationParams)
discretize	discretization.h	/^  void discretize(Population *p, Population *q, DiscretizationParams *discretizationParams);$/;"	p	class:Discretization	access:public	signature:(Population *p, Population *q, DiscretizationParams *discretizationParams)
discretizeContinuousVariablesFHH	discretization.cc	/^void Discretization::discretizeContinuousVariablesFHH(char *dest, double *x, int n)$/;"	f	class:Discretization	signature:(char *dest, double *x, int n)
discretizeContinuousVariablesFHH	discretization.h	/^  void discretizeContinuousVariablesFHH(char *dest, double *x, int n);$/;"	p	class:Discretization	access:public	signature:(char *dest, double *x, int n)
discretizeFHH	discretization.cc	/^void Discretization::discretizeFHH()$/;"	f	class:Discretization	signature:()
discretizeFHH	discretization.h	/^  void discretizeFHH();$/;"	p	class:Discretization	access:public	signature:()
discretizeFWH	discretization.cc	/^void Discretization::discretizeFWH()$/;"	f	class:Discretization	signature:()
discretizeFWH	discretization.h	/^  void discretizeFWH();$/;"	p	class:Discretization	access:public	signature:()
discretizeKMeans	discretization.cc	/^void Discretization::discretizeKMeans()$/;"	f	class:Discretization	signature:()
discretizeKMeans	discretization.h	/^  void discretizeKMeans();$/;"	p	class:Discretization	access:public	signature:()
disorderK	reordering.cc	/^int disorderK(int n, double *params)$/;"	f	signature:(int n, double *params)
disorderK	reordering.h	/^int disorderK(int n, double *params);$/;"	p	signature:(int n, double *params)
displayDependencies	recombination.h	/^  char   displayDependencies;$/;"	m	struct:__anon2	access:public
displayDeps	hBOAmain.cc	/^char displayDeps;                        \/\/ display dependencies?$/;"	v
displayFitness	statistics.h	/^    char displayFitness;$/;"	m	struct:__anon10	access:public
displayGuidance	statistics.h	/^    char displayGuidance;$/;"	m	struct:__anon10	access:public
displayNumOptimal	statistics.h	/^    char displayNumOptimal;$/;"	m	struct:__anon10	access:public
displayOrdering	statistics.h	/^    char displayOrdering;$/;"	m	struct:__anon10	access:public
displayUMF	statistics.h	/^    char displayUMF;$/;"	m	struct:__anon10	access:public
divideBest	select.cc	/^int divideBest(Population *population, long left, long right, int numDiscrete, int numContinuous, long M)$/;"	f	signature:(Population *population, long left, long right, int numDiscrete, int numContinuous, long M)
divideBest	select.h	/^int divideBest(Population *population, long left, long right, int numDiscrete, int numContinuous, long M);$/;"	p	signature:(Population *population, long left, long right, int numDiscrete, int numContinuous, long M)
divideNodes	frequencyTree.cc	/^int FrequencyTree::divideNodes(double x)$/;"	f	class:FrequencyTree	signature:(double x)
divideNodes	frequencyTree.h	/^  int       divideNodes(double x);$/;"	p	class:FrequencyTree	access:private	signature:(double x)
divideSubtreeNodes	frequencyTree.cc	/^int FrequencyTree::divideSubtreeNodes(TreeNode *node)$/;"	f	class:FrequencyTree	signature:(TreeNode *node)
divideSubtreeNodes	frequencyTree.h	/^  int       divideSubtreeNodes(TreeNode *node);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node)
divideWorst	replace.cc	/^int divideWorst(Population *population, long left, long right, int numDiscrete, int numContinuous, long NM)$/;"	f	signature:(Population *population, long left, long right, int numDiscrete, int numContinuous, long NM)
divideWorst	replace.h	/^int divideWorst(Population *population, long left, long right, int numDiscrete, int numContinuous, long M);$/;"	p	signature:(Population *population, long left, long right, int numDiscrete, int numContinuous, long M)
done	ea.cc	/^int done(Population *population, $/;"	f	signature:(Population *population, Fitness *fitness, long t, long tMax, long maxFC, double epsilon, char stopWhenFoundOptimum, double maxAverageFitness, double maxOptimal)
done	hBOAmain.cc	/^int done() {$/;"	f	signature:()
doneFitness	fitness.h	/^  DoneFitness       *doneFitness;$/;"	m	struct:__anon13	access:public
doneParams	getFileArgs.cc	/^int doneParams(ParamStruct params[])$/;"	f	signature:(ParamStruct params[])
doneParams	getFileArgs.h	/^int doneParams(ParamStruct params[]);$/;"	p	signature:(ParamStruct params[])
doneReordering	reordering.cc	/^int doneReordering()$/;"	f	signature:()
doneReordering	reordering.h	/^int doneReordering();$/;"	p	signature:()
doneRunLog	statistics.cc	/^int doneRunLog(RunLog *runLog, int numRuns)$/;"	f	signature:(RunLog *runLog, int numRuns)
doneRunLog	statistics.h	/^int doneRunLog(RunLog *runLog, int numRuns);$/;"	p	signature:(RunLog *runLog, int numRuns)
doubleCompare	discretization.cc	/^int doubleCompare(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
doubleCompare	discretization.h	/^int doubleCompare(const void *a, const void *b);$/;"	p	signature:(const void *a, const void *b)
drand	random.cc	/^double drand()$/;"	f	signature:()
drand	random.h	/^double drand();$/;"	p	signature:()
dsqr	mymath.cc	/^double dsqr(double x)$/;"	f	signature:(double x)
dsqr	mymath.h	/^double dsqr(double x);$/;"	p	signature:(double x)
dungFunc	user/run_hBOA.cpp	/^double dungFunc(int iLength, char *pChromosome);$/;"	p	file:	signature:(int iLength, char *pChromosome)
dungFunc	user/run_hBOA.cpp	/^double dungFunc(int iLength, char *pChromosome){$/;"	f	signature:(int iLength, char *pChromosome)
ea	ea.cc	/^int ea( long N,$/;"	f	signature:( long N, long offspringSize, long M, int numDiscrete, int numContinuous, DiscretizationParams *discretizationParams, long *tPerformed, long tMax, Fitness *fitness, long maxFC, double epsilon, char stopWhenFoundOptimum, double maxAverageFitness, double maxOptimal, Selection *selection, Recombination *recombination, RecombinationParams *recombinationParams, Replacement *replace, StatisticsParams *statisticsParams, char *fileRoot, char *fileExtension, Population *theLastPopulation)
ea	ea.h	/^int ea( long N,$/;"	p	signature:( long N, long offspringSize, long M, int n, int numContinuous, DiscretizationParams *discretizationParams, long *tPerformed, long tMax, Fitness *fitness, long maxFC, double epsilon, char stopWhenFoundOptimum, double maxAverageFitness, double maxOptimal, Selection *selection, Recombination *recombination, RecombinationParams *recombinationParams, Replacement *replace, StatisticsParams *statisticsParams, char *fileRoot, char *fileExtension, Population *theLastPopulation)
empty	stack.cc	/^int IntStack::empty()$/;"	f	class:IntStack	signature:()
empty	stack.h	/^  int empty();$/;"	p	class:IntStack	access:public	signature:()
emptyPriorNetwork	priors.cc	/^int emptyPriorNetwork(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N)$/;"	f	signature:(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N)
emptyPriorNetwork	priors.h	/^int emptyPriorNetwork(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N);$/;"	p	signature:(Population *P, Fitness *fitness, OrientedGraph *priorNetwork, long N)
epsilon	hBOAmain.cc	/^double epsilon;             \/\/ when univariate frequencies are closer than epsilon to 0 or 1 terminate$/;"	v
equalIndividuals	individual.cc	/^char equalIndividuals(Individual *a, Individual *b, int numDiscrete, int numContinuous)$/;"	f	signature:(Individual *a, Individual *b, int numDiscrete, int numContinuous)
equalIndividuals	individual.h	/^char equalIndividuals(Individual *a, Individual *b, int numDiscrete, int numContinuous);$/;"	p	signature:(Individual *a, Individual *b, int numDiscrete, int numContinuous)
euclid	distance.cc	/^double euclid(double *x, double *y, int n)$/;"	f	signature:(double *x, double *y, int n)
euclid	distance.h	/^double euclid(double *x, double *y, int n);$/;"	p	signature:(double *x, double *y, int n)
euclidBinaryDouble	distance.cc	/^double euclidBinaryDouble(char *x, double *y, int n)$/;"	f	signature:(char *x, double *y, int n)
euclidBinaryDouble	distance.h	/^double euclidBinaryDouble(char *x, double *y, int n);$/;"	p	signature:(char *x, double *y, int n)
evaluateIndividual	individual.cc	/^int evaluateIndividual(Individual *individual, Fitness *fitness, int numDiscrete, int numContinuous)$/;"	f	signature:(Individual *individual, Fitness *fitness, int numDiscrete, int numContinuous)
evaluateIndividual	individual.h	/^int evaluateIndividual(Individual *individual, Fitness *fitness, int numDiscrete, int numContinuous);$/;"	p	signature:(Individual *individual, Fitness *fitness, int numDiscrete, int numContinuous)
evaluatePopulation	population.cc	/^int evaluatePopulation(Population *population, Fitness *fitness)$/;"	f	signature:(Population *population, Fitness *fitness)
evaluatePopulation	population.h	/^int evaluatePopulation(Population *population, Fitness *fitness);$/;"	p	signature:(Population *population, Fitness *fitness)
evaluated	population.h	/^  char evaluated;$/;"	m	struct:__anon8	access:public
existsPath	graph.cc	/^int LoudAcyclicOrientedGraph::existsPath(int i, int j)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int i, int j)
existsPath	graph.cc	/^int OrientedGraph::existsPath(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
existsPath	graph.h	/^  int existsPath(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
existsPath	graph.h	/^  int existsPath(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
f	individual.h	/^  double f;$/;"	m	class:Individual	access:public
f1dim	includeFiles.h	/^double f1dim(double, int, int, double*, double*, double*, int*); $/;"	p	signature:(double, int, int, double*, double*, double*, int*)
fCalculated	individual.h	/^  char   fCalculated;$/;"	m	class:Individual	access:public
failed	statistics.h	/^    char       failed;$/;"	m	struct:__anon11	access:public
fhhBound	discretization.h	/^  long **fhhBound;$/;"	m	class:Discretization	access:private
fhhEnd	discretization.h	/^  long **fhhEnd;$/;"	m	class:Discretization	access:private
fhhStart	discretization.h	/^  long **fhhStart;$/;"	m	class:Discretization	access:private
finalStatistics	statistics.cc	/^int finalStatistics(RunLog *runLog, int numRuns, FILE *outputFile)$/;"	f	signature:(RunLog *runLog, int numRuns, FILE *outputFile)
finalStatistics	statistics.h	/^int finalStatistics(RunLog *runLog, int numRuns, FILE *outputFile);$/;"	p	signature:(RunLog *runLog, int numRuns, FILE *outputFile)
findBestReduction	graph.cc	/^int BoundedIncommingEdgesAcyclicOrientedGraph::findBestReduction(int i, int *reducedTo)$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:(int i, int *reducedTo)
findBestReduction	graph.h	/^  int findBestReduction(int i, int *reducedTo);$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:private	signature:(int i, int *reducedTo)
firstChar	getFileArgs.cc	/^char firstChar(FILE *f)$/;"	f	signature:(FILE *f)
fitness	fitness.cc	/^static Fitness fitness[numFitness] = {$/;"	v	file:
fitness	fitness.h	/^  FitnessFunction   *fitness;$/;"	m	struct:__anon13	access:public
fitness	hBOAmain.cc	/^Fitness *fitness;          \/\/ fitness function description$/;"	v
fitness	userBOA.h	/^	typeFitness	*fitness;$/;"	m	struct:tagFitnessDefinition	access:public
fitnessCalled	fitness.cc	/^long fitnessCalled(long numCalls)$/;"	f	signature:(long numCalls)
fitnessCalled	fitness.cc	/^long fitnessCalled(void)$/;"	f	signature:(void)
fitnessCalled	fitness.h	/^long fitnessCalled(long numCalls);$/;"	p	signature:(long numCalls)
fitnessCalled	fitness.h	/^long fitnessCalled(void);$/;"	p	signature:(void)
fitnessCalls_	fitness.cc	/^long   fitnessCalls_;$/;"	v
fitnessDefinition	userBOA.cc	/^FitnessDefinition fitnessDefinition;$/;"	v
fitnessFilename	hBOAmain.cc	/^char *fitnessFilename;     \/\/ filename of the file with fitness parameters$/;"	v
fitnessN	hBOAmain.cc	/^int fitnessN;	           \/\/ the number of used fitness function$/;"	v
fitnessNoiseVariance	hBOAmain.cc	/^double fitnessNoiseVariance;\/\/ variance of the additional noise for fitness function$/;"	v
fitnessParams	hBOAmain.cc	/^double fitnessParams[10];  \/\/ fitness parameters$/;"	v
fitnessProportionalClusterReproduction	recombination.h	/^  char   fitnessProportionalClusterReproduction;$/;"	m	struct:__anon2	access:public
fitnessVariance	population.cc	/^double fitnessVariance(Population *p)$/;"	f	signature:(Population *p)
fitnessVariance	population.h	/^double fitnessVariance(Population *p);$/;"	p	signature:(Population *p)
flipCoin	random.cc	/^char flipCoin()$/;"	f	signature:()
flipCoin	random.h	/^char flipCoin();$/;"	p	signature:()
fmax	mymath.cc	/^float fmax(float a, float b)$/;"	f	signature:(float a, float b)
fmax	mymath.h	/^float fmax(float a, float b);$/;"	p	signature:(float a, float b)
freeBMF	population.cc	/^int freeBMF(double ***p00, double ***p01, double ***p10, double ***p11, int n)$/;"	f	signature:(double ***p00, double ***p01, double ***p10, double ***p11, int n)
freeBMF	population.h	/^int freeBMF(double ***p00, double ***p01, double ***p10, double ***p11, int n);$/;"	p	signature:(double ***p00, double ***p01, double ***p10, double ***p11, int n)
freeBounds	discretization.cc	/^void Discretization::freeBounds()$/;"	f	class:Discretization	signature:()
freeBounds	discretization.h	/^  void freeBounds();$/;"	p	class:Discretization	access:public	signature:()
freeIndividual	individual.cc	/^int freeIndividual(Individual *individual)$/;"	f	signature:(Individual *individual)
freeIndividual	individual.h	/^int freeIndividual(Individual *individual);$/;"	p	signature:(Individual *individual)
freePopulation	population.cc	/^int freePopulation(Population *population)$/;"	f	signature:(Population *population)
freePopulation	population.h	/^int freePopulation(Population *population);$/;"	p	signature:(Population *population)
freePrecomputedCummulativeLogarithms	mymath.cc	/^int freePrecomputedCummulativeLogarithms()$/;"	f	signature:()
freePrecomputedCummulativeLogarithms	mymath.h	/^int freePrecomputedCummulativeLogarithms();$/;"	p	signature:()
freePriorNetwork	priors.cc	/^int freePriorNetwork(OrientedGraph ***priorNetwork, int n, int d)$/;"	f	signature:(OrientedGraph ***priorNetwork, int n, int d)
freePriorNetwork	priors.h	/^int freePriorNetwork(OrientedGraph ***priorNetwork, int n, int d);$/;"	p	signature:(OrientedGraph ***priorNetwork, int n, int d)
freeTemporaryArrays	labeledTreeNode.cc	/^int LabeledTreeNode::freeTemporaryArrays()$/;"	f	class:LabeledTreeNode	signature:()
freeTemporaryArrays	labeledTreeNode.h	/^  int freeTemporaryArrays();$/;"	p	class:LabeledTreeNode	access:public	signature:()
freeUMF	population.cc	/^int freeUMF(double **p0, double **p1, int n)$/;"	f	signature:(double **p0, double **p1, int n)
freeUMF	population.h	/^int freeUMF(double **p0, double **p1, int n);$/;"	p	signature:(double **p0, double **p1, int n)
frequencies	hBoa.h	/^  double         **frequencies;$/;"	m	struct:__anon5	access:public
frequencyTree	hBoa.h	/^  FrequencyTree  **frequencyTree;$/;"	m	struct:__anon5	access:public
fsqr	mymath.cc	/^float fsqr(float x)$/;"	f	signature:(float x)
fsqr	mymath.h	/^float fsqr(float x);$/;"	p	signature:(float x)
full	hBoa.h	/^  char            *full;$/;"	m	struct:__anon5	access:public
full	stack.cc	/^int IntStack::full()$/;"	f	class:IntStack	signature:()
full	stack.h	/^  int full();$/;"	p	class:IntStack	access:public	signature:()
gain	decisionGraphBoa.h	/^  float gain;$/;"	m	struct:MergeOperator	access:public
gain	decisionGraphBoa.h	/^  float gain;$/;"	m	struct:Operator	access:public
gaussianRandom	random.cc	/^double gaussianRandom(double mean,double stddev)$/;"	f	signature:(double mean,double stddev)
gaussianRandom	random.h	/^double gaussianRandom(double mean,double stddev);$/;"	p	signature:(double mean,double stddev)
generalInfo	hBOAmain.cc	/^int generalInfo(FILE *output) {$/;"	f	signature:(FILE *output)
generalTrap	fitness.cc	/^double generalTrap(char *x, int k, double leftPeak, double rightPeak)$/;"	f	signature:(char *x, int k, double leftPeak, double rightPeak)
generalTrap	fitness.cc	/^static double generalTrap(char *x, int k, double leftPeak, double rightPeak);$/;"	p	file:	signature:(char *x, int k, double leftPeak, double rightPeak)
generateIndividual	individual.cc	/^int generateIndividual(Individual *individual, int numDiscrete, int numContinuous)$/;"	f	signature:(Individual *individual, int numDiscrete, int numContinuous)
generateIndividual	individual.h	/^int generateIndividual(Individual *individual, int numDiscrete, int numContinuous);$/;"	p	signature:(Individual *individual, int numDiscrete, int numContinuous)
generateInstance	decisionGraphBoa.cc	/^int generateInstance(char *x,$/;"	f	signature:(char *x, AcyclicOrientedGraph *G, int *index, FrequencyDecisionGraph **T)
generateInstance	decisionGraphBoa.h	/^int generateInstance(char *x,$/;"	p	signature:(char *x, AcyclicOrientedGraph *G, int *index, FrequencyDecisionGraph **T)
generatePopulation	population.cc	/^int generatePopulation(Population *population)$/;"	f	signature:(Population *population)
generatePopulation	population.h	/^int generatePopulation(Population *population);$/;"	p	signature:(Population *population)
generationsToConvergence	statistics.h	/^    long       generationsToConvergence;$/;"	m	struct:__anon11	access:public
get	arrays.cc	/^int CoupleArray::get(int *a, int *b, int i)$/;"	f	class:CoupleArray	signature:(int *a, int *b, int i)
get	arrays.h	/^    int get(int *a, int *b, int i);$/;"	p	class:CoupleArray	access:public	signature:(int *a, int *b, int i)
getArgCoupleArray	args.cc	/^int getArgCoupleArray(char *s, void *a_, int argc, char **argv)$/;"	f	signature:(char *s, void *a_, int argc, char **argv)
getArgCoupleArray	args.h	/^int getArgCoupleArray(char *s, void *a_, int argc, char **argv);$/;"	p	signature:(char *s, void *a_, int argc, char **argv)
getArgFloat	args.cc	/^float getArgFloat(char *s, float def, int argc, char **argv)$/;"	f	signature:(char *s, float def, int argc, char **argv)
getArgFloat	args.h	/^float getArgFloat(char *s, float def, int argc, char **argv);$/;"	p	signature:(char *s, float def, int argc, char **argv)
getArgInt	args.cc	/^int getArgInt(char *s, int def, int argc, char **argv)$/;"	f	signature:(char *s, int def, int argc, char **argv)
getArgInt	args.h	/^int getArgInt(char *s, int def, int argc, char **argv);$/;"	p	signature:(char *s, int def, int argc, char **argv)
getArgLong	args.cc	/^long getArgLong(char *s, int def, int argc, char **argv)$/;"	f	signature:(char *s, int def, int argc, char **argv)
getArgLong	args.h	/^long getArgLong(char *s, int def, int argc, char **argv);$/;"	p	signature:(char *s, int def, int argc, char **argv)
getArgPar_	args.cc	/^int getArgPar_(char *s, int *n, float *value, int argc, char **argv)$/;"	f	signature:(char *s, int *n, float *value, int argc, char **argv)
getArgPar_	args.h	/^int getArgPar_(char *s, int *n, float *value, int argc, char **argv);$/;"	p	signature:(char *s, int *n, float *value, int argc, char **argv)
getArgString	args.cc	/^char *getArgString(char *s, int argc, char **argv)$/;"	f	signature:(char *s, int argc, char **argv)
getArgString	args.h	/^char *getArgString(char *s, int argc, char **argv);$/;"	p	signature:(char *s, int argc, char **argv)
getFirstString	getFileArgs.cc	/^int getFirstString(FILE *f, char *s, char *restC)$/;"	f	signature:(FILE *f, char *s, char *restC)
getFirstString	getFileArgs.h	/^int getFirstString(FILE *f, char *s);$/;"	p	signature:(FILE *f, char *s)
getFitness	fitness.cc	/^void *getFitness(int n)$/;"	f	signature:(int n)
getFitness	fitness.h	/^void *getFitness(int n);$/;"	p	signature:(int n)
getFitnessCalls	fitness.cc	/^long getFitnessCalls(void)$/;"	f	signature:(void)
getFitnessCalls	fitness.h	/^long getFitnessCalls(void);$/;"	p	signature:(void)
getFitnessDesc	fitness.cc	/^char *getFitnessDesc(int n)$/;"	f	signature:(int n)
getFitnessDesc	fitness.h	/^char *getFitnessDesc(int n);$/;"	p	signature:(int n)
getFitnessNoiseVariance	fitness.cc	/^double getFitnessNoiseVariance()$/;"	f	signature:()
getFitnessNoiseVariance	fitness.h	/^double getFitnessNoiseVariance();$/;"	p	signature:()
getFrequency	frequencyTree.cc	/^double FrequencyTree::getFrequency(char *x, int l)$/;"	f	class:FrequencyTree	signature:(char *x, int l)
getFrequency	frequencyTree.h	/^  double getFrequency(char *x, int l);$/;"	p	class:FrequencyTree	access:public	signature:(char *x, int l)
getFrequencyList	frequencyTree.cc	/^long FrequencyTree::getFrequencyList(double *x)$/;"	f	class:FrequencyTree	signature:(double *x)
getFrequencyList	frequencyTree.h	/^  long getFrequencyList(double *x);$/;"	p	class:FrequencyTree	access:public	signature:(double *x)
getInstances	frequencyTree.cc	/^long FrequencyTree::getInstances(char **x)$/;"	f	class:FrequencyTree	signature:(char **x)
getInstances	frequencyTree.h	/^  long getInstances(char **x);$/;"	p	class:FrequencyTree	access:public	signature:(char **x)
getInstancesAndFrequencies	frequencyTree.cc	/^long FrequencyTree::getInstancesAndFrequencies(char **x, double *f)$/;"	f	class:FrequencyTree	signature:(char **x, double *f)
getInstancesAndFrequencies	frequencyTree.h	/^  long getInstancesAndFrequencies(char **x, double *f);$/;"	p	class:FrequencyTree	access:public	signature:(char **x, double *f)
getInstancesAndFrequenciesWithSplit	frequencyTree.cc	/^long FrequencyTree::getInstancesAndFrequenciesWithSplit(char **x, double *f, int l)$/;"	f	class:FrequencyTree	signature:(char **x, double *f, int l)
getInstancesAndFrequenciesWithSplit	frequencyTree.h	/^  long getInstancesAndFrequenciesWithSplit(char **x, double *f, int l);$/;"	p	class:FrequencyTree	access:public	signature:(char **x, double *f, int l)
getIterator	decisionGraph.cc	/^LabeledTreeNode *DecisionGraph::getIterator()$/;"	f	class:DecisionGraph	signature:()
getIterator	decisionGraph.h	/^  LabeledTreeNode *getIterator();$/;"	p	class:DecisionGraph	access:public	signature:()
getIteratorLabel	decisionGraph.cc	/^int DecisionGraph::getIteratorLabel()$/;"	f	class:DecisionGraph	signature:()
getIteratorLabel	decisionGraph.h	/^  int              getIteratorLabel();$/;"	p	class:DecisionGraph	access:public	signature:()
getIteratorValue	decisionGraph.cc	/^Value DecisionGraph::getIteratorValue(char which)$/;"	f	class:DecisionGraph	signature:(char which)
getIteratorValue	decisionGraph.h	/^  Value            getIteratorValue(char which);$/;"	p	class:DecisionGraph	access:public	signature:(char which)
getLeafIterator	decisionGraph.cc	/^NodeListItem *DecisionGraph::getLeafIterator()$/;"	f	class:DecisionGraph	signature:()
getLeafIterator	decisionGraph.h	/^  NodeListItem    *getLeafIterator();$/;"	p	class:DecisionGraph	access:public	signature:()
getLeafIteratorNode	decisionGraph.cc	/^LabeledTreeNode *DecisionGraph::getLeafIteratorNode()$/;"	f	class:DecisionGraph	signature:()
getLeafIteratorNode	decisionGraph.h	/^  LabeledTreeNode *getLeafIteratorNode();$/;"	p	class:DecisionGraph	access:public	signature:()
getLeafIteratorValue	decisionGraph.cc	/^double DecisionGraph::getLeafIteratorValue(char which)$/;"	f	class:DecisionGraph	signature:(char which)
getLeafIteratorValue	decisionGraph.h	/^  double           getLeafIteratorValue(char which);$/;"	p	class:DecisionGraph	access:public	signature:(char which)
getLeaves	decisionGraph.cc	/^NodeListItem *DecisionGraph::getLeaves()$/;"	f	class:DecisionGraph	signature:()
getLeaves	decisionGraph.h	/^  NodeListItem *getLeaves();$/;"	p	class:DecisionGraph	access:public	signature:()
getMark	graph.cc	/^int OrientedGraph::getMark(int i)$/;"	f	class:OrientedGraph	signature:(int i)
getMark	graph.h	/^  int getMark(int i);$/;"	p	class:OrientedGraph	access:public	signature:(int i)
getNumIn	graph.cc	/^int OrientedGraph::getNumIn(int i)$/;"	f	class:OrientedGraph	signature:(int i)
getNumIn	graph.h	/^  int getNumIn(int i);$/;"	p	class:OrientedGraph	access:public	signature:(int i)
getNumInstances	frequencyTree.cc	/^long FrequencyTree::getNumInstances()$/;"	f	class:FrequencyTree	signature:()
getNumInstances	frequencyTree.h	/^  long getNumInstances();$/;"	p	class:FrequencyTree	access:public	signature:()
getNumInstancesWithSplit	frequencyTree.cc	/^long FrequencyTree::getNumInstancesWithSplit(int l)$/;"	f	class:FrequencyTree	signature:(int l)
getNumInstancesWithSplit	frequencyTree.h	/^  long getNumInstancesWithSplit(int l);$/;"	p	class:FrequencyTree	access:public	signature:(int l)
getNumLeaves	decisionGraph.cc	/^int DecisionGraph::getNumLeaves()$/;"	f	class:DecisionGraph	signature:()
getNumLeaves	decisionGraph.h	/^  int           getNumLeaves();$/;"	p	class:DecisionGraph	access:public	signature:()
getNumOptimaHIFF	fitness.cc	/^long getNumOptimaHIFF(int numDiscrete, int numContinuous)$/;"	f	signature:(int numDiscrete, int numContinuous)
getNumOptimaHIFF	fitness.cc	/^static long getNumOptimaHIFF(int numDiscrete, int numContinuous);$/;"	p	file:	signature:(int numDiscrete, int numContinuous)
getNumOut	graph.cc	/^int OrientedGraph::getNumOut(int i)$/;"	f	class:OrientedGraph	signature:(int i)
getNumOut	graph.h	/^  int getNumOut(int i);$/;"	p	class:OrientedGraph	access:public	signature:(int i)
getNumberOfOptima	fitness.h	/^  GetNumberOfOptima *getNumberOfOptima;$/;"	m	struct:__anon13	access:public
getNumberOfVertices	graph.cc	/^int OrientedGraph::getNumberOfVertices()$/;"	f	class:OrientedGraph	signature:()
getNumberOfVertices	graph.h	/^  int getNumberOfVertices();$/;"	p	class:OrientedGraph	access:public	signature:()
getParamsFromFile	getFileArgs.cc	/^int getParamsFromFile(char *filename, ParamStruct params[])$/;"	f	signature:(char *filename, ParamStruct params[])
getParamsFromFile	getFileArgs.h	/^int getParamsFromFile(char *filename, ParamStruct params[]);$/;"	p	signature:(char *filename, ParamStruct params[])
getParentList	graph.cc	/^int *OrientedGraph::getParentList(int i)$/;"	f	class:OrientedGraph	signature:(int i)
getParentList	graph.h	/^  int *getParentList(int i);$/;"	p	class:OrientedGraph	access:public	signature:(int i)
getPenalty	hBoa.cc	30;"	d	file:
getPrecomputedCummulativeLog	mymath.cc	/^double getPrecomputedCummulativeLog(long i, long j)$/;"	f	signature:(long i, long j)
getPrecomputedCummulativeLog	mymath.h	/^double getPrecomputedCummulativeLog(long i, long j);$/;"	p	signature:(long i, long j)
getPriorNetworkDescription	priors.cc	/^char *getPriorNetworkDescription(int source)$/;"	f	signature:(int source)
getPriorNetworkDescription	priors.h	/^char *getPriorNetworkDescription(int source);$/;"	p	signature:(int source)
getRecombination	recombination.cc	/^void *getRecombination(int n)$/;"	f	signature:(int n)
getRecombination	recombination.h	/^void *getRecombination(int n);$/;"	p	signature:(int n)
getRecombinationDesc	recombination.cc	/^char *getRecombinationDesc(int which)$/;"	f	signature:(int which)
getRecombinationDesc	recombination.h	/^char *getRecombinationDesc(int which);$/;"	p	signature:(int which)
getReorderingDescription	reordering.cc	/^char *getReorderingDescription(int n)$/;"	f	signature:(int n)
getReorderingDescription	reordering.h	/^char *getReorderingDescription(int n);$/;"	p	signature:(int n)
getReorderingOperator	reordering.cc	/^void *getReorderingOperator(int n)$/;"	f	signature:(int n)
getReorderingOperator	reordering.h	/^void *getReorderingOperator(int n);$/;"	p	signature:(int n)
getReplacementDesc	replace.cc	/^char *getReplacementDesc(int n)$/;"	f	signature:(int n)
getReplacementDesc	replace.h	/^char *getReplacementDesc(int n);$/;"	p	signature:(int n)
getRoot	decisionGraph.cc	/^LabeledTreeNode *DecisionGraph::getRoot()$/;"	f	class:DecisionGraph	signature:()
getRoot	decisionGraph.h	/^  LabeledTreeNode *getRoot();$/;"	p	class:DecisionGraph	access:public	signature:()
getSeed	random.cc	/^long getSeed()$/;"	f	signature:()
getSeed	random.h	/^long getSeed();$/;"	p	signature:()
getSelectionDesc	select.cc	/^char *getSelectionDesc(int n)$/;"	f	signature:(int n)
getSelectionDesc	select.h	/^char *getSelectionDesc(int n);$/;"	p	signature:(int n)
getShiftedInstancesAndFrequencies	frequencyTree.cc	/^long FrequencyTree::getShiftedInstancesAndFrequencies(char **x, double *f, int shift)$/;"	f	class:FrequencyTree	signature:(char **x, double *f, int shift)
getShiftedInstancesAndFrequencies	frequencyTree.h	/^  long getShiftedInstancesAndFrequencies(char **x, double *f, int shift);$/;"	p	class:FrequencyTree	access:public	signature:(char **x, double *f, int shift)
getSize	arrays.cc	/^int CoupleArray::getSize()$/;"	f	class:CoupleArray	signature:()
getSize	arrays.h	/^    int getSize();$/;"	p	class:CoupleArray	access:public	signature:()
getSize	stack.cc	/^int IntStack::getSize()$/;"	f	class:IntStack	signature:()
getSize	stack.h	/^  int getSize();$/;"	p	class:IntStack	access:public	signature:()
getSubtreeFrequencyList	frequencyTree.cc	/^long FrequencyTree::getSubtreeFrequencyList(TreeNode *node, double *x, int depth, long i)$/;"	f	class:FrequencyTree	signature:(TreeNode *node, double *x, int depth, long i)
getSubtreeFrequencyList	frequencyTree.h	/^  long      getSubtreeFrequencyList(TreeNode *node, double *x, int depth, long i);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node, double *x, int depth, long i)
getSubtreeInstances	frequencyTree.cc	/^long FrequencyTree::getSubtreeInstances(TreeNode *node, char **x, int depth, long i)$/;"	f	class:FrequencyTree	signature:(TreeNode *node, char **x, int depth, long i)
getSubtreeInstances	frequencyTree.h	/^  long      getSubtreeInstances(TreeNode *node, char **x, int depth, long i);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node, char **x, int depth, long i)
getSubtreeInstancesAndFrequencies	frequencyTree.cc	/^long FrequencyTree::getSubtreeInstancesAndFrequencies(TreeNode *node, char **x, double *f, int depth, long i)$/;"	f	class:FrequencyTree	signature:(TreeNode *node, char **x, double *f, int depth, long i)
getSubtreeInstancesAndFrequencies	frequencyTree.h	/^  long      getSubtreeInstancesAndFrequencies(TreeNode *node, char **x, double *f, int depth, long i);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node, char **x, double *f, int depth, long i)
getSubtreeInstancesAndFrequenciesWithSplit	frequencyTree.cc	/^long FrequencyTree::getSubtreeInstancesAndFrequenciesWithSplit(TreeNode *node, char **x, double *f, int l, int depth, long i)$/;"	f	class:FrequencyTree	signature:(TreeNode *node, char **x, double *f, int l, int depth, long i)
getSubtreeInstancesAndFrequenciesWithSplit	frequencyTree.h	/^  long      getSubtreeInstancesAndFrequenciesWithSplit(TreeNode *node, char **x, double *f, int l, int depth, long i);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node, char **x, double *f, int l, int depth, long i)
getSubtreeNumInstances	frequencyTree.h	/^  long      getSubtreeNumInstances(TreeNode *node);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node)
getSubtreeNumInstancesWithSplit	frequencyTree.cc	/^long FrequencyTree::getSubtreeNumInstancesWithSplit(TreeNode *node, int l)$/;"	f	class:FrequencyTree	signature:(TreeNode *node, int l)
getSubtreeNumInstancesWithSplit	frequencyTree.h	/^  long      getSubtreeNumInstancesWithSplit(TreeNode *node, int l);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node, int l)
getTime	utils.cc	/^double getTime()$/;"	f	signature:()
getTime	utils.h	/^double getTime();$/;"	p	signature:()
getValue	decisionGraph.cc	/^Value DecisionGraph::getValue(LabeledTreeNode *x, char which)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x, char which)
getValue	decisionGraph.h	/^  Value           getValue(LabeledTreeNode *x, char which);$/;"	p	class:DecisionGraph	access:public	signature:(LabeledTreeNode *x, char which)
getValueDescription	getFileArgs.h	/^  GetValueDescription *getValueDescription;$/;"	m	struct:__anon4	access:public
globalDivisor	frequencyTree.h	/^  double     globalDivisor;$/;"	m	class:FrequencyTree	access:private
globalK	frequencyTree.h	/^  long       globalK;$/;"	m	class:FrequencyTree	access:private
goToMarker	stack.cc	/^int IntStack::goToMarker()$/;"	f	class:IntStack	signature:()
goToMarker	stack.h	/^  int goToMarker();$/;"	p	class:IntStack	access:public	signature:()
goodBBs	fitness.h	/^  GoodBBs           *goodBBs;$/;"	m	struct:__anon13	access:public
goodBBs	individual.h	/^  double goodBBs;$/;"	m	class:Individual	access:public
goodBBs	statistics.h	/^    float      goodBBs;$/;"	m	struct:__anon11	access:public
goodBBs	userBOA.h	/^	typeGoodBBs	*goodBBs;$/;"	m	struct:tagFitnessDefinition	access:public
groupIndex	hBoa.h	/^  int            **groupIndex;$/;"	m	struct:__anon5	access:public
groupSize	hBoa.h	/^  int             *groupSize;$/;"	m	struct:__anon5	access:public
guidanceTreshold	statistics.h	/^    double guidanceTreshold;$/;"	m	struct:__anon10	access:public
hBOALIBDIR	user/Makefile	/^hBOALIBDIR	= ..$/;"	m
hBOAmain	hBOAmain.cc	/^int hBOAmain(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
hBOAmain	userBOA.h	/^int hBOAmain(int argc, char **argv);$/;"	p	signature:(int argc, char **argv)
hBoaGetPenalty	hBoa.cc	/^double hBoaGetPenalty(int from, int to)$/;"	f	signature:(int from, int to)
hamming	distance.cc	/^int hamming(char *x, char *y, int n)$/;"	f	signature:(char *x, char *y, int n)
hamming	distance.h	/^int hamming(char *x, char *y, int n);$/;"	p	signature:(char *x, char *y, int n)
hammingDistance	individual.cc	/^double hammingDistance(Individual *a, Individual *b, int n)$/;"	f	signature:(Individual *a, Individual *b, int n)
hammingDistance	individual.h	/^double hammingDistance(Individual *a, Individual *b, int n);$/;"	p	signature:(Individual *a, Individual *b, int n)
hboaGetPenalty	hBoa.h	/^double hboaGetPenalty(int from, int to);$/;"	p	signature:(int from, int to)
hboaRecombination	hBoa.cc	/^int hboaRecombination(Population *parents, Population *children, long M, RecombinationParams *params)$/;"	f	signature:(Population *parents, Population *children, long M, RecombinationParams *params)
hboaRecombination	hBoa.h	/^int hboaRecombination(Population *parents, $/;"	p	signature:(Population *parents, Population *children, long M, RecombinationParams *params)
hboaRecomputeAdditionGain	hBoa.h	/^int hboaRecomputeAdditionGain(int from,$/;"	p	signature:(int from, int to, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
hboaRecomputeAdditionGains	hBoa.cc	/^int hboaRecomputeAdditionGains(int from,$/;"	f	signature:(int from, int to, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
hboaRecomputeAdditionGains	hBoa.h	/^int hboaRecomputeAdditionGains(int from,$/;"	p	signature:(int from, int to, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
hboaRecomputeJointGains	hBoa.cc	/^int hboaRecomputeJointGains(int from,$/;"	f	signature:(int from, int to, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
hboaRecomputeJointGains	hBoa.h	/^int hboaRecomputeJointGains(int from,$/;"	p	signature:(int from, int to, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
hboaRecomputeNodeContribution	hBoa.h	/^int hboaRecomputeNodeContribution(int i, GroupInformation *groupInformation, AcyclicOrientedGraph *G, Population *parents);$/;"	p	signature:(int i, GroupInformation *groupInformation, AcyclicOrientedGraph *G, Population *parents)
hboaRecomputeRemovalGain	hBoa.h	/^int hboaRecomputeRemovalGain(int from,$/;"	p	signature:(int from, int to, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
hboaRecomputeRemovalGains	hBoa.cc	/^int hboaRecomputeRemovalGains(int from,$/;"	f	signature:(int from, int to, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
hboaRecomputeRemovalGains	hBoa.h	/^int hboaRecomputeRemovalGains(int from,$/;"	p	signature:(int from, int to, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
hboaRecomputeReversalGain	hBoa.h	/^int hboaRecomputeReversalGain(int from,$/;"	p	signature:(int from, int to, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
hboaRecomputeReversalGains	hBoa.cc	/^int hboaRecomputeReversalGains(int from,$/;"	f	signature:(int from, int to, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
hboaRecomputeReversalGains	hBoa.h	/^int hboaRecomputeReversalGains(int from,$/;"	p	signature:(int from, int to, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, Population *population, RecombinationParams *params)
hboaUpdateAfterAddition	hBoa.cc	/^int hboaUpdateAfterAddition(int newFrom,$/;"	f	signature:(int newFrom, int newTo, GroupInformation *groupInformation, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, RecombinationParams *params)
hboaUpdateAfterAddition	hBoa.h	/^int hboaUpdateAfterAddition(int newFrom, $/;"	p	signature:(int newFrom, int newTo, GroupInformation *groupInformation, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, RecombinationParams *params)
hboaUpdateAfterJoint	hBoa.cc	/^int hboaUpdateAfterJoint(int newFrom,$/;"	f	signature:(int newFrom, int newTo, GroupInformation *groupInformation, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, RecombinationParams *params)
hboaUpdateAfterJoint	hBoa.h	/^int hboaUpdateAfterJoint(int newFrom, $/;"	p	signature:(int newFrom, int newTo, GroupInformation *groupInformation, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, RecombinationParams *params)
hboaUpdateAfterRemoval	hBoa.cc	/^int hboaUpdateAfterRemoval(int newFrom,$/;"	f	signature:(int newFrom, int newTo, GroupInformation *groupInformation, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, RecombinationParams *params)
hboaUpdateAfterRemoval	hBoa.h	/^int hboaUpdateAfterRemoval(int newFrom, $/;"	p	signature:(int newFrom, int newTo, GroupInformation *groupInformation, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, RecombinationParams *params)
hboaUpdateAfterReversal	hBoa.cc	/^int hboaUpdateAfterReversal(int newFrom,$/;"	f	signature:(int newFrom, int newTo, GroupInformation *groupInformation, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, RecombinationParams *params)
hboaUpdateAfterReversal	hBoa.h	/^int hboaUpdateAfterReversal(int newFrom, $/;"	p	signature:(int newFrom, int newTo, GroupInformation *groupInformation, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, RecombinationParams *params)
help	hBOAmain.cc	/^int help(char what) {$/;"	f	signature:(char what)
hi	dicretize.h	/^  double *hi;$/;"	m	class:Discretization	access:private
hi	discretization.h	/^  double **lo, **hi;$/;"	m	class:Discretization	access:public
hierarchicalDeceptiveTrap3	fitness.cc	/^double hierarchicalDeceptiveTrap3(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
hierarchicalDeceptiveTrap3	fitness.cc	/^static double hierarchicalDeceptiveTrap3(char *x, int numDiscrete, double *c, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous)
hierarchicalTrap3	fitness.cc	/^double hierarchicalTrap3(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
hierarchicalTrap3	fitness.cc	/^static double hierarchicalTrap3(char *x, int numDiscrete, double *c, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous)
httpEvaluator	fitness.cc	/^double httpEvaluator(char *x, int numDiscrete, double *continuous, int numContinous) $/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinous)
httpEvaluator	fitness.cc	/^static double httpEvaluator(char *x, int numDiscrete, double *continuous, int numContinous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *continuous, int numContinous)
iPower	mymath.cc	/^int iPower(int x, int a)$/;"	f	signature:(int x, int a)
iPower	mymath.h	/^int iPower(int x, int a);  $/;"	p	signature:(int x, int a)
iabs	mymath.cc	/^int iabs(int x)$/;"	f	signature:(int x)
iabs	mymath.h	/^int iabs(int x);$/;"	p	signature:(int x)
identifier	getFileArgs.h	/^  char *identifier;$/;"	m	struct:__anon4	access:public
index	discretization.h	/^  long **index;$/;"	m	class:Discretization	access:private
index	hBoa.h	/^  int            **index;$/;"	m	struct:__anon5	access:public
index2	discretization.h	/^  long ***index2;$/;"	m	class:Discretization	access:private
indexSize	hBoa.h	/^  int             *indexSize;$/;"	m	struct:__anon5	access:public
indexedBinaryToInt	binary.h	/^inline int indexedBinaryToInt(char *x, int *index, int n)$/;"	f	signature:(char *x, int *index, int n)
indexedMatch	hBoa.cc	/^int indexedMatch(char *x, char *y, int *index, int n)$/;"	f	signature:(char *x, char *y, int *index, int n)
indexedMatch	hBoa.h	/^int indexedMatch(char *x, char *y, int *index, int n);$/;"	p	signature:(char *x, char *y, int *index, int n)
individual	population.h	/^  Individual *individual;$/;"	m	struct:__anon8	access:public
init	fitness.h	/^  InitFitness       *init;$/;"	m	struct:__anon13	access:public
init	reordering.h	/^  InitReorder     *init;$/;"	m	struct:__anon12	access:public
initRealValuedFitness	fitness.cc	/^int initRealValuedFitness(double *params)$/;"	f	signature:(double *params)
initRealValuedFitness	fitness.h	/^int initRealValuedFitness(double *params);$/;"	p	signature:(double *params)
initRunLog	statistics.cc	/^int initRunLog(RunLog *runLog, int numRuns)$/;"	f	signature:(RunLog *runLog, int numRuns)
initRunLog	statistics.h	/^int initRunLog(RunLog *runLog, int numRuns);$/;"	p	signature:(RunLog *runLog, int numRuns)
initSelectionBoltzmann	select.cc	/^int initSelectionBoltzmann(double new_beta)$/;"	f	signature:(double new_beta)
initSelectionBoltzmann	select.h	/^int initSelectionBoltzmann(double new_beta);$/;"	p	signature:(double new_beta)
initSelectionTournament	select.cc	/^int initSelectionTournament(int tournamentSize_)$/;"	f	signature:(int tournamentSize_)
initSelectionTournament	select.h	/^int initSelectionTournament(int tournamentSize_);$/;"	p	signature:(int tournamentSize_)
initSelectionTresholding	select.h	/^int initSelectionTresholding(int n_,int t);$/;"	p	signature:(int n_,int t)
injectGoodGuys	recombination.h	/^  char          injectGoodGuys;$/;"	m	struct:__anon2	access:public
injectTheGood	fitness.h	/^  InjectGoodGuys    *injectTheGood;$/;"	m	struct:__anon13	access:public
instanceFrequency	frequencyDecisionGraph.h	/^  double instanceFrequency(int *index, char *x, int n);$/;"	p	class:FrequencyDecisionGraph	access:private	signature:(int *index, char *x, int n)
instances	hBoa.h	/^  char          ***instances;$/;"	m	struct:__anon5	access:public
intRand	random.cc	/^int intRand(int max)$/;"	f	signature:(int max)
intRand	random.h	/^int intRand(int max);$/;"	p	signature:(int max)
intToBinary	binary.cc	/^int intToBinary(char *x, int number, int numBits)$/;"	f	signature:(char *x, int number, int numBits)
intToBinary	binary.h	/^int intToBinary(char *x, int number, int numBits);$/;"	p	signature:(char *x, int number, int numBits)
invLog2	mymath.cc	4;"	d	file:
invLog3	mymath.cc	5;"	d	file:
isArg	args.cc	/^int isArg(char *s, int argc, char **argv)$/;"	f	signature:(char *s, int argc, char **argv)
isArg	args.h	/^int isArg(char *s, int argc, char **argv);$/;"	p	signature:(char *s, int argc, char **argv)
isBest	fitness.h	/^  IsBest            *isBest;$/;"	m	struct:__anon13	access:public
isBest	userBOA.h	/^	typeIsBest	*isBest;$/;"	m	struct:tagFitnessDefinition	access:public
isBestIndividual	individual.cc	/^int isBestIndividual(Individual *individual, Fitness *fitness, int numDiscrete, int numContinuous, int type)$/;"	f	signature:(Individual *individual, Fitness *fitness, int numDiscrete, int numContinuous, int type)
isBestIndividual	individual.h	/^int isBestIndividual(Individual *individual, Fitness *fitness, int numDiscrete, int numContinuous, int type);$/;"	p	signature:(Individual *individual, Fitness *fitness, int numDiscrete, int numContinuous, int type)
isFloat	args.cc	/^int isFloat(char *s)$/;"	f	signature:(char *s)
isInt	args.cc	/^int isInt(char *s)$/;"	f	signature:(char *s)
isLeaf	frequencyTree.cc	12;"	d	file:
isPriorNetworkDefined	priors.cc	/^char isPriorNetworkDefined()$/;"	f	signature:()
isPriorNetworkDefined	priors.h	/^char isPriorNetworkDefined();$/;"	p	signature:()
isRealValued	fitness.cc	/^char isRealValued()$/;"	f	signature:()
isRealValued	fitness.h	/^char isRealValued();$/;"	p	signature:()
iterator	decisionGraph.h	/^  LabeledTreeNode *iterator;$/;"	m	class:DecisionGraph	access:private
iteratorFollowInstance	decisionGraph.cc	/^int DecisionGraph::iteratorFollowInstance(char *x)$/;"	f	class:DecisionGraph	signature:(char *x)
iteratorFollowInstance	decisionGraph.h	/^  int              iteratorFollowInstance(char *x);$/;"	p	class:DecisionGraph	access:public	signature:(char *x)
iteratorFollowInstanceFromRoot	decisionGraph.cc	/^int DecisionGraph::iteratorFollowInstanceFromRoot(char *x)$/;"	f	class:DecisionGraph	signature:(char *x)
iteratorFollowInstanceFromRoot	decisionGraph.h	/^  int              iteratorFollowInstanceFromRoot(char *x);$/;"	p	class:DecisionGraph	access:public	signature:(char *x)
iteratorGoLeft	decisionGraph.cc	/^int DecisionGraph::iteratorGoLeft()$/;"	f	class:DecisionGraph	signature:()
iteratorGoLeft	decisionGraph.h	/^  int              iteratorGoLeft();$/;"	p	class:DecisionGraph	access:public	signature:()
iteratorGoRight	decisionGraph.cc	/^int DecisionGraph::iteratorGoRight()$/;"	f	class:DecisionGraph	signature:()
iteratorGoRight	decisionGraph.h	/^  int              iteratorGoRight();$/;"	p	class:DecisionGraph	access:public	signature:()
iteratorGoTo	decisionGraph.cc	/^int DecisionGraph::iteratorGoTo(LabeledTreeNode *x)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x)
iteratorGoTo	decisionGraph.h	/^  int              iteratorGoTo(LabeledTreeNode *x);$/;"	p	class:DecisionGraph	access:public	signature:(LabeledTreeNode *x)
iteratorGoToRoot	decisionGraph.cc	/^int DecisionGraph::iteratorGoToRoot()$/;"	f	class:DecisionGraph	signature:()
iteratorGoToRoot	decisionGraph.h	/^  int              iteratorGoToRoot();$/;"	p	class:DecisionGraph	access:public	signature:()
joinGroupIndexes	hBoa.cc	/^int joinGroupIndexes(GroupInformation *groupInformation, int *index, int n, int *destination)$/;"	f	signature:(GroupInformation *groupInformation, int *index, int n, int *destination)
joinGroupIndexes	hBoa.h	/^int joinGroupIndexes(GroupInformation *groupInformation, int *index, int n, int *destination);$/;"	p	signature:(GroupInformation *groupInformation, int *index, int n, int *destination)
joinGroupIndexes	index.cc	/^int joinGroupIndexes(int **groupIndex, int *groupSize, int *index, int n, int *destination)$/;"	f	signature:(int **groupIndex, int *groupSize, int *index, int n, int *destination)
joinGroupIndexes	index.h	/^int joinGroupIndexes(int **groupIndex, int *groupSize, int *index, int n, int *destination);$/;"	p	signature:(int **groupIndex, int *groupSize, int *index, int n, int *destination)
joinGroups	hBoa.cc	/^int joinGroups( int a,$/;"	f	signature:( int a, int b, GroupInformation *groupInformation, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, AcyclicOrientedGraph *newG, Population *P)
joinGroups	hBoa.h	/^int joinGroups( int a, $/;"	p	signature:( int a, int b, GroupInformation *groupInformation, OperatorApplicability *operatorApplicability, AcyclicOrientedGraph *G, AcyclicOrientedGraph *newG, Population *P)
joinIndexes	index.cc	/^int joinIndexes(int *index1, int n1, int *index2, int n2, int *destination)$/;"	f	signature:(int *index1, int n1, int *index2, int n2, int *destination)
joinIndexes	index.h	/^int joinIndexes(int *index1, int n1, int *index2, int n2, int *destination);$/;"	p	signature:(int *index1, int n1, int *index2, int n2, int *destination)
joint	hBoa.h	/^  char **joint;$/;"	m	struct:__anon6	access:public
joint	hBoa.h	/^  double **joint;$/;"	m	struct:__anon7	access:public
kMeansClusterPopulation	population.cc	/^int kMeansClusterPopulation(Population *population, int k, int numRestarts, char phenotypic)$/;"	f	signature:(Population *population, int k, int numRestarts, char phenotypic)
kMeansClusterPopulation	population.h	/^int kMeansClusterPopulation(Population *population, int k, int numRestarts, char phenotypic);$/;"	p	signature:(Population *population, int k, int numRestarts, char phenotypic)
label	decisionGraphBoa.h	/^  int   label;$/;"	m	struct:Operator	access:public
label	labeledTreeNode.h	/^  int       label;$/;"	m	class:LabeledTreeNode	access:public
lambdaCommaMju	replace.cc	/^int lambdaCommaMju(Population *population, Population *offspring)$/;"	f	signature:(Population *population, Population *offspring)
lambdaCommaMju	replace.h	/^int lambdaCommaMju(Population *population, Population *offspring);$/;"	p	signature:(Population *population, Population *offspring)
lambdaPlusMju	replace.cc	/^int lambdaPlusMju(Population *population, Population *offspring)$/;"	f	signature:(Population *population, Population *offspring)
lambdaPlusMju	replace.h	/^int lambdaPlusMju(Population *population, Population *offspring);$/;"	p	signature:(Population *population, Population *offspring)
leafIterator	decisionGraph.h	/^  NodeListItem    *leafIterator;$/;"	m	class:DecisionGraph	access:private
leafIteratorNext	decisionGraph.cc	/^int DecisionGraph::leafIteratorNext()$/;"	f	class:DecisionGraph	signature:()
leafIteratorNext	decisionGraph.h	/^  int              leafIteratorNext();$/;"	p	class:DecisionGraph	access:public	signature:()
leafIteratorPrevious	decisionGraph.cc	/^int DecisionGraph::leafIteratorPrevious()$/;"	f	class:DecisionGraph	signature:()
leafIteratorPrevious	decisionGraph.h	/^  int              leafIteratorPrevious();$/;"	p	class:DecisionGraph	access:public	signature:()
leafParentsItem	labeledTreeNode.h	/^  void *leafParentsItem;$/;"	m	class:LabeledTreeNode	access:public
learnDecisionGraphBayesianNetwork	decisionGraphBoa.cc	/^int learnDecisionGraphBayesianNetwork(AcyclicOrientedGraph *G,$/;"	f	signature:(AcyclicOrientedGraph *G, FrequencyDecisionGraph **T, Population *P, RecombinationParams *params)
learnDecisionGraphBayesianNetwork	decisionGraphBoa.h	/^int learnDecisionGraphBayesianNetwork(AcyclicOrientedGraph *G,$/;"	p	signature:(AcyclicOrientedGraph *G, FrequencyDecisionGraph **T, Population *P, RecombinationParams *params)
leaves	decisionGraph.h	/^  NodeListItem    *leaves;$/;"	m	class:DecisionGraph	access:private
leavesItem	labeledTreeNode.h	/^  void *leavesItem;$/;"	m	class:LabeledTreeNode	access:public
left	frequencyTree.h	/^  TreeNode *left;$/;"	m	struct:TreeNode	access:public
left	labeledTreeNode.h	/^  LabeledTreeNode *left;$/;"	m	class:LabeledTreeNode	access:public
leftValue0Array	labeledTreeNode.h	/^  Value *leftValue0Array;$/;"	m	class:LabeledTreeNode	access:public
leftValue1Array	labeledTreeNode.h	/^  Value *leftValue1Array;$/;"	m	class:LabeledTreeNode	access:public
lessThan	select.cc	/^inline int lessThan(Individual a, Individual b, int numDiscrete, int numContinuous)$/;"	f	signature:(Individual a, Individual b, int numDiscrete, int numContinuous)
lineMinimization	includeFiles.h	/^int lineMinimization(double*, double*, int, int, double*);$/;"	p	signature:(double*, double*, int, int, double*)
listSize	frequencyTree.h	/^  int        listSize;$/;"	m	class:FrequencyTree	access:private
lo	dicretize.h	/^  double *lo;$/;"	m	class:Discretization	access:private
lo	discretization.h	/^  double **lo, **hi;$/;"	m	class:Discretization	access:public
load	fitness.h	/^  LoadParameters    *load;$/;"	m	struct:__anon13	access:public
log2	mymath.cc	/^double log2(double x)$/;"	f	signature:(double x)
log2	mymath.h	/^double log2(double x);$/;"	p	signature:(double x)
log3	mymath.cc	/^double log3(double x)$/;"	f	signature:(double x)
log3	mymath.h	/^double log3(double x);$/;"	p	signature:(double x)
logBeta	recombination.h	/^  double        logBeta;$/;"	m	struct:__anon2	access:public
logGain	BDe.cc	/^double logGain(int i, int *parents, int n, Population *P)$/;"	f	signature:(int i, int *parents, int n, Population *P)
logGain	BDe.h	/^double logGain(int i, int *parents, int n, Population *P);$/;"	p	signature:(int i, int *parents, int n, Population *P)
logGamma	decisionGraphBoa.cc	/^double logGamma(long x)$/;"	f	signature:(long x)
logKappa	recombination.h	/^  double        logKappa;$/;"	m	struct:__anon2	access:public
logS	BDe.cc	/^double logS(int i, Population *P, AcyclicOrientedGraph *G)$/;"	f	signature:(int i, Population *P, AcyclicOrientedGraph *G)
logS	BDe.h	/^double logS(int i, Population *P, AcyclicOrientedGraph *G);$/;"	p	signature:(int i, Population *P, AcyclicOrientedGraph *G)
longRand	random.cc	/^long longRand(long max)$/;"	f	signature:(long max)
longRand	random.h	/^long longRand(long max);$/;"	p	signature:(long max)
longToBinary	binary.cc	/^int longToBinary(long a, char *x, char n)$/;"	f	signature:(long a, char *x, char n)
longToBinary	binary.h	/^int longToBinary(long a, char *x, char n);$/;"	p	signature:(long a, char *x, char n)
lsqr	mymath.cc	/^long lsqr(long x)$/;"	f	signature:(long x)
lsqr	mymath.h	/^long lsqr(long x);$/;"	p	signature:(long x)
main	user/run_hBOA.cpp	/^int main(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
mark	graph.h	/^  int  *mark;          \/\/ the array for vertex-marks$/;"	m	class:OrientedGraph	access:private
marker	stack.h	/^  int marker;$/;"	m	class:IntStack	access:private
maxAverageFitness	hBOAmain.cc	/^double maxAverageFitness;  \/\/ stop when fitness exceeds maxAverageFitness (-1...ignore)$/;"	v
maxDepth	decisionGraphBoa.cc	/^int  maxDepth;$/;"	v
maxFC	hBOAmain.cc	/^long maxFC;                \/\/ maximal number of fitness calls$/;"	v
maxFailures	hBOAmain.cc	/^int maxFailures;           \/\/ stop when the number of failed runs reaches this value$/;"	v
maxGroupSize	hBoa.h	/^  int              maxGroupSize;$/;"	m	struct:__anon5	access:public
maxGroupSize	recombination.h	/^  int           maxGroupSize;$/;"	m	struct:__anon2	access:public
maxIncoming	recombination.h	/^  int    maxIncoming;$/;"	m	struct:__anon2	access:public
maxOptimal	hBOAmain.cc	/^double maxOptimal;         \/\/ stop when the rate of optimal and nonoptimal individuals reaches this value$/;"	v
maxOptimalReached	statistics.h	/^    char       maxOptimalReached;$/;"	m	struct:__anon11	access:public
maxOptimalReachedIn	statistics.h	/^    long       maxOptimalReachedIn;$/;"	m	struct:__anon11	access:public
maxSize	stack.h	/^  int maxSize;$/;"	m	class:IntStack	access:private
mdlComputeAdditionGains	mdl.cc	/^int mdlComputeAdditionGains( int i, $/;"	f	signature:( int i, double oldContribution, double **additionGain, int *updateIdx, int numUpdated, int *parentList, int numParents, Population *P, RecombinationParams *params)
mdlComputeAdditionGains	mdl.h	/^int mdlComputeAdditionGains( int i, $/;"	p	signature:( int i, double oldContribution, double **gain, int *updateIdx, int numUpdated, int *parentList, int numParents, Population *P, RecombinationParams *params)
mdlComputeGroupAdditionGains	mdl.cc	/^int mdlComputeGroupAdditionGains( int i,$/;"	f	signature:( int i, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, AcyclicOrientedGraph *G, int *updateIdx, int numUpdated, int *parentList, int numParents, Population *P, RecombinationParams *params)
mdlComputeGroupAdditionGains	mdl.h	/^int mdlComputeGroupAdditionGains( int i,$/;"	p	signature:( int i, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, AcyclicOrientedGraph *G, int *updateIdx, int numUpdated, int *parentList, int numParents, Population *P, RecombinationParams *params)
mdlComputeGroupAdditionGainsBackup	mdl.cc	/^int mdlComputeGroupAdditionGainsBackup( int i,$/;"	f	signature:( int i, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, AcyclicOrientedGraph *G, int *updateIdx, int numUpdated, int *parentList, int numParents, Population *P, RecombinationParams *params)
mdlComputeGroupContribution	mdl.cc	/^double mdlComputeGroupContribution(int i, $/;"	f	signature:(int i, int numVars, GroupInformation *groupInformation, AcyclicOrientedGraph *G, Population *P, RecombinationParams *params)
mdlComputeGroupContribution	mdl.h	/^double mdlComputeGroupContribution(int i, $/;"	p	signature:(int i, int numVars, GroupInformation *groupInformation, AcyclicOrientedGraph *G, Population *P, RecombinationParams *params)
mdlComputeGroupJointGains	mdl.cc	/^int mdlComputeGroupJointGains( int i,$/;"	f	signature:( int i, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, int *updateIdx, int numUpdated, int *parentList, int numParents, Population *P, RecombinationParams *params)
mdlComputeGroupRemovalGains	mdl.cc	/^int mdlComputeGroupRemovalGains( int i,$/;"	f	signature:( int i, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, AcyclicOrientedGraph *G, int *parentList, int numParents, Population *P, RecombinationParams *params)
mdlComputeGroupRemovalGains	mdl.h	/^int mdlComputeGroupRemovalGains( int i,$/;"	p	signature:( int i, int numVars, GroupInformation *groupInformation, OperatorGain *operatorGain, AcyclicOrientedGraph *G, int *parentList, int numParents, Population *P, RecombinationParams *params)
mdlComputeIsolatedNodeContribution	mdl.cc	/^double mdlComputeIsolatedNodeContribution(int i, Population *P)$/;"	f	signature:(int i, Population *P)
mdlComputeIsolatedNodeContribution	mdl.h	/^double mdlComputeIsolatedNodeContribution(int i, Population *P);$/;"	p	signature:(int i, Population *P)
mdlComputeRemovalGains	mdl.cc	/^int mdlComputeRemovalGains( int i, $/;"	f	signature:( int i, double oldContribution, double **removalGain, int *parentList, int numParents, Population *P, RecombinationParams *params)
mdlComputeRemovalGains	mdl.h	/^int mdlComputeRemovalGains( int i, $/;"	p	signature:( int i, double oldContribution, double **removalGain, int *parentList, int numParents, Population *P, RecombinationParams *params)
merge	decisionGraph.cc	/^int DecisionGraph::merge(LabeledTreeNode *x, LabeledTreeNode *y)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
merge	decisionGraph.h	/^  int merge(LabeledTreeNode *x, LabeledTreeNode *y);$/;"	p	class:DecisionGraph	access:public	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
merge	frequencyDecisionGraph.cc	/^int FrequencyDecisionGraph::merge(LabeledTreeNode *x, LabeledTreeNode *y)$/;"	f	class:FrequencyDecisionGraph	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
merge	frequencyDecisionGraph.h	/^  int merge(LabeledTreeNode *x, LabeledTreeNode *y);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
metric	boa.cc	/^MetricDescription *metric;$/;"	v
metricDescription	boa.cc	/^MetricDescription metricDescription[3] = {$/;"	v
metricN	hBOAmain.cc	/^int metricN;             \/\/ a metric to use$/;"	v
metricToUse	decisionGraphBoa.cc	/^int metricToUse;$/;"	v
minHamm	select.cc	/^int minHamm;$/;"	v
mnbrak	includeFiles.h	/^void mnbrak(double*, double*, double*, double*, double*, double*, $/;"	p	signature:(double*, double*, double*, double*, double*, double*, int, int, double*, double*, double*, int*)
moreThan	select.cc	/^inline int moreThan(Individual a, Individual b, int numDiscrete, int numContinuous)$/;"	f	signature:(Individual a, Individual b, int numDiscrete, int numContinuous)
mutation	individual.h	/^  double *mutation;$/;"	m	class:Individual	access:public
mutationRate	recombination.h	/^  double mutationRate;$/;"	m	struct:__anon2	access:public
myGeneralTrap	user/run_hBOA.cpp	/^double myGeneralTrap(char *x, int k, double leftPeak, double rightPeak) {$/;"	f	signature:(char *x, int k, double leftPeak, double rightPeak)
myGeneralTrap	user/run_hBOA.cpp	/^double myGeneralTrap(char *x, int k, double leftPeak, double rightPeak);$/;"	p	file:	signature:(char *x, int k, double leftPeak, double rightPeak)
myNode	frequencyDecisionGraph.h	/^  LabeledTreeNode** myNode;$/;"	m	class:FrequencyDecisionGraph	access:private
myOneMax	user/run_hBOA.cpp	/^double myOneMax(int iLength, char *pChromosome) {$/;"	f	signature:(int iLength, char *pChromosome)
myOneMax	user/run_hBOA.cpp	/^double myOneMax(int iLength, char *pChromosome);$/;"	p	file:	signature:(int iLength, char *pChromosome)
myOneMaxGoodBBs	user/run_hBOA.cpp	/^double myOneMaxGoodBBs(int iLength, char *pChromosome) {$/;"	f	signature:(int iLength, char *pChromosome)
myOneMaxGoodBBs	user/run_hBOA.cpp	/^double myOneMaxGoodBBs(int iLength, char *pChromosome);$/;"	p	file:	signature:(int iLength, char *pChromosome)
myOneMaxIsBest	user/run_hBOA.cpp	/^char myOneMaxIsBest(int iLength, char *pChromosome) {$/;"	f	signature:(int iLength, char *pChromosome)
myOneMaxIsBest	user/run_hBOA.cpp	/^char myOneMaxIsBest(int iLength, char *pChromosome);$/;"	p	file:	signature:(int iLength, char *pChromosome)
myPosition	frequencyDecisionGraph.h	/^  int         myPosition;$/;"	m	class:FrequencyDecisionGraph	access:private
mySphere	user/run_hBOA.cpp	/^double mySphere(int iLength, char *pChromosome) { int iCount;$/;"	f	signature:(int iLength, char *pChromosome)
mySphere	user/run_hBOA.cpp	/^double mySphere(int iLength, char *pChromosome);$/;"	p	file:	signature:(int iLength, char *pChromosome)
myTrap4	user/run_hBOA.cpp	/^double myTrap4(int iLength, char *pChromosome) {$/;"	f	signature:(int iLength, char *pChromosome)
myTrap4	user/run_hBOA.cpp	/^double myTrap4(int iLength, char *pChromosome);$/;"	p	file:	signature:(int iLength, char *pChromosome)
myhDeceptive	user/run_hBOA.cpp	/^double myhDeceptive(int iLength, char *pChromosome) {$/;"	f	signature:(int iLength, char *pChromosome)
myhDeceptive	user/run_hBOA.cpp	/^double myhDeceptive(int iLength, char *pChromosome);$/;"	p	file:	signature:(int iLength, char *pChromosome)
myhTrap	user/run_hBOA.cpp	/^double myhTrap(int iLength, char *pChromosome) {$/;"	f	signature:(int iLength, char *pChromosome)
myhTrap	user/run_hBOA.cpp	/^double myhTrap(int iLength, char *pChromosome);$/;"	p	file:	signature:(int iLength, char *pChromosome)
n	arrays.h	/^    int n;$/;"	m	class:CoupleArray	access:private
n	dicretize.h	/^  int      n;$/;"	m	class:Discretization	access:private
n	frequencyTree.h	/^  int        n;$/;"	m	class:FrequencyTree	access:private
n	population.h	/^  int  n;$/;"	m	struct:__anon8	access:public
newNode	decisionGraph.h	/^  LabeledTreeNode *newNode();$/;"	p	class:DecisionGraph	access:protected	signature:()
newedge	fitness.cc	29;"	d	file:
next	decisionGraph.h	/^  NodeListItem *next;$/;"	m	struct:NodeListItem	access:public
nn	select.cc	/^int nn;$/;"	v
noString	getFileArgs.cc	/^char *noString = "No";$/;"	v
node	decisionGraphBoa.h	/^  LabeledTreeNode *node;$/;"	m	struct:Operator	access:public
node1	fitness.cc	/^int *node1;$/;"	v
node2	decisionGraphBoa.h	/^  LabeledTreeNode *node2;$/;"	m	struct:Operator	access:public
node2	fitness.cc	/^int *node2;$/;"	v
nodeContribution	decisionGraphBoa.cc	/^double nodeContribution(LabeledTreeNode *x, long N)$/;"	f	signature:(LabeledTreeNode *x, long N)
nodeContribution	decisionGraphBoa.h	/^double nodeContribution(LabeledTreeNode *x, long N);$/;"	p	signature:(LabeledTreeNode *x, long N)
normalOrdering	reordering.cc	/^int normalOrdering(int n, double *params)$/;"	f	signature:(int n, double *params)
normalOrdering	reordering.h	/^int normalOrdering(int n, double *params);$/;"	p	signature:(int n, double *params)
notConnected	graph.cc	/^int OrientedGraph::notConnected(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
notConnected	graph.h	/^  int notConnected(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
notConnected	graph.h	/^  int notConnected(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
notEmpty	stack.cc	/^int IntStack::notEmpty()$/;"	f	class:IntStack	signature:()
notEmpty	stack.h	/^  int notEmpty();$/;"	p	class:IntStack	access:public	signature:()
numAppliedMerges	decisionGraphBoa.cc	/^long numAppliedSplits,numAppliedMerges;$/;"	v
numAppliedSplits	decisionGraphBoa.cc	/^long numAppliedSplits,numAppliedMerges;$/;"	v
numBins	discretization.h	/^  int numBins;$/;"	m	class:Discretization	access:public
numClusters	recombination.h	/^  int    numClusters;$/;"	m	struct:__anon2	access:public
numContinuous	discretization.h	/^  int numContinuous;$/;"	m	class:Discretization	access:public
numContinuous	hBOAmain.cc	/^int numContinuous;         \/\/ number of continuous variables $/;"	v
numContinuous	population.h	/^  int  numContinuous;$/;"	m	struct:__anon8	access:public
numContinuous	statistics.h	/^    int        numContinuous;$/;"	m	struct:__anon11	access:public
numDiscrete	discretization.h	/^  int numDiscrete;$/;"	m	class:Discretization	access:public
numDiscrete	hBOAmain.cc	/^int numDiscrete;           \/\/ number of discrete variables (not including the continuous variables)$/;"	v
numDiscrete	population.h	/^  int  numDiscrete;$/;"	m	struct:__anon8	access:public
numDiscrete	statistics.h	/^    int        numDiscrete;$/;"	m	struct:__anon11	access:public
numEdges	fitness.cc	/^int numEdges;$/;"	v
numFitness	fitness.cc	21;"	d	file:
numGroups	hBoa.h	/^  int              numGroups;$/;"	m	struct:__anon5	access:public
numIn	graph.h	/^  int  *numIn;         \/\/ the number of incoming vertices$/;"	m	class:OrientedGraph	access:private
numInstances	hBoa.h	/^  int             *numInstances;$/;"	m	struct:__anon5	access:public
numLeaves	decisionGraph.h	/^  int              numLeaves;$/;"	m	class:DecisionGraph	access:private
numLeaves	frequencyTree.h	/^  long       numLeaves;$/;"	m	class:FrequencyTree	access:private
numNodes	fitness.cc	/^int numNodes;$/;"	v
numOptima	fitness.cc	/^int numOptima;$/;"	v
numOptimal	population.h	/^  long numOptimal;$/;"	m	struct:__anon8	access:public
numOut	graph.h	/^  int  *numOut;        \/\/ the number of outcoming vertices$/;"	m	class:OrientedGraph	access:private
numParents	labeledTreeNode.h	/^  int             numParents;$/;"	m	class:LabeledTreeNode	access:public
numPriorNetworkSourceDescriptions	priors.cc	11;"	d	file:
numRecombinations	recombination.cc	9;"	d	file:
numReordering	reordering.cc	7;"	d	file:
numRestarts	recombination.h	/^  int    numRestarts;$/;"	m	struct:__anon2	access:public
numRuns	hBOAmain.cc	/^int numRuns;                \/\/ the number of runs of algorithm to perform$/;"	v
numSubtrees	frequencyTree.h	/^  int             numSubtrees;$/;"	m	struct:TreeSplit	access:public
offspringPercentage	hBOAmain.cc	/^double offspringPercentage; \/\/ size of offspring in % of N$/;"	v
offspringSize	hBOAmain.cc	/^long offspringSize;        \/\/ size of offspring$/;"	v
oneTime	hBOAmain.cc	/^int oneTime() {$/;"	f	signature:()
oneTime	hBOAmain.h	/^int oneTime();$/;"	p	signature:()
onemax	fitness.cc	/^double onemax(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
onemax	fitness.cc	/^static double onemax(char *x, int numDiscrete, double *c, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous)
onemaxGoodBBs	fitness.cc	/^double onemaxGoodBBs(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
onemaxGoodBBs	fitness.cc	/^static double onemaxGoodBBs(char *x, int numDiscrete, double *c, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous)
operator <	individual.h	/^  char operator< (Individual x)$/;"	f	class:Individual	access:public	signature:(Individual x)
operator <=	individual.h	/^  char operator<= (Individual x)$/;"	f	class:Individual	access:public	signature:(Individual x)
operator ==	individual.h	/^  char operator== (Individual x)$/;"	f	class:Individual	access:public	signature:(Individual x)
operator >	individual.h	/^  char operator> (Individual x)$/;"	f	class:Individual	access:public	signature:(Individual x)
operator >=	individual.h	/^  char operator>= (Individual x)$/;"	f	class:Individual	access:public	signature:(Individual x)
operatorApplicable	decisionGraphBoa.cc	/^int operatorApplicable(Operator *x, AcyclicOrientedGraph *G)$/;"	f	signature:(Operator *x, AcyclicOrientedGraph *G)
operatorApplicable	decisionGraphBoa.h	/^int operatorApplicable(Operator *x, AcyclicOrientedGraph *G);$/;"	p	signature:(Operator *x, AcyclicOrientedGraph *G)
order	reordering.cc	/^int *order;$/;"	v
ordering	statistics.h	/^    double     ordering;$/;"	m	struct:__anon11	access:public
outputFileName	hBOAmain.cc	/^char *outputFileName;    \/\/ name of output file (if any)$/;"	v
outputFitness	statistics.h	/^    FILE *outputFitness;$/;"	m	struct:__anon10	access:public
outputGeneral	hBOAmain.cc	/^FILE *outputGeneral;     \/\/ handle for the file with general info (parameters)$/;"	v
outputUMF	statistics.h	/^    FILE *outputUMF;$/;"	m	struct:__anon10	access:public
p	frequencyDecisionGraph.h	/^  Population *p;$/;"	m	class:FrequencyDecisionGraph	access:private
paramFile	hBOAmain.cc	/^char *paramFile;         \/\/ name of the file with parameters$/;"	v
params	hBOAmain.cc	/^ParamStruct params[] = {$/;"	v
parent	labeledTreeNode.h	/^  LabeledTreeNode **parent;$/;"	m	class:LabeledTreeNode	access:public
parentIndexSize	hBoa.h	/^  int             *parentIndexSize;$/;"	m	struct:__anon5	access:public
parentLabelCoincidenceVector	labeledTreeNode.h	/^  char *parentLabelCoincidenceVector;$/;"	m	class:LabeledTreeNode	access:public
parentList	graph.h	/^  int  **parentList;    \/\/ the list of parents for each node$/;"	m	class:OrientedGraph	access:private
path	graph.h	/^  char **path;         \/\/ the matrix for maintanance of paths$/;"	m	class:OrientedGraph	access:private
pause	statistics.h	/^    char pause;$/;"	m	struct:__anon10	access:public
peak	fitness.cc	/^double peak(double x, double center, double width, double height)$/;"	f	signature:(double x, double center, double width, double height)
peak	fitness.cc	/^static double peak(double x, double center, double width, double height);$/;"	p	file:	signature:(double x, double center, double width, double height)
penalty	decisionGraphBoa.cc	/^int penalty;$/;"	v
percentM	hBOAmain.cc	/^double percentM;            \/\/ how much percent of N should M be?$/;"	v
phenotypicClustering	recombination.h	/^  char   phenotypicClustering;$/;"	m	struct:__anon2	access:public
pop	stack.cc	/^int IntStack::pop()$/;"	f	class:IntStack	signature:()
pop	stack.h	/^  int pop();$/;"	p	class:IntStack	access:public	signature:()
precomputeCummulativeLogarithms	mymath.cc	/^int precomputeCummulativeLogarithms(long n)$/;"	f	signature:(long n)
precomputeCummulativeLogarithms	mymath.h	/^int precomputeCummulativeLogarithms(long n);$/;"	p	signature:(long n)
precomputedCombine	mymath.cc	/^long   *precomputedCombine;$/;"	v
precomputedCummulativeLogarithm	mymath.cc	/^double *precomputedCummulativeLogarithm;$/;"	v
prepareFiles	statistics.cc	/^int prepareFiles(StatisticsParams *statisticsParams, char *fileRoot, char *fileExtension)$/;"	f	signature:(StatisticsParams *statisticsParams, char *fileRoot, char *fileExtension)
prepareFiles	statistics.h	/^int prepareFiles(StatisticsParams *statisticsParams, char *fileRoot, char *fileExtension );$/;"	p	signature:(StatisticsParams *statisticsParams, char *fileRoot, char *fileExtension )
previous	decisionGraph.h	/^  NodeListItem *previous;$/;"	m	struct:NodeListItem	access:public
print	decisionGraph.cc	/^int DecisionGraph::print(FILE *out)$/;"	f	class:DecisionGraph	signature:(FILE *out)
print	decisionGraph.h	/^  int print(FILE *out);$/;"	p	class:DecisionGraph	access:public	signature:(FILE *out)
printBinary	binary.cc	/^int printBinary(FILE *output, char *x, char n)$/;"	f	signature:(FILE *output, char *x, char n)
printBinary	binary.h	/^int printBinary(FILE *output, char *x, char n);$/;"	p	signature:(FILE *output, char *x, char n)
printCoincidenceMatrix	graph.cc	/^int  OrientedGraph::printCoincidenceMatrix(FILE *out)$/;"	f	class:OrientedGraph	signature:(FILE *out)
printCoincidenceMatrix	graph.h	/^  int printCoincidenceMatrix(FILE *out);$/;"	p	class:OrientedGraph	access:public	signature:(FILE *out)
printIndividual	individual.cc	/^int printIndividual(FILE *output, Individual *individual, int numDiscrete, int numContinuous)$/;"	f	signature:(FILE *output, Individual *individual, int numDiscrete, int numContinuous)
printIndividual	individual.h	/^int printIndividual(FILE *output, Individual *individual, int numDiscrete, int numContinuous);$/;"	p	signature:(FILE *output, Individual *individual, int numDiscrete, int numContinuous)
printNumInArray	graph.cc	/^int  OrientedGraph::printNumInArray(FILE *out)$/;"	f	class:OrientedGraph	signature:(FILE *out)
printNumInArray	graph.h	/^  int printNumInArray(FILE *out);$/;"	p	class:OrientedGraph	access:public	signature:(FILE *out)
printNumOutArray	graph.cc	/^int  OrientedGraph::printNumOutArray(FILE *out)$/;"	f	class:OrientedGraph	signature:(FILE *out)
printNumOutArray	graph.h	/^  int printNumOutArray(FILE *out);$/;"	p	class:OrientedGraph	access:public	signature:(FILE *out)
printParamValues	getFileArgs.cc	/^int printParamValues(FILE *out, ParamStruct params[])$/;"	f	signature:(FILE *out, ParamStruct params[])
printParamValues	getFileArgs.h	/^int printParamValues(FILE *out, ParamStruct params[]);$/;"	p	signature:(FILE *out, ParamStruct params[])
printParamsDescription	getFileArgs.cc	/^int printParamsDescription(FILE *out, ParamStruct params[])$/;"	f	signature:(FILE *out, ParamStruct params[])
printParamsDescription	getFileArgs.h	/^int printParamsDescription(FILE *out, ParamStruct params[]);$/;"	p	signature:(FILE *out, ParamStruct params[])
printPathMatrix	graph.cc	/^int  OrientedGraph::printPathMatrix(FILE *out)$/;"	f	class:OrientedGraph	signature:(FILE *out)
printPathMatrix	graph.h	/^  int printPathMatrix(FILE *out);$/;"	p	class:OrientedGraph	access:public	signature:(FILE *out)
printPopulation	population.cc	/^int printPopulation(FILE *output, Population *population)$/;"	f	signature:(FILE *output, Population *population)
printPopulation	population.h	/^int printPopulation(FILE *output, Population *population);$/;"	p	signature:(FILE *output, Population *population)
priorCoincidence	fitness.cc	/^char **priorCoincidence;$/;"	v
priorConnected	fitness.cc	/^int priorConnected(int i, int j)$/;"	f	signature:(int i, int j)
priorConnected	fitness.h	/^int priorConnected(int i, int j);$/;"	p	signature:(int i, int j)
priorNetwork	recombination.h	/^  char          priorNetwork;$/;"	m	struct:__anon2	access:public
priorNetworkConstructor	priors.cc	/^PriorNetworkConstructor *priorNetworkConstructor=NULL;$/;"	v
priorNetworkDefined	priors.cc	/^char                     priorNetworkDefined=0;$/;"	v
priorNetworkDescriptor	priors.cc	/^char                    *priorNetworkDescriptor=NULL;$/;"	v
priorNetworkSourceDescription	priors.cc	/^PriorNetworkSourceDescription priorNetworkSourceDescription[numPriorNetworkSourceDescriptions] = {$/;"	v
progressReport	hBOAmain.cc	/^void progressReport(char *s) {$/;"	f	signature:(char *s)
proportionOfOnes	fitness.cc	/^double proportionOfOnes(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
proportionOfOnes	fitness.cc	/^static double proportionOfOnes(char *x, int numDiscrete, double *c, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous)
push	stack.cc	/^int IntStack::push(int x)$/;"	f	class:IntStack	signature:(int x)
push	stack.h	/^  int push(int x);$/;"	p	class:IntStack	access:public	signature:(int x)
ran2	ran2.cc	/^float ran2(long *idum)$/;"	f	signature:(long *idum)
ran2	ran2.h	/^float ran2(long *idum);$/;"	p	signature:(long *idum)
ran_seed	rand.h	6;"	d
ranc	rand.h	25;"	d
randSeed	hBOAmain.cc	/^long randSeed;		 \/\/ random seed$/;"	v
randomAllele	ea.cc	16;"	d	file:
randomDigit	individual.cc	9;"	d	file:
rane	rand.h	22;"	d
ranf	rand.h	10;"	d
rani	rand.h	16;"	d
rann	rand.h	19;"	d
ranu	rand.h	13;"	d
readIndividual	individual.cc	/^int readIndividual(FILE *input, Individual *individual, int numDiscrete, int numContinuous)$/;"	f	signature:(FILE *input, Individual *individual, int numDiscrete, int numContinuous)
readIndividual	individual.h	/^int readIndividual(FILE *input, Individual *individual, int numDiscrete, int numContinuous);$/;"	p	signature:(FILE *input, Individual *individual, int numDiscrete, int numContinuous)
realValue	fitness.cc	/^double realValue(char *x, int n)$/;"	f	signature:(char *x, int n)
realValue	fitness.h	/^double realValue(char *x, int n);$/;"	p	signature:(char *x, int n)
realValued	fitness.cc	/^char realValued;$/;"	v
realValuedIsBest	fitness.cc	/^char realValuedIsBest(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double fit)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double fit)
realValuedIsBest	fitness.cc	/^static char realValuedIsBest(char *x, int numDiscrete, double *c, int numContinuous, char type, double f);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous, char type, double f)
reallocateInstanceIndexEntries	labeledTreeNode.h	/^  int reallocateInstanceIndexEntries(int n);$/;"	p	class:LabeledTreeNode	access:public	signature:(int n)
realvalued	fitness.cc	/^double realvalued(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
realvalued	fitness.cc	/^static double realvalued(char *x, int numDiscrete, double *c, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous)
recombination	hBOAmain.cc	/^Recombination *recombination;            \/\/ recombination method$/;"	v
recombination	recombination.h	/^  RecombinationFunction *recombination;$/;"	m	struct:__anon3	access:public
recombinationBoltzmannBeta	recombination.h	/^  double        recombinationBoltzmannBeta;$/;"	m	struct:__anon2	access:public
recombinationInfo	recombination.cc	/^Recombination recombinationInfo[numRecombinations]={$/;"	v
recombinationN	hBOAmain.cc	/^int recombinationN;                      \/\/ number of the used recombination method$/;"	v
recombinationParams	hBOAmain.cc	/^RecombinationParams recombinationParams; \/\/ parameters for recombination$/;"	v
recomputeBoltzmannFrequencies	decisionGraphBoa.cc	/^int recomputeBoltzmannFrequencies(FrequencyDecisionGraph **T,$/;"	f	signature:(FrequencyDecisionGraph **T, Population *P, RecombinationParams *params)
recomputeBoltzmannFrequencies	decisionGraphBoa.h	/^int recomputeBoltzmannFrequencies(FrequencyDecisionGraph **T,$/;"	p	signature:(FrequencyDecisionGraph **T, Population *P, RecombinationParams *params)
recomputeDecisionGraphMergeGains	decisionGraphBoa.cc	/^int recomputeDecisionGraphMergeGains(FrequencyDecisionGraph *t,$/;"	f	signature:(FrequencyDecisionGraph *t, AcyclicOrientedGraph *G, MergeOperator **merge, int *numMerges, int node, int n, long N)
recomputeDecisionGraphMergeGains	decisionGraphBoa.h	/^int recomputeDecisionGraphMergeGains(FrequencyDecisionGraph *t,$/;"	p	signature:(FrequencyDecisionGraph *t, AcyclicOrientedGraph *G, MergeOperator **merge, int *numMerges, int node, int n, long N)
recomputeDecisionGraphSplitGains	decisionGraphBoa.cc	/^int recomputeDecisionGraphSplitGains(FrequencyDecisionGraph *t,$/;"	f	signature:(FrequencyDecisionGraph *t, LabeledTreeNode *x, AcyclicOrientedGraph *G, int maxParents, int node, int n, long N, RecombinationParams *params)
recomputeDecisionGraphSplitGains	decisionGraphBoa.h	/^int recomputeDecisionGraphSplitGains(FrequencyDecisionGraph *t,$/;"	p	signature:(FrequencyDecisionGraph *t, LabeledTreeNode *x, AcyclicOrientedGraph *G, int maxParents, int node, int n, long N, RecombinationParams *params)
recomputeFitnessInfo	population.cc	/^int recomputeFitnessInfo(Population *population, Fitness *fitness)$/;"	f	signature:(Population *population, Fitness *fitness)
recomputeFitnessInfo	population.h	/^int recomputeFitnessInfo(Population *population, Fitness *fitness);$/;"	p	signature:(Population *population, Fitness *fitness)
recomputeNumLeaves	frequencyTree.cc	/^long FrequencyTree::recomputeNumLeaves(TreeNode *node)$/;"	f	class:FrequencyTree	signature:(TreeNode *node)
recomputeNumLeaves	frequencyTree.h	/^  long      recomputeNumLeaves(TreeNode *node);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *node)
recursivePrint	decisionGraph.cc	/^int DecisionGraph::recursivePrint(FILE *out, LabeledTreeNode *x, int shift)$/;"	f	class:DecisionGraph	signature:(FILE *out, LabeledTreeNode *x, int shift)
recursivePrint	decisionGraph.h	/^  int recursivePrint(FILE *out, LabeledTreeNode *x, int shift);$/;"	p	class:DecisionGraph	access:private	signature:(FILE *out, LabeledTreeNode *x, int shift)
reduce	graph.cc	/^int BoundedIncommingEdgesAcyclicOrientedGraph::reduce(int i)$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:(int i)
reduce	graph.h	/^  int reduce(int i);$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:private	signature:(int i)
reduceByIndex	frequencyTree.cc	/^int FrequencyTree::reduceByIndex(TreeNode *source, int *index, int indexLength)$/;"	f	class:FrequencyTree	signature:(TreeNode *source, int *index, int indexLength)
reduceByIndex	frequencyTree.h	/^  int       reduceByIndex(TreeNode *source, int *index, int indexLength);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode *source, int *index, int indexLength)
reduceSubtreeByIndex	frequencyTree.cc	/^int FrequencyTree::reduceSubtreeByIndex(TreeNode **currentNode, TreeNode *sourceTree, int *index, int indexLength, int depth)$/;"	f	class:FrequencyTree	signature:(TreeNode **currentNode, TreeNode *sourceTree, int *index, int indexLength, int depth)
reduceSubtreeByIndex	frequencyTree.h	/^  int       reduceSubtreeByIndex(TreeNode **currentNode, TreeNode *sourceTree, int *index, int indexLength, int depth);$/;"	p	class:FrequencyTree	access:private	signature:(TreeNode **currentNode, TreeNode *sourceTree, int *index, int indexLength, int depth)
reevaluatePopulation	population.cc	/^int reevaluatePopulation(Population *population, Fitness *fitness)$/;"	f	signature:(Population *population, Fitness *fitness)
reevaluatePopulation	population.h	/^int reevaluatePopulation(Population *population, Fitness *fitness);$/;"	p	signature:(Population *population, Fitness *fitness)
removal	hBoa.h	/^  char **removal;$/;"	m	struct:__anon6	access:public
removal	hBoa.h	/^  double **removal;$/;"	m	struct:__anon7	access:public
removeAllEdges	graph.cc	/^int LoudAcyclicOrientedGraph::removeAllEdges()$/;"	f	class:LoudAcyclicOrientedGraph	signature:()
removeAllEdges	graph.cc	/^int OrientedGraph::removeAllEdges()$/;"	f	class:OrientedGraph	signature:()
removeAllEdges	graph.h	/^  int removeAllEdges();$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:()
removeAllEdges	graph.h	/^  int removeAllEdges();$/;"	p	class:OrientedGraph	access:public	signature:()
removeAllMarks	graph.cc	/^int OrientedGraph::removeAllMarks()$/;"	f	class:OrientedGraph	signature:()
removeAllMarks	graph.h	/^  int removeAllMarks();$/;"	p	class:OrientedGraph	access:public	signature:()
removeEdge	graph.cc	/^int LoudAcyclicOrientedGraph::removeEdge(int i, int j)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int i, int j)
removeEdge	graph.cc	/^int OrientedGraph::removeEdge(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
removeEdge	graph.h	/^  int removeEdge(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
removeEdge	graph.h	/^  int removeEdge(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
removeMark	graph.cc	/^int OrientedGraph::removeMark(int i)$/;"	f	class:OrientedGraph	signature:(int i)
removeMark	graph.h	/^  int removeMark(int i);$/;"	p	class:OrientedGraph	access:public	signature:(int i)
reorder	reordering.cc	/^int reorder(char *y, char *x, int n)$/;"	f	signature:(char *y, char *x, int n)
reorder	reordering.h	/^int reorder(char *y, char *x, int n);$/;"	p	signature:(char *y, char *x, int n)
reorderN	hBOAmain.cc	/^int reorderN;              \/\/ the number of reordering operator$/;"	v
reordering	reordering.cc	/^Reordering reordering[numReordering] = {$/;"	v
reorderingParams	hBOAmain.cc	/^double reorderingParams[1]; \/\/ params for reordering operator$/;"	v
replace	hBOAmain.cc	/^Replacement *replace;    \/\/ replacement method$/;"	v
replaceAny	replace.cc	/^int replaceAny(Population *population, Population *offspring)$/;"	f	signature:(Population *population, Population *offspring)
replaceAny	replace.h	/^int replaceAny(Population *population, Population *offspring);$/;"	p	signature:(Population *population, Population *offspring)
replaceIndividual	population.cc	/^int replaceIndividual(Population *population, long i, Individual *individual)$/;"	f	signature:(Population *population, long i, Individual *individual)
replaceIndividual	population.h	/^int replaceIndividual(Population *population, long i, Individual *individual);$/;"	p	signature:(Population *population, long i, Individual *individual)
replaceWorst	replace.cc	/^int replaceWorst(Population *population, Population *offspring)$/;"	f	signature:(Population *population, Population *offspring)
replaceWorst	replace.h	/^int replaceWorst(Population *population, Population *offspring);$/;"	p	signature:(Population *population, Population *offspring)
replacementDesc	replace.cc	/^char *replacementDesc[6] = { "Replace Worst",$/;"	v
replacementN	hBOAmain.cc	/^int replacementN;        \/\/ number of the used replacement method$/;"	v
reset	frequencyTree.cc	/^int FrequencyTree::reset()$/;"	f	class:FrequencyTree	signature:()
reset	frequencyTree.h	/^  int  reset();$/;"	p	class:FrequencyTree	access:public	signature:()
resetFitnessCalls	fitness.cc	/^int resetFitnessCalls(void)$/;"	f	signature:(void)
resetFitnessCalls	fitness.h	/^int resetFitnessCalls(void);$/;"	p	signature:(void)
resetLeafIterator	decisionGraph.cc	/^int DecisionGraph::resetLeafIterator()$/;"	f	class:DecisionGraph	signature:()
resetLeafIterator	decisionGraph.h	/^  int              resetLeafIterator();$/;"	p	class:DecisionGraph	access:public	signature:()
resetOperator	decisionGraphBoa.cc	/^int resetOperator(Operator *x)$/;"	f	signature:(Operator *x)
resetOperator	decisionGraphBoa.h	/^int resetOperator(Operator *x);$/;"	p	signature:(Operator *x)
restrictedTournament	replace.cc	/^int restrictedTournament(Population *population, Population *offspring)$/;"	f	signature:(Population *population, Population *offspring)
restrictedTournament	replace.h	/^int restrictedTournament(Population *population, Population *offspring);$/;"	p	signature:(Population *population, Population *offspring)
reversal	hBoa.h	/^  char **reversal;$/;"	m	struct:__anon6	access:public
reversal	hBoa.h	/^  double **reversal;$/;"	m	struct:__anon7	access:public
reverseEdge	graph.cc	/^int AcyclicOrientedGraph::reverseEdge(int i, int j)$/;"	f	class:AcyclicOrientedGraph	signature:(int i, int j)
reverseEdge	graph.cc	/^int LoudAcyclicOrientedGraph::reverseEdge(int i, int j)$/;"	f	class:LoudAcyclicOrientedGraph	signature:(int i, int j)
reverseEdge	graph.cc	/^int OrientedGraph::reverseEdge(int i, int j)$/;"	f	class:OrientedGraph	signature:(int i, int j)
reverseEdge	graph.h	/^  int reverseEdge(int i, int j);$/;"	p	class:AcyclicOrientedGraph	access:public	signature:(int i, int j)
reverseEdge	graph.h	/^  int reverseEdge(int i, int j);$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:(int i, int j)
reverseEdge	graph.h	/^  int reverseEdge(int i, int j);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int j)
right	frequencyTree.h	/^  TreeNode *right;$/;"	m	struct:TreeNode	access:public
right	labeledTreeNode.h	/^  LabeledTreeNode *right;$/;"	m	class:LabeledTreeNode	access:public
rightValue0Array	labeledTreeNode.h	/^  Value *rightValue0Array;$/;"	m	class:LabeledTreeNode	access:public
rightValue1Array	labeledTreeNode.h	/^  Value *rightValue1Array;$/;"	m	class:LabeledTreeNode	access:public
root	decisionGraph.h	/^  LabeledTreeNode *root;$/;"	m	class:DecisionGraph	access:private
root	frequencyTree.h	/^  TreeNode  *root;$/;"	m	class:FrequencyTree	access:private
runHeader	hBOAmain.cc	/^int runHeader(int run) {$/;"	f	signature:(int run)
runStatistics	statistics.cc	/^int runStatistics(Population *population, $/;"	f	signature:(Population *population, Fitness *fitness, long generations, double epsilon, double maxOptimal, int maxFailures, RunLog *runLog, int run)
runStatistics	statistics.h	/^int runStatistics(Population *population, $/;"	p	signature:(Population *population, Fitness *fitness, long generations, double epsilon, double maxOptimal, int maxFailures, RunLog *runLog, int run)
s	stack.h	/^  int *s;$/;"	m	class:IntStack	access:private
selection	hBOAmain.cc	/^Selection *selection;      \/\/ selection function$/;"	v
selectionBoltzmann	select.cc	/^int selectionBoltzmann(Population *population, Population *parents, long M)$/;"	f	signature:(Population *population, Population *parents, long M)
selectionBoltzmann	select.h	/^int selectionBoltzmann(Population *population, Population *parents, long M);$/;"	p	signature:(Population *population, Population *parents, long M)
selectionDesc	select.cc	/^static char *selectionDesc[8]={$/;"	v	file:
selectionN	hBOAmain.cc	/^int selectionN;            \/\/ number of the used selection method$/;"	v
selectionNone	select.cc	/^int selectionNone(Population *population, Population *parents, long M)$/;"	f	signature:(Population *population, Population *parents, long M)
selectionNone	select.h	/^int selectionNone(Population *population, Population *parents, long M);$/;"	p	signature:(Population *population, Population *parents, long M)
selectionProportional	select.cc	/^int selectionProportional(Population *population, Population *parents, long M)$/;"	f	signature:(Population *population, Population *parents, long M)
selectionProportional	select.h	/^int selectionProportional(Population *population, Population *parents, long M);$/;"	p	signature:(Population *population, Population *parents, long M)
selectionStatistics	statistics.cc	/^int selectionStatistics(Population *old, Population *selected)$/;"	f	signature:(Population *old, Population *selected)
selectionStatistics	statistics.h	/^int selectionStatistics(Population *old, Population *selected);$/;"	p	signature:(Population *old, Population *selected)
selectionTournamentWithReplacement	select.cc	/^int selectionTournamentWithReplacement(Population *population, Population *parents, long M)$/;"	f	signature:(Population *population, Population *parents, long M)
selectionTournamentWithReplacement	select.h	/^int selectionTournamentWithReplacement(Population *population, Population *parents, long M);$/;"	p	signature:(Population *population, Population *parents, long M)
selectionTournamentWithReplacementAndCoevolutionarySharing	select.h	/^int selectionTournamentWithReplacementAndCoevolutionarySharing(Population *population, Population *parents, long M);$/;"	p	signature:(Population *population, Population *parents, long M)
selectionTournamentWithReplacementAndContinuousSharing	select.cc	/^int selectionTournamentWithReplacementAndContinuousSharing(Population *population, Population *parents, long M)$/;"	f	signature:(Population *population, Population *parents, long M)
selectionTournamentWithReplacementAndContinuousSharing	select.h	/^int selectionTournamentWithReplacementAndContinuousSharing(Population *population, Population *parents, long M);$/;"	p	signature:(Population *population, Population *parents, long M)
selectionTournamentWithoutReplacement	select.cc	/^int selectionTournamentWithoutReplacement(Population *population, Population *parents, long M)$/;"	f	signature:(Population *population, Population *parents, long M)
selectionTournamentWithoutReplacement	select.h	/^int selectionTournamentWithoutReplacement(Population *population, Population *parents, long M);$/;"	p	signature:(Population *population, Population *parents, long M)
selectionTresholding	select.h	/^int selectionTresholding(Population *population, Population *parents, long M);$/;"	p	signature:(Population *population, Population *parents, long M)
selectionTruncation	select.cc	/^int selectionTruncation(Population *population, Population *parents, long M)$/;"	f	signature:(Population *population, Population *parents, long M)
selectionTruncation	select.h	/^int selectionTruncation(Population *population, Population *parents, long M);$/;"	p	signature:(Population *population, Population *parents, long M)
selectionTruncation2	select.cc	/^int selectionTruncation2(Population *population, Population *parents, long M)$/;"	f	signature:(Population *population, Population *parents, long M)
selectionTruncation2	select.h	/^int selectionTruncation2(Population *population, Population *parents, long M);$/;"	p	signature:(Population *population, Population *parents, long M)
setAllMarks	graph.cc	/^int OrientedGraph::setAllMarks(int val)$/;"	f	class:OrientedGraph	signature:(int val)
setAllMarks	graph.h	/^  int setAllMarks(int val);$/;"	p	class:OrientedGraph	access:public	signature:(int val)
setCompare	discretization.cc	/^void Discretization::setCompare(Population *p, int whichVariable)$/;"	f	class:Discretization	signature:(Population *p, int whichVariable)
setCompare	discretization.h	/^  void setCompare(Population *p, int whichVariable);$/;"	p	class:Discretization	access:public	signature:(Population *p, int whichVariable)
setFitnessNoiseVariance	fitness.cc	/^int setFitnessNoiseVariance(double variance)$/;"	f	signature:(double variance)
setFitnessNoiseVariance	fitness.h	/^int setFitnessNoiseVariance(double variance);$/;"	p	signature:(double variance)
setMark	graph.cc	/^int OrientedGraph::setMark(int i, int val)$/;"	f	class:OrientedGraph	signature:(int i, int val)
setMark	graph.h	/^  int setMark(int i, int val);$/;"	p	class:OrientedGraph	access:public	signature:(int i, int val)
setMarker	stack.cc	/^int IntStack::setMarker()$/;"	f	class:IntStack	signature:()
setMarker	stack.h	/^  int setMarker();$/;"	p	class:IntStack	access:public	signature:()
setParamValue	getFileArgs.cc	/^int setParamValue(FILE *f, char *filename, ParamStruct *param)$/;"	f	signature:(FILE *f, char *filename, ParamStruct *param)
setPriorNetworkSource	priors.cc	/^int setPriorNetworkSource(int source)$/;"	f	signature:(int source)
setPriorNetworkSource	priors.h	/^int setPriorNetworkSource(int source);$/;"	p	signature:(int source)
setSeed	random.cc	/^long  setSeed(long newSeed)$/;"	f	signature:(long newSeed)
setSeed	random.h	/^long setSeed(long newSeed);$/;"	p	signature:(long newSeed)
setValue	decisionGraph.cc	/^Value DecisionGraph::setValue(LabeledTreeNode *x, Value value, char which)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x, Value value, char which)
setValue	decisionGraph.h	/^  Value           setValue(LabeledTreeNode *x, Value value, char which);$/;"	p	class:DecisionGraph	access:public	signature:(LabeledTreeNode *x, Value value, char which)
shufflePopulation	population.cc	/^int shufflePopulation(Population *population)$/;"	f	signature:(Population *population)
shufflePopulation	population.h	/^int shufflePopulation(Population *population);$/;"	p	signature:(Population *population)
simulateDecisionGraphBayesianNetwork	decisionGraphBoa.cc	/^int simulateDecisionGraphBayesianNetwork(AcyclicOrientedGraph *G,$/;"	f	signature:(AcyclicOrientedGraph *G, FrequencyDecisionGraph **T, Population *P)
simulateDecisionGraphBayesianNetwork	decisionGraphBoa.h	/^int simulateDecisionGraphBayesianNetwork(AcyclicOrientedGraph *G,$/;"	p	signature:(AcyclicOrientedGraph *G, FrequencyDecisionGraph **T, Population *P)
size	graph.cc	/^int OrientedGraph::size()$/;"	f	class:OrientedGraph	signature:()
size	graph.h	/^  int size();$/;"	p	class:OrientedGraph	access:public	signature:()
size	stack.h	/^  int size;$/;"	m	class:IntStack	access:private
sortIndex	index.cc	/^int sortIndex(int *index, int n)$/;"	f	signature:(int *index, int n)
sortIndex	index.h	/^int sortIndex(int *index, int n);$/;"	p	signature:(int *index, int n)
split	decisionGraph.cc	/^int DecisionGraph::split(LabeledTreeNode *x, int label)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x, int label)
split	decisionGraph.h	/^  int split(LabeledTreeNode *x, int label);$/;"	p	class:DecisionGraph	access:public	signature:(LabeledTreeNode *x, int label)
split	frequencyDecisionGraph.cc	/^int FrequencyDecisionGraph::split(LabeledTreeNode *x, int label)$/;"	f	class:FrequencyDecisionGraph	signature:(LabeledTreeNode *x, int label)
split	frequencyDecisionGraph.h	/^  int split(LabeledTreeNode *x, int label);$/;"	p	class:FrequencyDecisionGraph	access:public	signature:(LabeledTreeNode *x, int label)
startUp	hBOAmain.cc	/^int startUp(int argc, char **argv) {$/;"	f	signature:(int argc, char **argv)
statistics	statistics.cc	/^int statistics(Population *population, long t, Fitness *fitness, StatisticsParams *statisticsParams)$/;"	f	signature:(Population *population, long t, Fitness *fitness, StatisticsParams *statisticsParams)
statistics	statistics.h	/^int statistics(Population *population, long t, Fitness *fitness, StatisticsParams *statisticsParams);$/;"	p	signature:(Population *population, long t, Fitness *fitness, StatisticsParams *statisticsParams)
statisticsParams	hBOAmain.cc	/^StatisticsParams statisticsParams; \/\/ parameters for statistics$/;"	v
stopWhenFoundOptimum	hBOAmain.cc	/^char stopWhenFoundOptimum; \/\/ stop if optimum has been found (if possible with fitness..)?$/;"	v
string2double	utils.h	/^double string2double(char *string);$/;"	p	signature:(char *string)
subtree	frequencyTree.h	/^  FrequencyTree **subtree;$/;"	m	struct:TreeSplit	access:public
sumLog	mymath.cc	/^double sumLog(long i, long j)$/;"	f	signature:(long i, long j)
sumLog	mymath.h	/^double sumLog(long i, long j);$/;"	p	signature:(long i, long j)
swapDoubles	utils.cc	/^double swapDoubles(double *a, double *b)$/;"	f	signature:(double *a, double *b)
swapDoubles	utils.h	/^double swapDoubles(double *a, double *b);$/;"	p	signature:(double *a, double *b)
swapIndividuals	population.cc	/^int swapIndividuals(Population *population, long i, long j)$/;"	f	signature:(Population *population, long i, long j)
swapIndividuals	population.h	/^int swapIndividuals(Population *population, long i, long j);$/;"	p	signature:(Population *population, long i, long j)
swapInt	utils.cc	/^int swapInt(int *a, int *b)$/;"	f	signature:(int *a, int *b)
swapInt	utils.h	/^int swapInt(int *a, int *b);$/;"	p	signature:(int *a, int *b)
swapLong	utils.cc	/^int swapLong(long *a, long *b)$/;"	f	signature:(long *a, long *b)
swapLong	utils.h	/^int swapLong(long *a, long *b);$/;"	p	signature:(long *a, long *b)
swapPointers	utils.cc	/^void swapPointers(void **a, void **b)$/;"	f	signature:(void **a, void **b)
swapPointers	utils.h	/^void swapPointers(void **a, void **b);$/;"	p	signature:(void **a, void **b)
swapPopulations	population.cc	/^void swapPopulations(Population *p, Population *q)$/;"	f	signature:(Population *p, Population *q)
swapPopulations	population.h	/^void swapPopulations(Population *p, Population *q);$/;"	p	signature:(Population *p, Population *q)
t	decisionGraphBoa.h	/^  FrequencyDecisionGraph *t;$/;"	m	struct:Operator	access:public
tMax	hBOAmain.cc	/^long tMax;                 \/\/ number of generations (if all other term. criteria not satisfied)$/;"	v
tagFitnessDefinition	userBOA.h	/^typedef struct	tagFitnessDefinition {$/;"	s
tagFitnessDefinition::fitness	userBOA.h	/^	typeFitness	*fitness;$/;"	m	struct:tagFitnessDefinition	access:public
tagFitnessDefinition::goodBBs	userBOA.h	/^	typeGoodBBs	*goodBBs;$/;"	m	struct:tagFitnessDefinition	access:public
tagFitnessDefinition::isBest	userBOA.h	/^	typeIsBest	*isBest;$/;"	m	struct:tagFitnessDefinition	access:public
timeToConvergence	statistics.h	/^    long       timeToConvergence;$/;"	m	struct:__anon11	access:public
topologicalOrdering	decisionGraphBoa.cc	/^int topologicalOrdering(AcyclicOrientedGraph *G,$/;"	f	signature:(AcyclicOrientedGraph *G, int *index)
topologicalOrdering	decisionGraphBoa.h	/^int topologicalOrdering(AcyclicOrientedGraph *G, int *index);$/;"	p	signature:(AcyclicOrientedGraph *G, int *index)
tournSize	select.cc	/^int tournSize=2;$/;"	v
tournamentSize	hBOAmain.cc	/^int tournamentSize;        \/\/ tournament size (for tournament selection)$/;"	v
trap	fitness.cc	/^int trap(char *x, int n, int order)$/;"	f	signature:(char *x, int n, int order)
trap	fitness.cc	/^static int trap(char *x, int n, int order);$/;"	p	file:	signature:(char *x, int n, int order)
trap	user/run_hBOA.cpp	/^int trap(char *x, int n, int order) {$/;"	f	signature:(char *x, int n, int order)
trap	user/run_hBOA.cpp	/^int trap(char *x, int n, int order);$/;"	p	file:	signature:(char *x, int n, int order)
trap4	fitness.cc	/^double trap4(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
trap4	fitness.cc	/^static double trap4(char *x, int numDiscrete, double *c, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous)
trap4GoodBBs	fitness.cc	/^double trap4GoodBBs(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
trap4GoodBBs	fitness.cc	/^static double trap4GoodBBs(char *x, int numDiscrete, double *c, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous)
treshold	select.cc	/^int treshold=2;$/;"	v
twomaxFactor	fitness.cc	/^double twomaxFactor;$/;"	v
type	decisionGraphBoa.h	/^  int   type;$/;"	m	struct:Operator	access:public
type	getFileArgs.h	/^  char type;$/;"	m	struct:__anon4	access:public
typeDesc	getFileArgs.cc	/^char *typeDesc[30] = $/;"	v
typeFitness	userBOA.h	/^typedef double typeFitness(int iLength, char *pChromosome);$/;"	t
typeGoodBBs	userBOA.h	/^typedef double typeGoodBBs(int iLength, char *pChromosome);$/;"	t
typeIsBest	userBOA.h	/^typedef char   typeIsBest(int iLength, char *pChromosome);$/;"	t
undiscretize	dicretize.h	/^  virtual void undiscretize(Population *p)=0;$/;"	p	class:Discretization	access:private	signature:(Population *p)
undiscretize	discretization.cc	/^void Discretization::undiscretize(Population *p,Population *q, DiscretizationParams *params)$/;"	f	class:Discretization	signature:(Population *p,Population *q, DiscretizationParams *params)
undiscretize	discretization.h	/^  void undiscretize(Population *p, Population *q, DiscretizationParams *params);$/;"	p	class:Discretization	access:public	signature:(Population *p, Population *q, DiscretizationParams *params)
undiscretizeFHH	discretization.cc	/^void Discretization::undiscretizeFHH(Individual *from, Individual *to)$/;"	f	class:Discretization	signature:(Individual *from, Individual *to)
undiscretizeFHH	discretization.h	/^  void undiscretizeFHH(Individual *from, Individual *to);$/;"	p	class:Discretization	access:public	signature:(Individual *from, Individual *to)
undiscretizeFWH	discretization.h	/^  void undiscretizeFWH(Individual *from, Individual *to);$/;"	p	class:Discretization	access:public	signature:(Individual *from, Individual *to)
undiscretizeKMeans	discretization.cc	/^void Discretization::undiscretizeKMeans(Individual *from, Individual *to)$/;"	f	class:Discretization	signature:(Individual *from, Individual *to)
undiscretizeKMeans	discretization.h	/^  void undiscretizeKMeans(Individual *from, Individual *to);$/;"	p	class:Discretization	access:public	signature:(Individual *from, Individual *to)
unitation	binary.cc	/^int unitation(char *x, char n)$/;"	f	signature:(char *x, char n)
unitation	binary.h	/^int unitation(char *x, char n);$/;"	p	signature:(char *x, char n)
univariateFrequency	frequencyDecisionGraph.cc	/^double FrequencyDecisionGraph::univariateFrequency(int k)$/;"	f	class:FrequencyDecisionGraph	signature:(int k)
univariateFrequency	frequencyDecisionGraph.h	/^  double univariateFrequency(int k);$/;"	p	class:FrequencyDecisionGraph	access:private	signature:(int k)
updateBestNodeOperator	decisionGraphBoa.cc	/^int updateBestNodeOperator(Operator *x, FrequencyDecisionGraph *t, MergeOperator *merge, int numMerges, int node, int n)$/;"	f	signature:(Operator *x, FrequencyDecisionGraph *t, MergeOperator *merge, int numMerges, int node, int n)
updateBestNodeOperator	decisionGraphBoa.h	/^int updateBestNodeOperator(Operator *x, FrequencyDecisionGraph *t, MergeOperator *merge, int numMerges, int node, int n);$/;"	p	signature:(Operator *x, FrequencyDecisionGraph *t, MergeOperator *merge, int numMerges, int node, int n)
updateBestOperator	decisionGraphBoa.cc	/^int updateBestOperator(Operator *best, Operator *x)$/;"	f	signature:(Operator *best, Operator *x)
updateBestOperator	decisionGraphBoa.h	/^int updateBestOperator(Operator *best, Operator *x);$/;"	p	signature:(Operator *best, Operator *x)
updateGainsAfterOperator	decisionGraphBoa.cc	/^int updateGainsAfterOperator(Operator *x, AcyclicOrientedGraph *G, int maxParents, long N, RecombinationParams *params)$/;"	f	signature:(Operator *x, AcyclicOrientedGraph *G, int maxParents, long N, RecombinationParams *params)
updateGainsAfterOperator	decisionGraphBoa.h	/^int updateGainsAfterOperator(Operator *x, AcyclicOrientedGraph *G, int maxParents, long N, RecombinationParams *params);$/;"	p	signature:(Operator *x, AcyclicOrientedGraph *G, int maxParents, long N, RecombinationParams *params)
updateLeavesAfterSplit	decisionGraph.cc	/^int DecisionGraph::updateLeavesAfterSplit(LabeledTreeNode *x)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x)
updateLeavesAfterSplit	decisionGraph.h	/^  int updateLeavesAfterSplit(LabeledTreeNode *x);$/;"	p	class:DecisionGraph	access:private	signature:(LabeledTreeNode *x)
updateLeavesBeforeMerge	decisionGraph.cc	/^int DecisionGraph::updateLeavesBeforeMerge(LabeledTreeNode *x, LabeledTreeNode *y)$/;"	f	class:DecisionGraph	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
updateLeavesBeforeMerge	decisionGraph.h	/^  int updateLeavesBeforeMerge(LabeledTreeNode *x, LabeledTreeNode *y);$/;"	p	class:DecisionGraph	access:private	signature:(LabeledTreeNode *x, LabeledTreeNode *y)
useBoltzmannFrequencies	recombination.h	/^  char          useBoltzmannFrequencies;$/;"	m	struct:__anon2	access:public
useDefaultTables	recombination.h	/^  int           useDefaultTables;$/;"	m	struct:__anon2	access:public
userEvaluator	fitness.cc	/^double userEvaluator(char *x, int numDiscrete, double *continuous, int numContinous) $/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinous)
userEvaluator	fitness.cc	/^double userEvaluator(char *x, int numDiscrete, double *continuous, int numContinous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *continuous, int numContinous)
userGoodBBs	fitness.cc	/^double userGoodBBs(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
userGoodBBs	fitness.cc	/^double userGoodBBs(char *x, int numDiscrete, double *continuous, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
userIsBest	fitness.cc	/^char userIsBest(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double f)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double f)
userIsBest	fitness.cc	/^char userIsBest(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double f);$/;"	p	file:	signature:(char *x, int numDiscrete, double *continuous, int numContinuous, char type, double f)
value	frequencyTree.h	/^  double    value;$/;"	m	struct:TreeNode	access:public
value	labeledTreeNode.h	/^  Value     value[2];$/;"	m	class:LabeledTreeNode	access:public
where	decisionGraphBoa.h	/^  int   where;$/;"	m	struct:Operator	access:public
where	getFileArgs.h	/^  void *where;$/;"	m	struct:__anon4	access:public
which	frequencyTree.h	/^  int             which;$/;"	m	struct:TreeSplit	access:public
which	frequencyTree.h	/^  int       which;$/;"	m	struct:TreeNode	access:public
which	labeledTreeNode.h	/^  int       which;$/;"	m	class:LabeledTreeNode	access:public
whichGaussian	random.cc	/^char whichGaussian=0; \/\/ which gaussian to generate$/;"	v
whichOptimum	fitness.h	/^  WhichOptimum      *whichOptimum;$/;"	m	struct:__anon13	access:public
whichOptimumHIFF	fitness.cc	/^long whichOptimumHIFF(char *x, int numDiscrete, double *continuous, int numContinuous)$/;"	f	signature:(char *x, int numDiscrete, double *continuous, int numContinuous)
whichOptimumHIFF	fitness.cc	/^static long whichOptimumHIFF(char *x, int numDiscrete, double *c, int numContinuous);$/;"	p	file:	signature:(char *x, int numDiscrete, double *c, int numContinuous)
worst	population.h	/^  long   worst;$/;"	m	struct:__anon8	access:public
worst	statistics.h	/^    Individual worst;$/;"	m	struct:__anon11	access:public
writeFinalInfo	hBOAmain.cc	/^void writeFinalInfo(RunLog *runLog, int numRuns) {$/;"	f	signature:(RunLog *runLog, int numRuns)
x	arrays.h	/^    int *x;$/;"	m	class:CoupleArray	access:private
x	decisionGraph.h	/^  LabeledTreeNode *x;$/;"	m	struct:NodeListItem	access:public
y	arrays.h	/^    int *y;$/;"	m	class:CoupleArray	access:private
yesNoDescriptor	getFileArgs.cc	/^char *yesNoDescriptor(int i)$/;"	f	signature:(int i)
yesNoDescriptor	getFileArgs.h	/^char *yesNoDescriptor(int i);$/;"	p	signature:(int i)
yesString	getFileArgs.cc	/^char *yesString = "Yes";$/;"	v
~AcyclicOrientedGraph	graph.cc	/^AcyclicOrientedGraph::~AcyclicOrientedGraph()$/;"	f	class:AcyclicOrientedGraph	signature:()
~AcyclicOrientedGraph	graph.h	/^  ~AcyclicOrientedGraph();$/;"	p	class:AcyclicOrientedGraph	access:public	signature:()
~BoundedIncommingEdgesAcyclicOrientedGraph	graph.cc	/^BoundedIncommingEdgesAcyclicOrientedGraph::~BoundedIncommingEdgesAcyclicOrientedGraph()$/;"	f	class:BoundedIncommingEdgesAcyclicOrientedGraph	signature:()
~BoundedIncommingEdgesAcyclicOrientedGraph	graph.h	/^  ~BoundedIncommingEdgesAcyclicOrientedGraph();$/;"	p	class:BoundedIncommingEdgesAcyclicOrientedGraph	access:public	signature:()
~CoupleArray	arrays.cc	/^CoupleArray::~CoupleArray()$/;"	f	class:CoupleArray	signature:()
~CoupleArray	arrays.h	/^    ~CoupleArray();$/;"	p	class:CoupleArray	access:public	signature:()
~DecisionGraph	decisionGraph.cc	/^DecisionGraph::~DecisionGraph()$/;"	f	class:DecisionGraph	signature:()
~DecisionGraph	decisionGraph.h	/^  ~DecisionGraph();$/;"	p	class:DecisionGraph	access:public	signature:()
~Discretization	dicretize.h	/^  ~Discretization();$/;"	p	class:Discretization	access:private	signature:()
~Discretization	discretization.cc	/^Discretization::~Discretization()$/;"	f	class:Discretization	signature:()
~Discretization	discretization.h	/^  ~Discretization();$/;"	p	class:Discretization	access:public	signature:()
~FrequencyDecisionGraph	frequencyDecisionGraph.cc	/^FrequencyDecisionGraph::~FrequencyDecisionGraph()$/;"	f	class:FrequencyDecisionGraph	signature:()
~FrequencyDecisionGraph	frequencyDecisionGraph.h	/^  ~FrequencyDecisionGraph();$/;"	p	class:FrequencyDecisionGraph	access:public	signature:()
~FrequencyTree	frequencyTree.cc	/^FrequencyTree::~FrequencyTree()$/;"	f	class:FrequencyTree	signature:()
~FrequencyTree	frequencyTree.h	/^  ~FrequencyTree();$/;"	p	class:FrequencyTree	access:public	signature:()
~IntStack	stack.cc	/^IntStack::~IntStack()$/;"	f	class:IntStack	signature:()
~IntStack	stack.h	/^  ~IntStack();$/;"	p	class:IntStack	access:public	signature:()
~LabeledTreeNode	labeledTreeNode.cc	/^LabeledTreeNode::~LabeledTreeNode()$/;"	f	class:LabeledTreeNode	signature:()
~LabeledTreeNode	labeledTreeNode.h	/^  ~LabeledTreeNode();$/;"	p	class:LabeledTreeNode	access:public	signature:()
~LeastIncommingEdgesAcyclicOrientedGraph	graph.cc	/^LeastIncommingEdgesAcyclicOrientedGraph::~LeastIncommingEdgesAcyclicOrientedGraph()$/;"	f	class:LeastIncommingEdgesAcyclicOrientedGraph	signature:()
~LeastIncommingEdgesAcyclicOrientedGraph	graph.h	/^  ~LeastIncommingEdgesAcyclicOrientedGraph();$/;"	p	class:LeastIncommingEdgesAcyclicOrientedGraph	access:public	signature:()
~LoudAcyclicOrientedGraph	graph.cc	/^LoudAcyclicOrientedGraph::~LoudAcyclicOrientedGraph()$/;"	f	class:LoudAcyclicOrientedGraph	signature:()
~LoudAcyclicOrientedGraph	graph.h	/^  ~LoudAcyclicOrientedGraph();$/;"	p	class:LoudAcyclicOrientedGraph	access:public	signature:()
~OrientedGraph	graph.cc	/^OrientedGraph::~OrientedGraph()$/;"	f	class:OrientedGraph	signature:()
~OrientedGraph	graph.h	/^  ~OrientedGraph();$/;"	p	class:OrientedGraph	access:public	signature:()
